// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"iJYvl":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "5c1b77e3b71e74eb";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id1][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"h7u1C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nearConfig", ()=>nearConfig);
parcelHelpers.export(exports, "near", ()=>near);
parcelHelpers.export(exports, "wallet", ()=>wallet);
var _nearApiJs = require("near-api-js");
var _config = require("./config");
var _disconnectedWallet = require("./wallet-api/disconnected-wallet");
var _nearWebWallet = require("./wallet-api/near-web-wallet/near-web-wallet");
var _narwallets = require("./wallet-api/narwallets/narwallets");
var _conversions = require("./util/conversions");
//qs/qsa are shortcut for document.querySelector/All
var _document = require("./util/document");
var _checkRedirectSearchParams = require("./wallet-api/near-web-wallet/checkRedirectSearchParams");
var _nep141 = require("./contracts/NEP141");
var _poolParams = require("./entities/poolParams");
var _poolList = require("./entities/poolList");
var _poolParamsP3 = require("./entities/poolParamsP3");
var _oracle = require("./util/oracle");
var _nftStructs = require("./contracts/nft-structs");
var _bnJs = require("bn.js");
var _multipleCall = require("./contracts/multipleCall");
var _poolParamsNFT = require("./entities/poolParamsNFT");
var _liquidityButton = require("./util/animations/liquidityButton");
var _newConfettiButton = require("./util/animations/new-confetti-button");
let nearConfig = (0, _config.getConfig)((0, _config.ENV)); //default testnet, can change according to URL on window.onload
let near;
let wallet = (0, _disconnectedWallet.disconnectedWallet);
let nearWebWalletConnection;
let nearConnectedWalletAccount;
let accountName;
let isPaused = false;
let loggedWithNarwallets = false;
//time in ms
const SECONDS = 1000;
const MINUTES = 60 * SECONDS;
const HOURS = 60 * MINUTES;
let countDownIntervalId;
const refreshTime = 60 * SECONDS;
const ONE_NEAR = BigInt(10) ** BigInt(24);
//------------------------------
//--- connect buttons->code ----
//------------------------------
//all popup "cancel" buttons
(0, _document.qsa)(".popup button#cancel").forEach((f)=>f.onclick = (event)=>{
        event.preventDefault();
        (0, _document.hideOverlay)();
    });
//connect wallet selection boxes
// qs('#near-web-wallet-box').onclick = loginNearWebWallet
// qs('#narwallets-wallet-box').onclick = loginNarwallets
//nav my-account "home"
(0, _document.qs)("nav #home").onclick = async function(event) {
    event.preventDefault();
    if (wallet.isConnected()) {
        showSection("#home-connected");
        selectNav("#home");
    } else signedOutFlow();
};
(0, _document.qs)("#logo").onclick = async function(event) {
    event.preventDefault();
    if (wallet.isConnected()) signedInFlow(wallet);
    else signedOutFlow();
};
(0, _document.qs)("#my-account").onclick = async function(event) {
    event.preventDefault();
    if (wallet.isConnected()) {
        console.log("Connected");
        signedInFlow(wallet);
    } else {
        console.log("Disconnected");
        loginNearWebWallet();
    }
};
let moreGamesButton = (0, _document.qs)(".games-dropdown");
moreGamesButton.addEventListener("click", gamesDropdownHandler());
let noLivePoolsMsg = (0, _document.qs)(".no-live-pools-msg");
noLivePoolsMsg.addEventListener("click", gamesDropdownHandler());
function gamesDropdownHandler() {
    return function() {
        let gamesDropdownContainer = (0, _document.qs)(".games-dropdown-items");
        gamesDropdownContainer.classList.toggle("down");
        let gamesLinksContainer = (0, _document.qs)(".games-links-container");
        gamesLinksContainer.classList.toggle("games-dropdown-hidden-position");
        moreGamesButton.querySelector("svg").classList.toggle("flipped");
    };
}
//generic nav handler
function navClickHandler_ConnectFirst(event) {
    event.preventDefault();
    if (wallet.isConnected()) //show section with same id as the <anchor> link
    showSection("#" + event.target.closest("a")?.id);
    else {
        showSection("#home");
        loginNearWebWallet();
    // sayChoose()
    }
}
(0, _document.qs)("nav #unstake-m").onclick = navClickHandler_ConnectFirst;
(0, _document.qs)("nav #liquidity").onclick = navClickHandler_ConnectFirst;
(0, _document.qs)("nav #my-account").onclick = navClickHandler_ConnectFirst;
(0, _document.qs)("nav #faq").onclick = ()=>{
    showSection("#faq");
};
function sayChoose() {
    (0, _document.showMessage)("Please choose a wallet to connect", "Connect first");
}
//button sign-out
(0, _document.qs)("#sign-out").onclick = async function(event) {
    event.preventDefault();
    wallet.disconnect();
    wallet = (0, _disconnectedWallet.disconnectedWallet);
    signedOutFlow();
};
//New filters
function filterPools(className) {
    return function(event) {
        filterButtonClicked(event);
        hideAllPools();
        let livePools = (0, _document.qsa)(`.${className}`);
        // let livePools = qsa("test-no-live-pools-msg")
        showSelectedPools(livePools, className);
    };
}
function filterButtonClicked(event) {
    let previousFilterClicked = (0, _document.qsa)(".activeFilterButton");
    previousFilterClicked.forEach((button)=>{
        button.classList.remove("activeFilterButton");
    });
    let buttonClicked = event.target;
    buttonClicked.classList.add("activeFilterButton");
}
function hideAllPools() {
    let allPools = document.querySelectorAll(".pool-container");
    allPools.forEach((pool)=>{
        pool.classList.add("hidden");
    });
}
function showSelectedPools(selectedPools, className) {
    if (selectedPools.length > 0) {
        (0, _document.qs)(".no-live-pools-msg").classList.add("hidden");
        selectedPools.forEach((pool)=>{
            pool.classList.remove("hidden");
        });
    } else if (className == "active-pool") (0, _document.qs)(".no-live-pools-msg").classList.remove("hidden");
}
//Events on filter buttons
(0, _document.qs)("#live-filter").onclick = filterPools("active-pool");
(0, _document.qs)("#ended-filter").onclick = filterPools("inactive-pool");
(0, _document.qs)("#your-farms-filter").onclick = filterPools("your-farms");
function activateClicked(poolParams, pool) {
    return async function(event) {
        event.preventDefault();
        let TXs = [];
        const stakeTokenList = await poolParams.stakingContractData.getStakeTokenContractList();
        for(let i = 0; i < stakeTokenList.length; i++){
            const tokenContract = stakeTokenList[i].contract;
            const doesNeedStorageDeposit = await needsStorageDeposit(tokenContract);
            if (doesNeedStorageDeposit) TXs.push({
                promise: tokenContract.storageDepositWithoutSend(),
                contractName: tokenContract.contractId
            });
        }
        const doesNeedStorageDeposit = await needsStorageDeposit(poolParams.stakingContractData.contract);
        if (doesNeedStorageDeposit) TXs.push({
            promise: poolParams.stakingContractData.contract.storageDepositWithoutSend(),
            contractName: poolParams.stakingContractData.contract.contractId
        });
        await (0, _multipleCall.callMulipleTransactions)(TXs, poolParams.stakingContractData.contract);
        pool.querySelector("#deposit").classList.remove("hidden");
        pool.querySelector("#activated").classList.add("hidden");
    };
}
async function needsStorageDeposit(contract) {
    if (!wallet.isConnected()) return false;
    const contractStorageBalanceData = await contract.storageBalance();
    if (contractStorageBalanceData == null) return true;
    const contractStorageBalanceBN = new (0, _bnJs.BN)(contractStorageBalanceData.total);
    return !contractStorageBalanceBN.gten(0);
}
async function getUnclaimedRewardsInUSDSingle(poolParams) {
    const rewardToken = "cheddar";
    const rewardTokenData = await (0, _oracle.getTokenData)(rewardToken);
    const metaData = await poolParams.cheddarContract.ft_metadata();
    const userPoolParams = await poolParams.stakingContractData.getUserStatus();
    const currentRewards = userPoolParams.real;
    const currentRewardsDisplayable = (0, _conversions.convertToDecimals)(currentRewards, metaData.decimals, 5);
    return parseFloat(rewardTokenData.price) * parseFloat(currentRewardsDisplayable);
}
/**
 * 
 * @param tokenContractList 
 * @param amountList array containing the amounts to be converted with the metadata decimals included
 * @returns 
 */ async function convertToUSDMultiple(tokenContractList, amountList) {
    // const stakeTokenContractList = poolParams.stakeTokenContractList
    //TODO DANI make better. Avoid calling the promise
    await Promise.all(tokenContractList.map((tokenContract)=>tokenContract.getMetadata()));
    const rewardTokenArray = tokenContractList.map((tokenContract)=>tokenContract.getMetadataSync().symbol);
    const rewardTokenDataMap = await (0, _oracle.getTokenDataArray)(rewardTokenArray);
    let amountInUsd = 0;
    tokenContractList.forEach((tokenContract, index)=>{
        const metaData = tokenContract.getMetadataSync();
        const symbol = metaData.symbol;
        const amount = amountList[index];
        // console.log(unclaimedRewards)
        const currentRewardsDisplayable = (0, _conversions.convertToDecimals)(amount, metaData.decimals, 5);
        const tokenData = rewardTokenDataMap.get(symbol.toLowerCase());
        amountInUsd += parseFloat(tokenData.price) * parseFloat(currentRewardsDisplayable);
    });
    return amountInUsd.toFixed(5);
}
function stakeMultiple(poolParams, newPool) {
    return async function(event) {
        event?.preventDefault();
        (0, _document.showWait)("Staking...");
        // let stakeContainerList = newPool.querySelectorAll(".main-stake .input-container")  
        let inputArray = [];
        try {
            let unixTimestamp = new Date().getTime() / 1000; //unix timestamp (seconds)
            const contractParams = await poolParams.stakingContractData.getContractParams();
            // const contractParams = poolParams.contractParams
            // const isDateInRange = contractParams.farming_start < unixTimestamp && unixTimestamp < contractParams.farming_end
            const isDateInRange = unixTimestamp < contractParams.farming_end;
            if (!isDateInRange) throw Error("Pools is Closed.");
            const { htmlInputArray , amountValuesArray: amountValues , transferedAmountWithSymbolArray: stakedAmountWithSymbol  } = await getInputDataMultiple(poolParams, newPool, "stake");
            inputArray = htmlInputArray;
            (0, _document.qsaAttribute)("input", "disabled", "disabled");
            //get amount
            const min_deposit_amount = 1;
            await poolParams.stake(amountValues);
            if (loggedWithNarwallets) {
                //clear form
                for(let i = 0; i < inputArray.length; i++)inputArray[i].value = "";
                // const poolUserStatus = await poolParams.stakingContractData.getUserStatus()
                // poolUserStatus.addStaked(amountValues)
                poolParams.stakingContractData.refreshData();
                (0, _document.showSuccess)(`Staked ${stakedAmountWithSymbol.join(" - ")}`);
            }
        } catch (ex) {
            (0, _document.showErr)(ex);
        }
        // re-enable the form, whether the call succeeded or failed
        inputArray.forEach((input)=>{
            input.removeAttribute("disabled");
        });
    };
}
function unstakeMultiple(poolParams, newPool) {
    return async function(event) {
        event?.preventDefault();
        (0, _document.showWait)("Unstaking...");
        // let stakeContainerList = newPool.querySelectorAll(".main-stake .input-container")  
        let inputArray = [];
        try {
            let unixTimestamp = new Date().getTime() / 1000; //unix timestamp (seconds)
            const contractParams = await poolParams.stakingContractData.getContractParams();
            // const contractParams = poolParams.contractParams
            // const isDateInRange = contractParams.farming_start < unixTimestamp && unixTimestamp < contractParams.farming_end
            // const isDateInRange = unixTimestamp > contractParams.farming_start
            // if (!isDateInRange) throw Error("Pools is not open yet.")
            const { htmlInputArray , amountValuesArray: amountValues , transferedAmountWithSymbolArray: unstakedAmountWithSymbol  } = await getInputDataMultiple(poolParams, newPool, "unstake");
            inputArray = htmlInputArray;
            (0, _document.qsaAttribute)("input", "disabled", "disabled");
            //get amount
            const min_deposit_amount = 1;
            await poolParams.unstake(amountValues);
            if (loggedWithNarwallets) {
                //clear form
                for(let i = 0; i < inputArray.length; i++)inputArray[i].value = "";
                // poolParams.poolUserStatus.addStaked(amountValues.map(value => -value))
                poolParams.stakingContractData.refreshData();
                (0, _document.showSuccess)(`Staked ${unstakedAmountWithSymbol.join(" - ")}`);
            }
        } catch (ex) {
            (0, _document.showErr)(ex);
        }
        // re-enable the form, whether the call succeeded or failed
        inputArray.forEach((input)=>{
            input.removeAttribute("disabled");
        });
    };
}
async function getInputDataMultiple(poolParams, newPool, action) {
    let htmlInputArray = [];
    let amountValuesArray = [];
    let stakedAmountWithSymbolArray = [];
    let inputContainerList = newPool.querySelectorAll(`.main-${action} .input-container`);
    const stakeTokenContractList = await poolParams.stakingContractData.getStakeTokenContractList();
    let boundary;
    if (action == "stake") boundary = await poolParams.getWalletAvailable();
    else if (action == "unstake") {
        const poolUserStatus = await poolParams.stakingContractData.getUserStatus();
        boundary = poolUserStatus.stake_tokens;
    } else throw Error(`Action ${action} not available`);
    for(let i = 0; i < inputContainerList.length; i++){
        let stakeContainer = inputContainerList[i];
        let input = stakeContainer.querySelector(".amount");
        htmlInputArray.push(input);
        let amount = parseFloat(input.value);
        if (isNaN(amount)) throw Error("Please Input a Number.");
        // const metaData = stakeTokenContractList[i].metaData
        const currentStakeTokenMetadata = await stakeTokenContractList[i].getMetadata();
        const stakeAmountBN = BigInt((0, _conversions.convertToBase)(amount.toString(), currentStakeTokenMetadata.decimals.toString()));
        console.log(i, boundary[i]);
        if (BigInt(boundary[i]) < stakeAmountBN) {
            const balanceDisplayable = (0, _conversions.convertToDecimals)(boundary[i], currentStakeTokenMetadata.decimals, 5);
            throw Error(`Only ${balanceDisplayable} ${currentStakeTokenMetadata.symbol} Available to ${action}.`);
        }
        amountValuesArray.push(stakeAmountBN);
        stakedAmountWithSymbolArray.push(`${amount} ${currentStakeTokenMetadata.symbol}`);
    }
    return {
        htmlInputArray,
        amountValuesArray,
        transferedAmountWithSymbolArray: stakedAmountWithSymbolArray
    };
}
function stakeSingle(poolParams, newPool) {
    return async function(event) {
        event?.preventDefault();
        (0, _document.showWait)("Staking...");
        let stakeInput = newPool.querySelector(".main-stake input");
        try {
            // let unixTimestamp = new Date().getTime() / 1000; //unix timestamp (seconds)
            // const contractParams = await poolParams.stakingContractData.getContractParams()
            // const isDateInRange = contractParams.farming_start < unixTimestamp && unixTimestamp < contractParams.farming_end
            // if (!isDateInRange) throw Error("Pools is Closed.")
            stakeInput.setAttribute("disabled", "disabled");
            let stakeAmount = parseFloat(stakeInput.value);
            //get amount
            const min_deposit_amount = 1;
            if (isNaN(stakeAmount)) throw Error("Please Input a Number.");
            const walletAvailable = await poolParams.getWalletAvailable();
            if (stakeAmount > parseFloat(walletAvailable)) throw Error(`Only ${walletAvailable} ${poolParams.stakeTokenMetaData.symbol} Available to Stake.`);
            const stakeTokenContract = (await poolParams.stakingContractData.getStakeTokenContractList())[0];
            const stakeTokenMetadata = await stakeTokenContract.getMetadata();
            await poolParams.stakeTokenContract.ft_transfer_call(poolParams.stakingContractData.contract.contractId, (0, _conversions.convertToBase)(stakeAmount.toString(), stakeTokenMetadata.decimals.toString()), "to farm");
        // if (loggedWithNarwallets) {
        //   //clear form
        //   stakeInput.value = ""
        //   poolParams.resultParams.addStaked(ntoy(stakeAmount))
        //   refreshPoolInfo(poolParams, newPool)//Question: shouldnt this be in refreshPoolInfo?
        //   showSuccess("Staked " + toStringDecMin(stakeAmount) + poolParams.stakeTokenMetaData.symbol)
        // }
        } catch (ex) {
            (0, _document.showErr)(ex);
        }
        // re-enable the form, whether the call succeeded or failed
        stakeInput.removeAttribute("disabled");
    };
}
// TODO DANI - implement
function harvestMultipleOrNFT(poolParams, newPool) {
    return async function(event) {
        event?.preventDefault();
        let poolID = poolParams.html.id;
        poolParams.confettiButton?.clickButtonWithRedirection(poolID);
        (0, _document.showWait)("Harvesting...");
        await poolParams.stakingContractData.contract.withdraw_crop();
        (0, _document.showSuccess)("Harvested successfully");
    };
}
function harvestSingle(poolParams, newPool) {
    return async function(event) {
        event?.preventDefault();
        (0, _document.showWait)("Harvesting...");
        let poolID = poolParams.html.id;
        poolParams.confettiButton?.clickButtonWithRedirection(poolID);
        const poolUserStatus = await poolParams.stakingContractData.getUserStatus();
        let amount = poolUserStatus.getCurrentCheddarRewards();
        await poolParams.stakingContractData.contract.withdraw_crop();
        poolUserStatus.computed = 0n;
        poolUserStatus.real = 0n;
        // newPool.querySelector(".unclaimed-rewards-value")!.innerHTML = "0"
        (0, _document.showSuccess)("Harvested" + (0, _conversions.toStringDecMin)(parseFloat(amount)) + " CHEDDAR");
    };
}
function unstakeSingle(poolParams, newPool) {
    return async function(event) {
        event?.preventDefault();
        (0, _document.showWait)("Unstaking...");
        const poolUserStatus = await poolParams.stakingContractData.getUserStatus();
        const stakeTokenContract = (await poolParams.stakingContractData.getStakeTokenContractList())[0];
        const stakeTokenMetadata = await stakeTokenContract.getMetadata();
        let unstakeInput = newPool.querySelector(".main-unstake input");
        try {
            unstakeInput.setAttribute("disabled", "disabled");
            let unstakeAmount = parseFloat(unstakeInput.value);
            const staked = poolUserStatus.staked;
            const stakedDisplayable = Number((0, _conversions.convertToDecimals)(staked.toString(), stakeTokenMetadata.decimals, 5));
            if (isNaN(unstakeAmount)) throw Error("Please Input a Number.");
            if (unstakeAmount > stakedDisplayable) throw Error(`Only ${stakedDisplayable} ${stakeTokenMetadata.symbol} Available to Unstake.`);
            await poolParams.stakingContractData.contract.unstake((0, _conversions.convertToBase)(unstakeAmount.toString(), stakeTokenMetadata.decimals.toString()));
        // if (loggedWithNarwallets) {
        //   //clear form
        //   unstakeInput.value = ""
        //   //refresh acc info
        //   refreshPoolInfo(poolParams, newPool)
        //   poolUserStatus.addStaked(ntoy(unstakeAmount))
        //   // refreshPoolInfoSingle(poolParams, newPool) //Esta línea la agregué porque pensé que corresponde pero realmente estoy confundido.
        //   showSuccess("Unstaked " + toStringDecMin(unstakeAmount) + poolParams.stakeTokenMetaData.symbol)
        // }
        } catch (ex) {
            (0, _document.showErr)(ex);
        }
        // re-enable the form, whether the call succeeded or failed
        unstakeInput.removeAttribute("disabled");
    };
}
function termsOfUseListener() {
    return async function(event) {
        event.preventDefault();
        (0, _document.showPopup)("#terms.popup");
    };
}
function showUnstakeResult(unstaked) {
    (0, _document.showSuccess)(`<div class="stat-line"> <dt>Unstaked</dt><dd>${(0, _conversions.toStringDec)(unstaked)}</dd> </div>`, "Unstake");
}
function showRemoveLiquidityResult(yoctoCheddar) {
    (0, _document.showSuccess)(`<div class="stat-line"> <dt>cheddar received</dt><dd>${(0, _conversions.toStringDec)((0, _conversions.yton)(yoctoCheddar))}</dd> </div>`, "Withdraw crop");
}
//--------------------------------------
// AutoRefresh
async function autoRefresh() {
    wallet && wallet.isConnected();
}
//--------------------------------------
function showSection(selector) {
    //hide all sections
    (0, _document.qsa)("main section").forEach((0, _document.hide));
    //show section
    const section = (0, _document.qs)("main").querySelector(selector);
    if (section) {
        (0, _document.show)(section);
        selectNav(selector);
    }
    //hide burger button
    (0, _document.qs)(".burger-button").classList.remove("burger-button--toggle");
    (0, _document.qs)(".navbar-links").classList.remove("show-right__nav");
}
function selectNav(selector) {
    //nav
    const allNav = (0, _document.qsa)("nav a");
    allNav.forEach((e)=>e.classList.remove("selected"));
    (0, _document.qs)("nav").querySelector(selector)?.classList.add("selected");
}
//after connecting, preserve the amount the user typed on home screen
function takeUserAmountFromHome() {
    let result = "";
    try {
        //move amount typed while not-connected
        const notConnectedStakeInput = (0, _document.qsi)("#stake-form-not-connected input.near");
        result = notConnectedStakeInput.value;
        //check also local storage
        if (!result) result = localStorage.getItem("amount") || "";
        if (result) {
            (0, _document.qsi)("#stake input.near").value = result;
            notConnectedStakeInput.value = "" //clear.- move only once
            ;
            localStorage.removeItem("amount");
        }
    } catch (ex) {
    //ignore
    }
    return result;
}
// Display the signed-out-flow container
async function signedOutFlow() {
    signedInFlow((0, _disconnectedWallet.disconnectedWallet));
// showSection("#home")
// await refreshAccountInfo();
}
// Displaying the signed in flow container and fill in account-specific data
async function signedInFlow(wallet1) {
    showSection("#home-connected");
    selectNav("#home");
    takeUserAmountFromHome();
    // await refreshAccountInfoGeneric(poolList)
    if (wallet1.isConnected()) {
        // const poolList = await getPoolList(wallet);    
        // qs(".user-info #account-id").innerText = poolList[0].wallet.getAccountId()
        let walletID = wallet1.getDisplayableAccountId();
        let walletDisplayableID;
        if (walletID.length < 15) walletDisplayableID = walletID;
        else walletDisplayableID = walletID.slice(0, 12) + "...";
        let accountIdElement = (0, _document.qs)(".user-info #account-id");
        accountIdElement.innerText = walletDisplayableID;
        accountIdElement.title = walletID;
    // qs(".not-connected-msg").classList.add("hidden")
    } else {
        (0, _document.qs)(".not-connected-msg").classList.remove("hidden");
        // initButton()
        // If user is disconnected it, account Id is the default disconnected message
        (0, _document.qs)(".user-info #account-id").innerText = wallet1.getAccountId();
    }
}
function setDefaultFilter(didJustActivate = false) {
    let allYourFarmsPools = (0, _document.qsa)(".your-farms");
    let allLivePools = (0, _document.qsa)(".active-pool");
    const event = new Event("click");
    //If you don´t have farms show live pools as default. If you just activate a pool show live pools as default.
    if (didJustActivate) (0, _document.qs)("#live-filter").dispatchEvent(event);
    else if (allYourFarmsPools.length > 0) (0, _document.qs)("#your-farms-filter").dispatchEvent(event);
    else if (allLivePools.length > 0) // console.log("Live")
    (0, _document.qs)("#live-filter").dispatchEvent(event);
    else // console.log("Ended")
    (0, _document.qs)("#ended-filter").dispatchEvent(event);
}
// Initialize contract & set global variables
async function initNearWebWalletConnection() {
    // Initialize connection to the NEAR network
    const near1 = await (0, _nearApiJs.connect)(Object.assign({
        deps: {
            keyStore: new (0, _nearApiJs.keyStores).BrowserLocalStorageKeyStore()
        }
    }, nearConfig));
    // Initializing Wallet based Account.
    nearWebWalletConnection = new (0, _nearApiJs.WalletConnection)(near1, null);
    nearConnectedWalletAccount = new (0, _nearApiJs.ConnectedWalletAccount)(nearWebWalletConnection, near1.connection, nearWebWalletConnection.getAccountId());
//console.log(nearConnectedWalletAccount)
}
function logoutNearWebWallet() {
    nearWebWalletConnection.signOut();
    wallet = (0, _disconnectedWallet.disconnectedWallet);
    // reload page
    window.location.replace(window.location.origin + window.location.pathname);
}
function loginNearWebWallet() {
    // Allow the current app to make calls to the specified contract on the user's behalf.
    // This works by creating a new access key for the user's account and storing
    // the private key in localStorage.
    //save what the user typed before navigating out
    // localStorage.setItem("amount", qsi("#stake-form-not-connected input.near").value)
    nearWebWalletConnection.requestSignIn(nearConfig.farms[0].contractName);
}
function loginNarwallets() {
    //login is initiated from the chrome-extension
    //show step-by-step instructions
    window.open("http://www.narwallets.com/help/connect-to-web-app");
}
function showOrHideMaxButton(walletBalance, elem) {
    if (walletBalance > 0) elem.classList.remove("hidden");
    else elem.classList.add("hidden");
}
function setDateInRangeVisualIndication(poolParams, newPool, isDateInRange) {
    let dateInRangeIndicator = newPool.querySelector(".date-in-range-indicator circle");
    if (isDateInRange) {
        dateInRangeIndicator.classList.remove("offDate");
        dateInRangeIndicator.classList.add("onDate");
    } else {
        dateInRangeIndicator.classList.remove("onDate");
        dateInRangeIndicator.classList.add("offDate");
    }
    let allUnclaimedRewardsTotalAmount = 0;
    let allUnclaimedRewardsDetails = newPool.querySelectorAll(".unclaimed-rewards-info-container .detail-row");
    allUnclaimedRewardsDetails.forEach((unclaimedRewardDetail)=>{
        let amountContainer = unclaimedRewardDetail.querySelector(".content");
        let amount = Number(amountContainer.innerHTML);
        allUnclaimedRewardsTotalAmount += amount;
    });
    let unclaimedRewards = newPool.querySelector(".unclaimed-rewards");
    let unclaimedRewardsValue = newPool.querySelector(".unclaimed-rewards-value-usd");
    if (allUnclaimedRewardsTotalAmount == 0) {
        unclaimedRewards.classList.remove("no-opacity");
        unclaimedRewardsValue.classList.remove("no-opacity");
        allUnclaimedRewardsDetails.forEach((unclaimedRewardDetail)=>{
            unclaimedRewardDetail.classList.remove("no-opacity");
        });
    } else {
        unclaimedRewards.classList.add("no-opacity");
        unclaimedRewardsValue.classList.add("no-opacity");
        allUnclaimedRewardsDetails.forEach((unclaimedRewardDetail)=>{
            unclaimedRewardDetail.classList.add("no-opacity");
        });
    }
}
async function refreshPoolInfoSingle(poolParams, newPool) {
    await poolParams.refreshAllExtraData();
    const contractParams = await poolParams.stakingContractData.getContractParams();
    const userPoolParams = await poolParams.stakingContractData.getUserStatus();
    await updateDetail(newPool, poolParams.stakeTokenContractList, [
        contractParams.total_staked
    ], "total-staked");
    // updateDetail(newPool, poolParams.farmTokenContractList, [poolParams.contractParams.total_farmed], "apr")
    await updateDetail(newPool, poolParams.farmTokenContractList, convertRewardsRates([
        contractParams.farming_rate.toString()
    ]), "rewards-per-day");
    await uptadeDetailIfNecesary(poolParams, newPool, [
        await poolParams.getFarmTokenContractData()
    ], [
        userPoolParams.real.toString()
    ], "unclaimed-rewards");
    const stakeBalances = await Promise.all(poolParams.stakeTokenContractList.map((stakeCD)=>stakeCD.getBalance()));
    // const stakeBalances = poolParams.stakeTokenContractList.map(stakeCD => stakeCD.getBalanceSync())
    await refreshInputAmounts(poolParams, newPool, "main-stake", stakeBalances);
    await refreshInputAmounts(poolParams, newPool, "main-unstake", [
        userPoolParams.staked.toString()
    ]);
    if (userPoolParams.staked == 0n) {
        newPool.classList.remove("your-farms");
        let doesPoolNeedDeposit = await needsStorageDeposit(poolParams.stakeTokenContract);
        const stakeTokenList = poolParams.stakeTokenContractList;
        for(let i = 0; i < stakeTokenList.length && !doesPoolNeedDeposit; i++){
            const tokenContract = stakeTokenList[i].contract;
            const doesTokenNeedStorageDeposit = await needsStorageDeposit(tokenContract);
            if (doesTokenNeedStorageDeposit) doesPoolNeedDeposit = true;
        }
        if (!doesPoolNeedDeposit && newPool.classList.contains("inactive-pool")) newPool.querySelector("#activate")?.classList.add("hidden");
        else newPool.querySelector("#activate")?.classList.remove("hidden");
    }
    const now = Date.now() / 1000;
    const isDateInRange = contractParams.farming_start < now && now < contractParams.farming_end;
    if (!isDateInRange) resetSinglePoolListener(poolParams, newPool, refreshPoolInfoSingle, -1);
    setDateInRangeVisualIndication(poolParams, newPool, isDateInRange);
}
async function refreshNFTOrMultiplePoolInfo(poolParams, newPool) {
    await poolParams.refreshAllExtraData();
    const contractParams = await poolParams.stakingContractData.getContractParams();
    const poolUserStatus = await poolParams.stakingContractData.getUserStatus();
    const stakeTokenContractList = await poolParams.stakingContractData.getStakeTokenContractList();
    const farmTokenContractList = await poolParams.stakingContractData.getFarmTokenContractList();
    if (poolParams instanceof (0, _poolParamsP3.PoolParamsP3)) await updateDetail(newPool, await stakeTokenContractList, contractParams.total_staked, "total-staked");
    else if (poolParams instanceof (0, _poolParamsNFT.PoolParamsNFT)) newPool.querySelector(".total-staked-value-usd").innerHTML = `${contractParams.total_staked} NFT's`;
    // updateDetail(newPool, poolParams.farmTokenContractList, poolParams.contractParams.total_farmed, "apr")
    const rewardsTokenDataArray = await poolParams.getRewardsTokenDetail();
    const rewardsPerDay = rewardsTokenDataArray.map((data)=>data.rewardsPerDayBN.toString());
    await updateDetail(newPool, farmTokenContractList, rewardsPerDay, "rewards-per-day");
    await updateDetail(newPool, farmTokenContractList, poolUserStatus.farmed_tokens, "unclaimed-rewards");
    const now = Date.now() / 1000;
    const isDateInRange = contractParams.farming_start < now && now < contractParams.farming_end;
    if (poolParams instanceof (0, _poolParamsP3.PoolParamsP3)) {
        const stakeBalances = await Promise.all(stakeTokenContractList.map((stakeCD)=>stakeCD.getBalance()));
        await refreshInputAmounts(poolParams, newPool, "main-stake", stakeBalances);
        // On PoolParamsP3 the poolUserStatus.stake_tokens is always a string[]
        await refreshInputAmounts(poolParams, newPool, "main-unstake", poolUserStatus.stake_tokens);
        if (!isDateInRange) resetMultiplePoolListener(poolParams, newPool, refreshNFTOrMultiplePoolInfo, -1);
    } else if (poolParams instanceof (0, _poolParamsNFT.PoolParamsNFT)) {
        if (!isDateInRange) resetNFTPoolListener(poolParams, newPool, refreshNFTOrMultiplePoolInfo, -1);
    }
    setBoostDisplay(poolParams, newPool);
    setDateInRangeVisualIndication(poolParams, newPool, isDateInRange);
}
async function refreshInputAmounts(poolParams, newPool, className, amounts) {
    const inputArray = newPool.querySelectorAll(`.${className} .token-input-container`);
    const stakeTokenContractList = await poolParams.stakingContractData.getStakeTokenContractList();
    for(let i = 0; i < inputArray.length; i++){
        const input = inputArray[i];
        const tokenContractData = stakeTokenContractList[i];
        const balance = amounts[i];
        const metadata = await tokenContractData.getMetadata();
        const balanceDisplayable = (0, _conversions.convertToDecimals)(balance, metadata.decimals, 5);
        input.querySelector(".value").innerHTML = balanceDisplayable;
        const maxButton = input.querySelector(".max-button");
        showOrHideMaxButton(Number(balanceDisplayable), maxButton);
    }
}
function convertRewardsRates(rates) {
    return rates.map((rate)=>(BigInt(rate) * 60n * 24n).toString());
}
async function updateDetail(newPool, contractList, totals, baseClass) {
    // CHECK 2
    const totalInUsd = await convertToUSDMultiple(contractList, totals);
    newPool.querySelector(`.${baseClass}-row .${baseClass}-value-usd`).innerHTML = `$ ${totalInUsd}`;
    const totalDetailsElements = newPool.querySelectorAll(`.${baseClass}-info-container .detail-row`);
    for(let i = 0; i < totalDetailsElements.length; i++){
        const row = totalDetailsElements[i];
        const tokenMetadata = await contractList[i].getMetadata();
        const content = (0, _conversions.convertToDecimals)(totals[i], tokenMetadata.decimals, 5);
        row.querySelector(".content").innerHTML = content;
    }
}
async function uptadeDetailIfNecesary(poolParams, newPool, contractList, totals, baseClass) {
    let doesPoolNeedDeposit = await needsStorageDeposit(poolParams.stakingContractData.contract);
    const stakeTokenList = poolParams.stakeTokenContractList;
    for(let i = 0; i < stakeTokenList.length && !doesPoolNeedDeposit; i++){
        const tokenContract = stakeTokenList[i].contract;
        const doesTokenNeedStorageDeposit = await needsStorageDeposit(tokenContract);
        if (doesTokenNeedStorageDeposit) doesPoolNeedDeposit = true;
    }
    if (!doesPoolNeedDeposit) await updateDetail(newPool, contractList, totals, baseClass);
}
async function refreshAccountInfoGeneric(poolList) {
    poolList.forEach((poolParams)=>{
    //refreshPoolInfo(poolParams)
    });
}
/// when the user chooses "connect to web-page" in the narwallets-chrome-extension
function narwalletConnected(ev) {
    wallet = (0, _narwallets.narwallets);
    loggedWithNarwallets = true;
    signedInFlow(wallet);
}
/// when the user chooses "disconnect from web-page" in the narwallets-chrome-extension
function narwalletDisconnected(ev) {
    loggedWithNarwallets = false;
    wallet = (0, _disconnectedWallet.disconnectedWallet);
    signedOutFlow();
}
function calculateAmountHaveStaked(stakeRates, amount, amountIndex, newAmountIndex) {
    const amountToStake = amount * stakeRates[newAmountIndex] / stakeRates[amountIndex];
    return amountToStake;
}
function calculateAmountToStake(stakeRates, totalStaked, amount, inputIndex, outputIndex) {
    const totalAmountStakedWithThisStake = totalStaked[inputIndex] + amount;
    const amountToStake = totalAmountStakedWithThisStake * stakeRates[inputIndex] / stakeRates[outputIndex] - totalStaked[outputIndex];
    return amountToStake > 0n ? amountToStake : 0n;
}
function calculateAmountToUnstake(stakeRates, totalStaked, amount, alreadySetIndex, newIndex) {
    const totalAmountStakedWithThisUnstake = totalStaked[alreadySetIndex] - amount;
    const output = totalStaked[newIndex] - totalAmountStakedWithThisUnstake * stakeRates[alreadySetIndex] / stakeRates[newIndex];
    return output > 0n ? output : 0n;
}
function autoFillStakeAmount(poolParams, pool, inputRoute, indexInputToken) {
    return async function(event) {
        event.preventDefault();
        const value1 = event.target.value;
        // const amountToStake = BigInt(value1)
        const stakeTokenContractList = await poolParams.stakingContractData.getStakeTokenContractList();
        const inputTokenMetadata = await stakeTokenContractList[indexInputToken].getMetadata();
        const amountToStakingOrUnstaking = BigInt((0, _conversions.convertToBase)(value1, inputTokenMetadata.decimals.toString()));
        const contractParams = await poolParams.stakingContractData.getContractParams();
        const poolUserStatus = await poolParams.stakingContractData.getUserStatus();
        let inputs = pool.querySelectorAll(`${inputRoute} input`);
        const stakeRates = contractParams.stake_rates.map((rate)=>BigInt(rate));
        const totalStakedByUser = poolUserStatus.stake_tokens.map((total)=>BigInt(total));
        for(let indexOutputToken = 0; indexOutputToken < inputs.length; indexOutputToken++)if (indexOutputToken != indexInputToken) {
            let amountToTransferSecondaryBN;
            if (inputRoute.includes("unstake")) amountToTransferSecondaryBN = calculateAmountToUnstake(stakeRates, totalStakedByUser, amountToStakingOrUnstaking, indexInputToken, indexOutputToken);
            else amountToTransferSecondaryBN = calculateAmountToStake(stakeRates, totalStakedByUser, amountToStakingOrUnstaking, indexInputToken, indexOutputToken);
            const currentStakeTokenMetadata = await stakeTokenContractList[indexOutputToken].getMetadata();
            const amountToStakeSecondary = (0, _conversions.convertToDecimals)(amountToTransferSecondaryBN, currentStakeTokenMetadata.decimals, 5);
            // const amountToStakeSecondary
            inputs.item(indexOutputToken).value = amountToStakeSecondary;
        }
    };
}
async function addPoolSingle(poolParams, newPool) {
    const contractParams = await poolParams.stakingContractData.getContractParams();
    const userStatus = await poolParams.stakingContractData.getUserStatus();
    const stakeTokenContractData = await poolParams.getStakeTokenContractData();
    const farmTokenContractData = await poolParams.getFarmTokenContractData();
    var metaData = await poolParams.stakeTokenContractList[0].getMetadata();
    let iconElem = newPool.querySelectorAll("#token-logo-container img");
    iconElem.forEach((icon)=>{
        icon.setAttribute("src", metaData.icon || "");
    });
    await addInput(newPool, stakeTokenContractData, "stake");
    await addInput(newPool, stakeTokenContractData, "unstake", userStatus.staked.toString());
    await addHeader(poolParams, newPool);
    let unclaimedRewards = await getUnclaimedRewardsInUSDSingle(poolParams);
    const now = Date.now() / 1000;
    const isDateInRange = now < contractParams.farming_end;
    if (Number(unclaimedRewards.toFixed(7)) != 0) newPool.querySelector(".unclaimed-rewards-value-usd").innerHTML = `$ ${unclaimedRewards.toFixed(7).toString()}`;
    else if (Number(unclaimedRewards.toFixed(7)) != 0 && isDateInRange) newPool.querySelector(".unclaimed-rewards-value-usd").innerHTML = `$ 0`;
    else newPool.querySelector(".unclaimed-rewards-value-usd").innerHTML = `$ -`;
    const totalStakedInUsd = await convertToUSDMultiple([
        stakeTokenContractData
    ], [
        contractParams.total_staked
    ]);
    const rewardsPerDayInUsd = await convertToUSDMultiple([
        farmTokenContractData
    ], [
        (BigInt(contractParams.farming_rate) * 60n * 24n).toString()
    ]);
    newPool.querySelector(".total-staked-value-usd").innerHTML = `$ ${totalStakedInUsd}`;
    newPool.querySelector(".rewards-per-day-value-usd").innerHTML = `$ ${rewardsPerDayInUsd}`;
    const apr = calculateAPR(totalStakedInUsd, rewardsPerDayInUsd, isDateInRange);
    newPool.querySelector(".apr-value").innerHTML = `${apr}%`;
    addSinglePoolListeners(poolParams, newPool);
}
function calculateAPR(totalStakedInUsd, rewardsPerDayInUsd, isDateInRange) {
    if (!isDateInRange) return "-";
    else return (365 * Number(rewardsPerDayInUsd) / Number(totalStakedInUsd) * 100).toFixed(2);
}
async function addTokenFarmLogos(poolParams, header) {
    let tokenContractDataArray;
    if (poolParams instanceof (0, _poolParams.PoolParams)) tokenContractDataArray = poolParams.stakeTokenContractList;
    else tokenContractDataArray = await poolParams.stakingContractData.getStakeTokenContractList();
    // tokenContractDataArray: TokenContractData[] = poolParams.stakingContractData
    const logoContainer = header.querySelector(".token-logo-container");
    logoContainer.innerHTML = "";
    let i = 0;
    for(; i < tokenContractDataArray.length; i++){
        const tokenIconData = tokenContractDataArray[i];
        let metaData;
        metaData = await tokenIconData.getMetadata();
        addLogo(metaData, logoContainer, i);
    }
    logoContainer.classList.add(`have-${tokenContractDataArray.length}-elements`);
}
async function addNFTFarmLogo(poolParams, header) {
    // NFTContractData: TokenContractData[] = poolParams.stakingContractData
    const logoContainer = header.querySelector(".token-logo-container");
    logoContainer.innerHTML = "";
    const tokenLogoElement = (0, _document.qs)(".generic-token-logo-img");
    let newTokenLogoElement = tokenLogoElement.cloneNode(true);
    // For the time being there is only one token
    // const baseUrl = poolParams.stakingContractData.nftBaseUrl[0]
    const stakeNFTContractList = await poolParams.stakingContractData.getStakeNFTContractList();
    const metadata = await stakeNFTContractList[0].getMetadata();
    let imgUrl = metadata.icon;
    if (!imgUrl) imgUrl = poolParams.config.logo;
    newTokenLogoElement?.setAttribute("src", imgUrl);
    newTokenLogoElement?.setAttribute("alt", metadata.name);
    toggleGenericClass(newTokenLogoElement);
    newTokenLogoElement.classList.add(`farmed-token-logo`);
    logoContainer.append(newTokenLogoElement);
    logoContainer.classList.add(`have-1-elements`);
}
async function addAllLogos(poolParams, header) {
    if (poolParams instanceof (0, _poolParams.PoolParams) || poolParams instanceof (0, _poolParamsP3.PoolParamsP3)) addTokenFarmLogos(poolParams, header);
    else if (poolParams instanceof (0, _poolParamsNFT.PoolParamsNFT)) addNFTFarmLogo(poolParams, header);
}
async function addHeader(poolParams, newPool) {
    const genericHeader = (0, _document.qs)(".generic-new-pool-header");
    const newHeader = genericHeader.cloneNode(true);
    await addAllLogos(poolParams, newHeader);
    const poolContainer = newPool.querySelector("#pool-container");
    const tokenPoolStatsContainer = newPool.querySelector("#token-pool-stats");
    poolContainer.prepend(newHeader);
    toggleGenericClass(newHeader);
    const newTokenPoolStats = newHeader.cloneNode(true);
    tokenPoolStatsContainer.prepend(newTokenPoolStats);
}
async function addMultiplePoolListeners(poolParams, newPool) {
    addAllCommonListeners(poolParams, newPool);
    let tokenSymbols = [];
    const stakeTokenContractList = await poolParams.stakingContractData.getStakeTokenContractList();
    for(let i = 0; i < stakeTokenContractList.length; i++){
        const contractData = stakeTokenContractList[i];
        const currentStakeTokenMetadata = await contractData.getMetadata();
        tokenSymbols.push(`${currentStakeTokenMetadata.symbolForHtml.toLowerCase()}`);
    }
    newPool.querySelector(".confetti-button")?.addEventListener("click", harvestMultipleOrNFT(poolParams, newPool));
    for(let i1 = 0; i1 < tokenSymbols.length; i1++){
        newPool.querySelector(`.main-stake .${tokenSymbols[i1]}-input input`).addEventListener("input", autoFillStakeAmount(poolParams, newPool, `.main-stake`, i1));
        newPool.querySelector(`.main-unstake .${tokenSymbols[i1]}-input input`).addEventListener("input", autoFillStakeAmount(poolParams, newPool, `.main-unstake`, i1));
    }
    // Stake/unstake buttons
    newPool.querySelector("#stake-button")?.addEventListener("click", stakeMultiple(poolParams, newPool));
    newPool.querySelector("#unstake-button")?.addEventListener("click", unstakeMultiple(poolParams, newPool));
    setAllInputMaxButtonListeners(newPool);
    // Refresh every 5 seconds if it's live
    const now = Date.now() / 1000;
    const contractParams = await poolParams.stakingContractData.getContractParams();
    const isDateInRange = contractParams.farming_start < now && now < contractParams.farming_end;
    let refreshIntervalId = -1;
    if (isDateInRange) refreshIntervalId = window.setInterval(refreshNFTOrMultiplePoolInfo.bind(null, poolParams, newPool), refreshTime);
    //Info to transfer so we can check what pool is loading the NFTs
    let boostButton = newPool.querySelector(".boost-button");
    let boostButtonId = boostButton.id;
    boostButton.addEventListener("click", showNFTGrid(poolParams, boostButtonId));
    // Hover events
    standardHoverToDisplayExtraInfo(newPool, "total-staked");
    // standardHoverToDisplayExtraInfo(newPool, "apr")
    standardHoverToDisplayExtraInfo(newPool, "rewards-per-day");
    standardHoverToDisplayExtraInfo(newPool, "reward-tokens");
    standardHoverToDisplayExtraInfo(newPool, "unclaimed-rewards");
}
async function addNFTPoolListeners(poolParams, newPool) {
    addAllCommonListeners(poolParams, newPool);
    let tokenSymbols = [];
    const stakeTokenContractList = await poolParams.stakingContractData.getStakeTokenContractList();
    for(let i = 0; i < stakeTokenContractList.length; i++){
        const contractData = stakeTokenContractList[i];
        const currentStakeTokenMetadata = await contractData.getMetadata();
        tokenSymbols.push(`${currentStakeTokenMetadata.symbolForHtml.toLowerCase()}`);
    }
    newPool.querySelector(".confetti-button")?.addEventListener("click", harvestMultipleOrNFT(poolParams, newPool));
    let stakeUnstakeNftButton = newPool.querySelector("#stake-unstake-nft");
    let stakeUnstakeNftButtonId = stakeUnstakeNftButton.id;
    stakeUnstakeNftButton.addEventListener("click", async function() {
        stakeUnstakeNftButton.disabled = true;
        stakeUnstakeNftButton.innerHTML = "Loading...";
        await showStakeUnstakeNFTGrid(poolParams, stakeUnstakeNftButtonId);
        stakeUnstakeNftButton.disabled = false;
        stakeUnstakeNftButton.innerHTML = "STAKE/UNSTAKE";
    });
    // Refresh every 60 seconds if it's live
    const now = Date.now() / 1000;
    const contractParams = await poolParams.stakingContractData.getContractParams();
    const isDateInRange = contractParams.farming_start < now && now < contractParams.farming_end;
    let refreshIntervalId = -1;
    if (isDateInRange) refreshIntervalId = window.setInterval(refreshNFTOrMultiplePoolInfo.bind(null, poolParams, newPool), refreshTime);
    //Info to transfer so we can check what pool is loading the NFTs
    let boostButton = newPool.querySelector(".boost-button");
    let boostButtonId = boostButton.id;
    boostButton.addEventListener("click", showNFTGrid(poolParams, boostButtonId));
    // Hover events
    standardHoverToDisplayExtraInfo(newPool, "total-staked");
    // standardHoverToDisplayExtraInfo(newPool, "apr")
    standardHoverToDisplayExtraInfo(newPool, "rewards-per-day");
    standardHoverToDisplayExtraInfo(newPool, "reward-tokens");
    standardHoverToDisplayExtraInfo(newPool, "unclaimed-rewards");
}
function addPoolTokensDescription(newPool, poolParams) {
    const legendContainer = newPool.querySelector(".pool-legend");
    let poolLegends = poolParams.poolDescription;
    if (poolLegends != undefined) for(let i = 0; i < poolLegends.length; i++){
        const descriptionLinks = poolParams.descriptionLink;
        if (descriptionLinks != undefined) poolLegends[i] += `<a href="${descriptionLinks[i]}" target="_blank"> here.</a></br>`;
        legendContainer.innerHTML += poolLegends[i];
        legendContainer.classList.remove("hidden");
    }
}
async function addNFTPool(poolParams, newPool) {
    const farmTokenContractList = await poolParams.stakingContractData.getFarmTokenContractList();
    let contractParams = await poolParams.stakingContractData.getContractParams();
    await addHeader(poolParams, newPool);
    const rewardsTokenDataArray = await poolParams.getRewardsTokenDetail();
    const rewardsPerDay = rewardsTokenDataArray.map((data)=>data.rewardsPerDayBN.toString());
    const rewardsPerDayInUsd = await convertToUSDMultiple(farmTokenContractList, rewardsPerDay);
    newPool.querySelector(".rewards-per-day-value-usd").innerHTML = `$ ${rewardsPerDayInUsd}`;
    if (!poolParams.config.noBoost) newPool.querySelector(".boost-button").classList.remove("hidden");
    else {
        newPool.querySelector(".equal-width-than-boost-button").classList.add("hidden");
        let harvestSection = newPool.querySelector(".harvest-section");
        harvestSection.style.justifyContent = "center";
    }
    newPool.querySelector(".structural-in-simple-pools").classList.add("hidden");
    //TODO DANI check apr and staked value
    // let farmTokenContractList = await poolParams.stakingContractData.getFarmTokenContractList()
    const now = Date.now() / 1000;
    const isDateInRange = now < contractParams.farming_end;
    let farmTokenRateInUSD = await convertToUSDMultiple(farmTokenContractList, contractParams.farm_token_rates);
    let NFTDepositedx100 = Number(contractParams.total_staked[0]) * 100;
    // const apr =  rewards. emission_rate * minutes * hours * 365 / <number of NFT's deposited> * 100
    let apr = calculateAPR(farmTokenRateInUSD, NFTDepositedx100.toString(), isDateInRange);
    newPool.querySelector(".apr-value").innerHTML = `${apr}%`;
    setBoostDisplay(poolParams, newPool);
    addNFTPoolListeners(poolParams, newPool);
    refreshNFTOrMultiplePoolInfo(poolParams, newPool);
}
async function addPoolMultiple(poolParams, newPool) {
    const contractParams = await poolParams.stakingContractData.getContractParams();
    const poolUserStatus = await poolParams.stakingContractData.getUserStatus();
    const stakeTokenContractList = await poolParams.stakingContractData.getStakeTokenContractList();
    const farmTokenContractList = await poolParams.stakingContractData.getFarmTokenContractList();
    await addHeader(poolParams, newPool);
    let tokenSymbols = [];
    await poolParams.getWalletAvailable();
    for(let i = 0; i < stakeTokenContractList.length; i++){
        const contractData = stakeTokenContractList[i];
        const metaData = await contractData.getMetadata();
        await addInput(newPool, contractData, "stake");
        await addInput(newPool, contractData, "unstake", poolUserStatus.stake_tokens[i]);
        tokenSymbols.push(`${metaData.symbolForHtml.toLowerCase()}`);
    }
    //Show boost button patch (since simple pools will disapear and they have problems with the boost button)
    newPool.querySelector(".boost-button").classList.remove("hidden");
    newPool.querySelector(".structural-in-simple-pools").classList.add("hidden");
    const unclaimedRewards = Number(await convertToUSDMultiple(farmTokenContractList, poolUserStatus.farmed_tokens));
    // const unclaimedRewards = Number(await convertToUSDMultiple(poolParams.farmTokenContractList, poolParams.resultParams.farmed))
    const now = Date.now() / 1000;
    const isDateInRange = now < contractParams.farming_end;
    if (Number(unclaimedRewards.toFixed(7)) != 0) newPool.querySelector(".unclaimed-rewards-value-usd").innerHTML = `$ ${unclaimedRewards.toFixed(7).toString()}`;
    else if (Number(unclaimedRewards.toFixed(7)) != 0 && isDateInRange) newPool.querySelector(".unclaimed-rewards-value-usd").innerHTML = `$ 0`;
    else newPool.querySelector(".unclaimed-rewards-value-usd").innerHTML = `$ -`;
    const totalStakedInUsd = await convertToUSDMultiple(stakeTokenContractList, contractParams.total_staked);
    // CHECK!
    const legendContainer = newPool.querySelector(".pool-legend");
    let poolLegends = poolParams.poolDescription;
    if (poolLegends != undefined) for(let i2 = 0; i2 < poolLegends.length; i2++){
        const descriptionLinks = poolParams.descriptionLink;
        if (descriptionLinks != undefined) poolLegends[i2] += `<a href="${descriptionLinks[i2]}" target="_blank"> here.</a>`;
        legendContainer.innerHTML += poolLegends[i2] + "</br>";
        legendContainer.classList.remove("hidden");
    }
    const rewardsTokenDataArray = await poolParams.getRewardsTokenDetail();
    const rewardsPerDay = rewardsTokenDataArray.map((data)=>data.rewardsPerDayBN.toString());
    const rewardsPerDayInUsd = await convertToUSDMultiple(farmTokenContractList, rewardsPerDay);
    newPool.querySelector(".total-staked-row .total-staked-value-usd").innerHTML = `$ ${totalStakedInUsd}`;
    // newPool.querySelector(".apr-row .apr-value")!.innerHTML = `$ ${totalFarmedInUsd}`
    newPool.querySelector(".rewards-per-day-value-usd").innerHTML = `$ ${rewardsPerDayInUsd}`;
    const apr = calculateAPR(totalStakedInUsd, rewardsPerDayInUsd, isDateInRange);
    newPool.querySelector(".apr-value").innerHTML = `${apr}%`;
    setBoostDisplay(poolParams, newPool);
    addMultiplePoolListeners(poolParams, newPool);
}
async function setBoostDisplay(poolParams, newPool) {
    const poolUserStatus = await poolParams.stakingContractData.getUserStatus();
    let hasNFTStaked;
    if ("boost_nfts" in poolUserStatus) hasNFTStaked = poolUserStatus.boost_nfts != "";
    else hasNFTStaked = poolUserStatus.cheddy_nft != "";
    // hasNFTStaked = poolUserStatus.cheddy_nft != ''
    if (hasNFTStaked) {
        newPool.querySelector(".boost-button svg").setAttribute("class", "full");
        newPool.querySelector(".boost-button span").innerHTML = "BOOSTED";
    } else {
        newPool.querySelector(".boost-button svg").setAttribute("class", "empty");
        newPool.querySelector(".boost-button span").innerHTML = "BOOST";
    }
}
function addFocusClass(input) {
    return function(event) {
        event?.preventDefault;
        input.classList.toggle("focused");
    };
}
async function addInput(newPool, contractData, action, stakedAmount) {
    let inputContainer = (0, _document.qs)(".generic-token-input-container");
    var newInputContainer = inputContainer.cloneNode(true);
    let inputRowContainer = newInputContainer.querySelector(".input-container");
    let infoRowContainer = newInputContainer.querySelector(".available-info");
    let input = newInputContainer.querySelector("input");
    const metaData = await contractData.getMetadata();
    newInputContainer.classList.remove("generic-token-input-container");
    newInputContainer.classList.add("token-input-container");
    newInputContainer.classList.add(`${metaData.symbolForHtml.toLowerCase()}-input`);
    newInputContainer.classList.remove(`hidden`);
    newInputContainer.querySelector(".available-info span").innerHTML = `Available to ${action}`;
    newInputContainer.querySelector(".amount-available")?.classList.add(action);
    input.addEventListener("focus", addFocusClass(inputRowContainer));
    input.addEventListener("blur", addFocusClass(inputRowContainer));
    let inputLogoContainer = newInputContainer.querySelector(".input-container .token-logo");
    let amountAvailableValue = newInputContainer.querySelector(".amount-available .value");
    let maxButton = infoRowContainer.querySelector(".max-button");
    if (metaData.icon != null) {
        if (metaData.icon.startsWith("data:image")) {
            let tokenLogoElement = newInputContainer.querySelector("img.token-logo");
            tokenLogoElement?.setAttribute("src", metaData.icon);
            inputLogoContainer?.classList.remove("hidden");
        } else if (metaData.icon.startsWith("<svg")) {
            let tokenLogoElement = newInputContainer.querySelector("div.token-logo-svg-container");
            tokenLogoElement.innerHTML = metaData.icon;
            tokenLogoElement.classList.remove("hidden");
        }
    } else {
        inputLogoContainer.innerHTML = `${metaData.name}`;
        inputLogoContainer?.classList.remove("hidden");
    }
    const balance = await contractData.getBalance();
    if (action == "stake") amountAvailableValue.innerHTML = (0, _conversions.convertToDecimals)(balance, metaData.decimals, 5);
    else if (action == "unstake") amountAvailableValue.innerHTML = (0, _conversions.convertToDecimals)(stakedAmount, metaData.decimals, 5);
    const balanceDisplayable = (0, _conversions.convertToDecimals)(balance, metaData.decimals, 5);
    showOrHideMaxButton(Number(balanceDisplayable), maxButton);
    newPool.querySelector(`.main-${action}`).append(newInputContainer);
}
async function toggleExpandStakeUnstakeSection(newPool, elemWithListener) {
    let expandPoolButton = newPool.querySelector(".expand-button");
    // let hidePoolButton = newPool.querySelector(".hide-button")! as HTMLElement;
    let stakingUnstakingContainer = newPool.querySelector("#activated");
    elemWithListener.addEventListener("click", flipElement(expandPoolButton));
    elemWithListener.addEventListener("click", toggleActions(stakingUnstakingContainer));
}
function standardHoverToDisplayExtraInfo(newPool, className) {
    const elementWithListenner = newPool.querySelector(`.${className}-value-usd`);
    const elementShown = newPool.querySelector(`.${className}-info-container`);
    elementWithListenner.addEventListener("mouseover", toggleElement(elementShown));
    elementWithListenner.addEventListener("mouseout", toggleElement(elementShown));
    elementShown.addEventListener("mouseover", showElement(elementShown));
    elementShown.addEventListener("mouseout", hideElement(elementShown));
}
function hideAllDynamicElements(newPool) {
    newPool.querySelectorAll(".dynamic-display-element").forEach((elem)=>{
        elem.classList.add("hidden");
    });
}
async function addAllCommonListeners(poolParams, newPool) {
    let infoIcon = newPool.querySelector(".new-pool-header .information-icon-container");
    let poolStats = newPool.querySelector("#token-pool-stats");
    infoIcon.addEventListener("mouseover", showElement(poolStats));
    poolStats.addEventListener("mouseover", showElement(poolStats));
    poolStats.addEventListener("mouseout", hideElement(poolStats));
    // let harvestButton = newPool.querySelector(".confetti-button") as HTMLButtonElement
    // //You can check how to configure it in https://party.js.org/
    // let confettiConfiguration = {
    //   count: party.variation.range(25,30),
    //   spread: party.variation.range(20,25)
    // }
    // harvestButton.addEventListener("click", function () {
    //   party.confetti(harvestButton, confettiConfiguration);
    // });
    let doesNeedStorageDeposit;
    if (poolParams instanceof (0, _poolParams.PoolParams)) doesNeedStorageDeposit = false;
    else doesNeedStorageDeposit = await needsStorageDeposit(poolParams.stakingContractData.contract);
    // Displays staking/unstaking when hovering on the pool(only in Live and Your Farms)
    if (!(poolParams instanceof (0, _poolParamsNFT.PoolParamsNFT)) && !doesNeedStorageDeposit && !newPool.classList.contains("inactive-pool")) {
        let vanishingIndicator = newPool.querySelector("#vanishing-indicator");
        vanishingIndicator?.classList.remove("transparent");
        vanishingIndicator?.classList.add("visual-tool-expanding-indication-hidden");
        newPool.addEventListener("mouseover", paintOrUnPaintElement("visual-tool-expanding-indication-hidden", vanishingIndicator));
        newPool.addEventListener("mouseout", paintOrUnPaintElement("visual-tool-expanding-indication-hidden", vanishingIndicator));
        let expandButtonStakingUnstaking = newPool.querySelector(".expand-button");
        newPool.addEventListener("mouseover", makeBlinkElement(expandButtonStakingUnstaking));
        newPool.addEventListener("mouseout", makeBlinkElement(expandButtonStakingUnstaking));
    }
}
async function addSinglePoolListeners(poolParams, newPool) {
    addAllCommonListeners(poolParams, newPool);
    // Harvest button listener
    const contractData = await poolParams.getStakeTokenContractData();
    const metaData = await contractData.getMetadata();
    newPool.querySelector(".confetti-button")?.addEventListener("click", harvestSingle(poolParams, newPool));
    // Token symbols is done this way to emulate multiple case. Single case will be removed shortly
    let tokenSymbols = [];
    tokenSymbols.push(`${metaData.symbol.toLowerCase()}`);
    newPool.querySelector(".confetti-button")?.addEventListener("click", harvestSingle(poolParams, newPool));
    // Stake/unstake buttons
    newPool.querySelector("#stake-button")?.addEventListener("click", stakeSingle(poolParams, newPool));
    newPool.querySelector("#unstake-button")?.addEventListener("click", unstakeSingle(poolParams, newPool));
    setAllInputMaxButtonListeners(newPool);
    // Refresh every 5 seconds if it's live
    const now = Date.now() / 1000;
    const contractParams = await poolParams.stakingContractData.getContractParams();
    const isDateInRange = contractParams.farming_start < now && now < contractParams.farming_end;
    let refreshIntervalId = -1;
    if (isDateInRange) refreshIntervalId = window.setInterval(refreshPoolInfoSingle.bind(null, poolParams, newPool), refreshTime);
    // Hover events
    standardHoverToDisplayExtraInfo(newPool, "total-staked");
    // standardHoverToDisplayExtraInfo(newPool, "apr")
    standardHoverToDisplayExtraInfo(newPool, "rewards-per-day");
    standardHoverToDisplayExtraInfo(newPool, "reward-tokens");
    standardHoverToDisplayExtraInfo(newPool, "unclaimed-rewards");
}
async function resetSinglePoolListener(poolParams, pool, refreshFunction, refreshIntervalId) {
    const contractParams = await poolParams.stakingContractData.getContractParams();
    let newPool = pool.cloneNode(true);
    hideAllDynamicElements(newPool);
    addFilterClasses(poolParams, newPool);
    addSinglePoolListeners(poolParams, newPool);
    if (newPool.classList.contains("inactive-pool")) displayInactiveP2P3Pool(newPool);
    else displayActivePool(poolParams, newPool);
    if (refreshIntervalId != -1) {
        clearInterval(refreshIntervalId);
        const now = Date.now() / 1000;
        const isDateInRange = contractParams.farming_start < now && now < contractParams.farming_end;
        refreshIntervalId = -1;
        if (isDateInRange) refreshIntervalId = window.setInterval(refreshFunction.bind(null, poolParams, newPool), 5000);
    }
    pool.replaceWith(newPool);
    const event = new Event("click");
    (0, _document.qs)(".activeFilterButton").dispatchEvent(event);
}
async function resetMultiplePoolListener(poolParams, pool, refreshFunction, refreshIntervalId) {
    let newPool = pool.cloneNode(true);
    hideAllDynamicElements(newPool);
    addFilterClasses(poolParams, newPool);
    addMultiplePoolListeners(poolParams, newPool);
    if (newPool.classList.contains("inactive-pool")) displayInactiveP2P3Pool(newPool);
    else displayActivePool(poolParams, newPool);
    if (refreshIntervalId != -1) {
        clearInterval(refreshIntervalId);
        const now = Date.now() / 1000;
        const contractParams = await poolParams.stakingContractData.getContractParams();
        const isDateInRange = contractParams.farming_start < now && now < contractParams.farming_end;
        refreshIntervalId = -1;
        if (isDateInRange) refreshIntervalId = window.setInterval(refreshFunction.bind(null, poolParams, newPool), 5000);
    }
    pool.replaceWith(newPool);
    const event = new Event("click");
    (0, _document.qs)(".activeFilterButton").dispatchEvent(event);
}
async function resetNFTPoolListener(poolParams, pool, refreshFunction, refreshIntervalId) {
    let newPool = pool.cloneNode(true);
    hideAllDynamicElements(newPool);
    addFilterClasses(poolParams, newPool);
    addNFTPoolListeners(poolParams, newPool);
    // For some reason, newPool.classList.contains("inactive-pool") returns false when it has that class from time to time
    // So we're putting just pool. This should make the refresh to be bad on a first scenario, but good on a second one.
    if (pool.classList.contains("inactive-pool")) displayInactiveNFTPool(newPool, pool);
    else displayActivePool(poolParams, newPool);
    if (refreshIntervalId != -1) {
        clearInterval(refreshIntervalId);
        const now = Date.now() / 1000;
        const contractParams = await poolParams.stakingContractData.getContractParams();
        const isDateInRange = contractParams.farming_start < now && now < contractParams.farming_end;
        refreshIntervalId = -1;
        if (isDateInRange) refreshIntervalId = window.setInterval(refreshFunction.bind(null, poolParams, newPool), 5000);
    }
    pool.replaceWith(newPool);
// const event = new Event('click')
// qs(".activeFilterButton").dispatchEvent(event)
}
async function addFilterClasses(poolParams, newPool) {
    // Cleaning classes in case of reset
    const classes = [
        "your-farms",
        "active-pool",
        "inactive-pool"
    ];
    classes.forEach((className)=>newPool.classList.remove(className));
    const now = Date.now() / 1000;
    const contractParams = await poolParams.stakingContractData.getContractParams();
    // const isDateInRange = poolParams.contractParams.farming_start < now && now < poolParams.contractParams.farming_end
    const isDateInRange = now < contractParams.farming_end;
    // const poolUserStatus: PoolUserStatus|[string, string, string] = await poolParams.stakingContractData.getUserStatus()
    if (await poolParams.userHasStakedTokens()) newPool.classList.add("your-farms");
    if (isDateInRange) newPool.classList.add("active-pool");
    else newPool.classList.add("inactive-pool");
}
async function addPool(poolParams) {
    var genericPoolElement = (0, _document.qs)("#generic-pool-container");
    let singlePoolParams;
    let multiplePoolParams;
    var newPool = genericPoolElement.cloneNode(true);
    newPool.setAttribute("id", poolParams.html.id.toLowerCase().replace(" ", "_"));
    newPool.classList.remove("hidden");
    newPool.classList.add("pool-container");
    addFilterClasses(poolParams, newPool);
    await addRewardTokenIcons(poolParams, newPool);
    await addTotalStakedDetail(poolParams, newPool);
    await addRewardsPerDayDetail(poolParams, newPool);
    await addRewardsTokenDetail(poolParams, newPool);
    await addUnclaimedRewardsDetail(poolParams, newPool);
    if (poolParams instanceof (0, _poolParams.PoolParams) && poolParams.type == "single") {
        singlePoolParams = poolParams;
        await addPoolSingle(singlePoolParams, newPool);
    } else if (poolParams instanceof (0, _poolParamsP3.PoolParamsP3) && poolParams.type == "multiple") {
        multiplePoolParams = poolParams;
        await addPoolMultiple(multiplePoolParams, newPool);
    } else if (poolParams instanceof (0, _poolParamsNFT.PoolParamsNFT) && poolParams.type == "nft") await addNFTPool(poolParams, newPool);
    addPoolTokensDescription(newPool, poolParams);
    // New code
    let showContractStart = newPool.querySelector("#contract-start");
    let showContractEnd = newPool.querySelector("#contract-end");
    const contractParams = await poolParams.stakingContractData.getContractParams();
    const accountRegistered = contractParams.accounts_registered;
    newPool.querySelector(".accounts-registered-value-usd").innerHTML = `${accountRegistered} accounts`;
    showContractStart.innerHTML = new Date(contractParams.farming_start * 1000).toLocaleString();
    showContractEnd.innerHTML = new Date(contractParams.farming_end * 1000).toLocaleString();
    const poolName = await poolParams.getPoolName();
    newPool.querySelectorAll(".token-name").forEach((element)=>{
        element.innerHTML = poolName;
    });
    if (newPool.classList.contains("inactive-pool")) displayInactiveP2P3Pool(newPool);
    else await displayActivePool(poolParams, newPool);
    // await addTotalFarmedDetail(poolParams, newPool)
    let unixTimestamp = new Date().getTime() / 1000;
    // const isDateInRange = contractParams.farming_start < unixTimestamp && unixTimestamp < contractParams.farming_end
    const isDateInRange = unixTimestamp < contractParams.farming_end;
    setDateInRangeVisualIndication(poolParams, newPool, isDateInRange);
    (0, _document.qs)("#pool_list").append(newPool);
    newPool.querySelector(".deposit-fee-value").innerHTML = contractParams.fee_rate ? contractParams.fee_rate / 100 + "%" : "0%";
    poolParams.confettiButton = new (0, _newConfettiButton.ConfettiButton)(newPool);
    poolParams.confettiButton.render(poolParams.confettiButton.confettiButton, poolParams.confettiButton.canvas, poolParams.confettiButton.confetti, poolParams.confettiButton.sequins);
    let harvestedSuccesfully = sessionStorage.getItem("cheddarFarmHarvestedSuccesfully");
    if (harvestedSuccesfully != null) {
        let isUserFarming = newPool.classList.contains("your-farms");
        // console.log("isUserFarming", isUserFarming)
        isUserFarming && showSuccessOnHarvestAnimation(newPool, poolParams);
    }
}
function showSuccessOnHarvestAnimation(newPool, poolParams) {
    let poolID = newPool.id;
    let harvestedPoolID = sessionStorage.getItem("cheddarFarmJustHarvested");
    // console.log("poolID", poolID)
    // console.log("harvestedPoolID", harvestedPoolID)
    if (poolID == harvestedPoolID) {
        while(document.readyState != "complete")setTimeout(()=>{}, 1000);
        poolParams.confettiButton?.successAnimation();
        sessionStorage.removeItem("cheddarFarmJustHarvested");
        sessionStorage.removeItem("cheddarFarmHarvestedSuccesfully");
    }
}
function displayInactiveP2P3Pool(newPool) {
    const isUserFarming = newPool.classList.contains("your-farms");
    if (isUserFarming) {
        toggleStakeUnstakeSection(newPool);
        setUnstakeTabListeners(newPool);
        newPool.querySelector(".harvest-section").classList.remove("hidden");
        newPool.querySelector("#staking-unstaking-container .staking").setAttribute("disabled", "disabled");
        const event = new Event("click");
        newPool.querySelector("#staking-unstaking-container .unstaking").dispatchEvent(event);
    }
}
function displayInactiveNFTPool(newPool, pool) {
    const isUserFarming = pool.classList.contains(`your-farms`);
    if (isUserFarming) {
        newPool.querySelector("#stake-unstake-nft").classList.remove("hidden");
        newPool.querySelector(".harvest-section").classList.remove("hidden");
    }
}
function toggleStakeUnstakeSection(newPool) {
    let expandPoolButton = newPool.querySelector(".expand-button");
    let poolContainer = newPool.querySelector("#pool-container");
    expandPoolButton.classList.remove("hidden");
    toggleExpandStakeUnstakeSection(newPool, poolContainer);
    toggleExpandStakeUnstakeSection(newPool, expandPoolButton);
}
function setUnstakeTabListeners(newPool) {
    let stakeTabButton = newPool.querySelector(".staking");
    let unstakeTabButton = newPool.querySelector(".unstaking");
    let staking = newPool.querySelector(".main-stake");
    let unstaking = newPool.querySelector(".main-unstake");
    let stakeButton = newPool.querySelector("#stake-button");
    let unstakeButton = newPool.querySelector("#unstake-button");
    unstakeTabButton.addEventListener("click", showElementHideAnother(unstaking, staking));
    unstakeTabButton.addEventListener("click", showElementHideAnother(unstakeButton, stakeButton));
    unstakeTabButton.addEventListener("click", setActiveColor);
    unstakeTabButton.addEventListener("click", cancelActiveColor(stakeTabButton));
}
function displayIfNftPool(newPool, isAccountRegistered, hasUserStaked) {
    if (isAccountRegistered) {
        // if the pool has ended and user doesn't has any NFT staked don't show the stake/unstake btn
        if (newPool.classList.contains("inactive-pool") && !hasUserStaked) return;
        let stakeUnstakeNftButton = newPool.querySelector("#stake-unstake-nft");
        stakeUnstakeNftButton.classList.remove("hidden");
    }
}
function displayIfTokenPool(newPool, isAccountRegistered) {
    if (isAccountRegistered) {
        toggleStakeUnstakeSection(newPool);
        let stakeTabButton = newPool.querySelector(".staking");
        let unstakeTabButton = newPool.querySelector(".unstaking");
        let staking = newPool.querySelector(".main-stake");
        let unstaking = newPool.querySelector(".main-unstake");
        let stakeButton = newPool.querySelector("#stake-button");
        let unstakeButton = newPool.querySelector("#unstake-button");
        setUnstakeTabListeners(newPool);
        stakeTabButton.addEventListener("click", showElementHideAnother(staking, unstaking));
        stakeTabButton.addEventListener("click", showElementHideAnother(stakeButton, unstakeButton));
        stakeTabButton.addEventListener("click", setActiveColor);
        stakeTabButton.addEventListener("click", cancelActiveColor(unstakeTabButton));
    }
}
async function displayActivePool(poolParams, newPool) {
    let activateButtonContainer = newPool.querySelector("#activate");
    let activateButton = newPool.querySelector(".activate");
    let harvestSection = newPool.querySelector(".harvest-section");
    if (wallet != (0, _disconnectedWallet.disconnectedWallet)) {
        let isAccountRegistered = await poolParams.stakingContractData.contract.storageBalance() != null;
        if (!isAccountRegistered) {
            activateButtonContainer.classList.remove("hidden");
            activateButton.addEventListener("click", activateClicked(poolParams, newPool));
            if (poolParams.html.formId == "nearcon" || poolParams.html.formId == "cheddar") {
                let warningText = "ONLY ACTIVATE IF PREVIOUSLY STAKED<br>0.06 NEAR storage deposit, gets refunded.";
                newPool.querySelector("#depositWarning").innerHTML = warningText;
            }
        }
        if (poolParams instanceof (0, _poolParams.PoolParams) || poolParams instanceof (0, _poolParamsP3.PoolParamsP3)) displayIfTokenPool(newPool, isAccountRegistered);
        else if (poolParams instanceof (0, _poolParamsNFT.PoolParamsNFT)) {
            const poolUserStatus = await poolParams.stakingContractData.getUserStatus();
            // check for user stake 
            const hasUserStakedNFT = poolUserStatus.stake_tokens.some((total)=>total.length > 0) && poolUserStatus.stake != "0";
            displayIfNftPool(newPool, isAccountRegistered, hasUserStakedNFT);
        }
    }
    const isUserFarming = newPool.classList.contains("your-farms");
    if (isUserFarming) {
        activateButtonContainer.classList.add("hidden");
        activateButton.setAttribute("disabled", "disabled");
        harvestSection.classList.remove("hidden");
    }
}
function addLogo(metaData, container, index = 0) {
    let newTokenLogoElement;
    if (metaData.icon != null && metaData.icon != "") {
        // inputLogoContainer.innerHTML= `${metaData.icon}`
        if (metaData.icon.startsWith("data:image")) {
            const tokenLogoElement = (0, _document.qs)(".generic-token-logo-img");
            newTokenLogoElement = tokenLogoElement.cloneNode(true);
            newTokenLogoElement?.setAttribute("src", metaData.icon);
        } else if (metaData.icon.startsWith("<svg")) {
            const tokenLogoElement = (0, _document.qs)(".generic-token-logo-svg-container");
            newTokenLogoElement = tokenLogoElement.cloneNode(true);
            newTokenLogoElement.innerHTML = metaData.icon;
        } else {
            const tokenLogoElement = (0, _document.qs)(".generic-token-logo-text");
            newTokenLogoElement = tokenLogoElement.cloneNode(true);
            newTokenLogoElement.innerHTML = `${metaData.name}`;
        }
    } else {
        const tokenLogoElement = (0, _document.qs)(".generic-token-logo-text");
        newTokenLogoElement = tokenLogoElement.cloneNode(true);
        newTokenLogoElement.innerHTML = `${metaData.name}`;
    }
    toggleGenericClass(newTokenLogoElement);
    newTokenLogoElement.classList.add(`farmed-token-logo`);
    container.append(newTokenLogoElement);
}
async function addRewardTokenIcons(poolParams, newPool) {
    const tokenIconDataArray = await poolParams.getRewardTokenIconData();
    const container = newPool.querySelector(".reward-tokens-value-usd");
    for(let i = 0; i < tokenIconDataArray.length; i++){
        const tokenIconData = tokenIconDataArray[i];
        var newMiniIcon = importMiniIcon(tokenIconData);
        container.append(newMiniIcon);
    }
}
async function addTotalStakedDetail(poolParams, newPool) {
    const stakeTokenDataArray = await poolParams.getStakeTokensDetail();
    let totalStakedRows = {
        parentClass: "total-staked-info-container",
        rows: []
    };
    for(let i = 0; i < stakeTokenDataArray.length; i++){
        let stakeTokenData = stakeTokenDataArray[i];
        const row = {
            iconData: stakeTokenData.iconData,
            content: stakeTokenData.content
        };
        totalStakedRows.rows.push(row);
    }
    addDetailRows(newPool, totalStakedRows);
}
async function addRewardsPerDayDetail(poolParams, newPool) {
    convertAndAddRewardDataRows(poolParams, newPool, "rewards-per-day-info-container", "rewardsPerDay");
}
// async function addTotalFarmedDetail(poolParams: PoolParams|PoolParamsP3, newPool: HTMLElement) {
//   convertAndAddRewardDataRows(poolParams, newPool, "apr-info-container", "totalRewards")
// }
async function convertAndAddRewardDataRows(poolParams, newPool, parentClass, key) {
    const rewardsTokenDataArray = await poolParams.getRewardsTokenDetail();
    let rewardsPerDayRows = {
        parentClass,
        rows: []
    };
    for(let i = 0; i < rewardsTokenDataArray.length; i++){
        let rewardsTokenData = rewardsTokenDataArray[i];
        const row = {
            iconData: rewardsTokenData.iconData,
            // @ts-ignore
            content: rewardsTokenData[key]
        };
        rewardsPerDayRows.rows.push(row);
    }
    addDetailRows(newPool, rewardsPerDayRows);
}
async function addRewardsTokenDetail(poolParams, newPool) {
    convertAndAddRewardDataRows(poolParams, newPool, "reward-tokens-info-container", "tokenName");
}
function addDetailRows(newPool, rowsData) {
    const parentElement = newPool.querySelector(`.${rowsData.parentClass}`);
    const genericRow = (0, _document.qs)(`.generic-detail-row`);
    const rows = rowsData.rows;
    for(let i = 0; i < rows.length; i++){
        const newRow = genericRow.cloneNode(true);
        let row = rows[i];
        newRow.querySelector(".content").innerHTML = row.content;
        const iconContainer = newRow.querySelector(".icon");
        var newMiniIcon = importMiniIcon(row.iconData);
        iconContainer.append(newMiniIcon);
        toggleGenericClass(newRow);
        newRow.classList.add(row.iconData.tokenName.toLowerCase().replace(/ /g, "-"));
        parentElement.append(newRow);
    }
}
async function addUnclaimedRewardsDetail(poolParams, newPool) {
    convertAndAddRewardDataRows(poolParams, newPool, "unclaimed-rewards-info-container", "userUnclaimedRewards");
}
function importMiniIcon(iconData) {
    const iconNode = (0, _document.qs)(".generic-mini-icon");
    var parser = new DOMParser();
    var newMiniIcon;
    if (iconData.isSvg) {
        var doc = parser.parseFromString(iconData.src, "image/svg+xml");
        newMiniIcon = doc.documentElement;
        newMiniIcon.classList.add("generic-mini-icon");
    } else {
        newMiniIcon = iconNode.cloneNode(true);
        newMiniIcon.setAttribute("src", iconData.src);
        newMiniIcon.setAttribute("alt", iconData.tokenName);
    }
    // toggleGenericClass(newMiniIcon, "mini-icon")
    toggleGenericClass(newMiniIcon);
    return newMiniIcon;
}
// function toggleGenericClass(element: HTMLElement, className: string) {
//   element.classList.remove(`generic-${className}`)
//   element.classList.add(`${className}`)
//   element.classList.remove("hidden")
// }
function toggleGenericClass(element) {
    for(let i = 0; i < element.classList.length; i++){
        let className = element.classList[i];
        if (className.includes("generic-")) {
            const newClass = className.substring(8);
            element.classList.remove(`${className}`);
            element.classList.add(`${newClass}`);
        }
    }
    element.classList.remove("hidden");
}
function setAllInputMaxButtonListeners(newPool) {
    const inputContainerArray = newPool.querySelectorAll(".token-input-container");
    for(let i = 0; i < inputContainerArray.length; i++){
        let inputContainer = inputContainerArray[i];
        const maxButton = inputContainer.querySelector(".max-button");
        maxButton?.addEventListener("click", inputMaxButtonClicked(inputContainer));
    }
}
function inputMaxButtonClicked(newInputContainer) {
    return function(event) {
        event.preventDefault();
        let input = newInputContainer.querySelector("input");
        const amount = newInputContainer.querySelector(".value").innerHTML;
        const inputEvent = new Event("input");
        input.value = amount.toString();
        input.dispatchEvent(inputEvent);
    };
}
async function addPoolList(poolList) {
    (0, _document.qs)("#pool_list").innerHTML = "";
    for(let i = 0; i < poolList.length; i++)await addPool(poolList[i]);
    (0, _document.qs)("#pool_list").style.display = "grid";
    if ((0, _document.qs)("#pool_list").childElementCount == 0) (0, _document.qs)("#pool_list").innerHTML = `<h2 class="no-pools">New Pools SoonTM...⚙️ Try our games!🕹️</h2>`;
    // qs(".loader").style.display = "none"
    isPaused = false;
}
let closePublicityButton = (0, _document.qs)(".close-publicity");
function closePublicityButtonHandler() {
    return function() {
        closePublicityButton.classList.add("hidden");
        let publicityContainer = (0, _document.qs)(".publicity-container");
        publicityContainer.classList.add("hidden");
        let publicityDecoration = (0, _document.qs)(".publicity-decoration");
        publicityDecoration.classList.add("no-publicity-position");
        let header = (0, _document.qs)("header");
        header.classList.add("no-publicity-position");
        let burguer = (0, _document.qs)("#burguer");
        burguer.classList.add("no-publicity-position");
    };
}
function setCountdown() {
    var countDownDate = new Date("Aug 22, 2022 12:00:00 UTC");
    var countDownDate = new Date(countDownDate.getTime() - countDownDate.getTimezoneOffset() * 60000);
    // Time calculations for days, hours, minutes and seconds
    var d = new Date();
    var d = new Date(d.getTime() - d.getTimezoneOffset() * 60000);
    var distance = countDownDate.getTime() - d.getTime();
    if (distance < 0) {
        clearInterval(countDownIntervalId);
        document.getElementById("timer").innerHTML = "";
    }
    var days = Math.floor(distance / 86400000);
    var hours = Math.floor(distance % 86400000 / 3600000);
    var minutes = Math.floor(distance % 3600000 / 60000);
    var seconds = Math.floor(distance % 60000 / 1000);
    document.getElementById("timer").innerHTML = `<h2><span style='color:#222'>New Pools Start In: </span><span style='color:rgba(80,41,254,0.88)'>${days} d : ${hours} h :  
  ${minutes} m : ${seconds} s</span></h2>`;
}
window.onload = async function() {
    try {
        let env = (0, _config.ENV //default
        );
        if (env != nearConfig.networkId) nearConfig = (0, _config.getConfig)((0, _config.ENV));
        near = await _nearApiJs.connect(Object.assign({
            deps: {
                keyStore: new _nearApiJs.keyStores.BrowserLocalStorageKeyStore()
            }
        }, nearConfig));
        closePublicityButton.addEventListener("click", closePublicityButtonHandler());
        //Path tag is part of the svg tag and also need the event
        closePublicityButton.querySelector("path").addEventListener("click", closePublicityButtonHandler());
        let headerCheddarValueDisplayerContainer = (0, _document.qs)(".header-extension_cheddar-value");
        let cheddarValue = Number((await (0, _oracle.getTokenData)("cheddar")).price).toFixed(7);
        headerCheddarValueDisplayerContainer.innerHTML = `$ ${cheddarValue}`;
        // initButton()
        // countDownIntervalId = window.setInterval(function(){
        //   setCountdown()
        // }, 1000);
        //init narwallets listeners
        (0, _narwallets.narwallets).setNetwork(nearConfig.networkId); //tell the wallet which network we want to operate on
        (0, _narwallets.addNarwalletsListeners)(narwalletConnected, narwalletDisconnected) //listen to narwallets events
        ;
        //set-up auto-refresh loop (10 min)
        setInterval(autoRefresh, 10 * MINUTES);
        //check if signed-in with NEAR Web Wallet
        await initNearWebWalletConnection();
        let didJustActivate = false;
        (0, _liquidityButton.initButton)();
        const cheddarContractName = (0, _config.ENV) == "mainnet" ? (0, _config.CHEDDAR_CONTRACT_NAME) : (0, _config.TESTNET_CHEDDAR_CONTRACT_NAME);
        const cheddarContract = new (0, _nep141.NEP141Trait)(cheddarContractName);
        let circulatingSupply = await cheddarContract.ft_total_supply();
        let allSuplyTextContainersToFill = document.querySelector(".circulatingSupply.supply");
        allSuplyTextContainersToFill.innerHTML = (0, _conversions.toStringDec)((0, _conversions.yton)(circulatingSupply)).split(".")[0];
        if (nearWebWalletConnection.isSignedIn()) {
            //already signed-in with NEAR Web Wallet
            //make the contract use NEAR Web Wallet
            wallet = new (0, _nearWebWallet.NearWebWallet)(nearWebWalletConnection);
            // const poolList = await getPoolList(wallet)
            // await addPoolList(poolList)
            accountName = wallet.getAccountId();
            (0, _document.qsInnerText)("#account-id", accountName);
            await signedInFlow(wallet);
            cheddarContract.wallet = wallet;
            const cheddarBalance = await cheddarContract.ft_balance_of(accountName);
            const amountAvailable = (0, _conversions.toStringDec)((0, _conversions.yton)(await wallet.getAccountBalance()));
            (0, _document.qsInnerText)("#my-account #wallet-available", amountAvailable);
            (0, _document.qsInnerText)("#my-account #cheddar-balance", (0, _conversions.convertToDecimals)(cheddarBalance, 24, 5));
            (0, _document.qsInnerText)("#nft-pools-section .cheddar-balance-container .cheddar-balance", (0, _conversions.convertToDecimals)(cheddarBalance, 24, 5));
            //check if we're re-spawning after a wallet-redirect
            //show transaction result depending on method called
            const searchParamsResultArray = await (0, _checkRedirectSearchParams.checkRedirectSearchParamsMultiple)(nearWebWalletConnection, nearConfig.explorerUrl || "explorer");
            let method = "";
            let err;
            let args = [];
            searchParamsResultArray.forEach((searchParamsResult)=>{
                const { err: errResult , data , method: methodResult , finalExecutionOutcome  } = searchParamsResult;
                if (errResult) {
                    err = errResult;
                    return;
                }
                if (methodResult) method = methodResult;
                if (finalExecutionOutcome) {
                    let arg = JSON.parse(atob(finalExecutionOutcome.transaction.actions[0].FunctionCall.args));
                    if (arg.token == undefined) {
                        const stakeContract = finalExecutionOutcome.transaction.receiver_id;
                        for(let i = 0; i < nearConfig.farms.length; i++){
                            const farmData = nearConfig.farms[i];
                            if (farmData.contractName == stakeContract) {
                                arg.token = farmData.tokenContractName;
                                break;
                            }
                        }
                    }
                    args.push(arg);
                }
            });
            if (err) (0, _document.showError)(err, "Transaction - " + method);
            else if (method == "ft_transfer_call") // @ts-ignore
            await stakeResult(args);
            else if (method == "unstake") // @ts-ignore
            await unstakeResult(args);
            else if (method == "nft_transfer_call") (0, _document.showSuccess)("NFT staked successfully", "Stake NFT");
            else if (method == "storage_deposit") {
                didJustActivate = true;
                (0, _document.showSuccess)("Successfully activated", "Activate");
            } else if (method == "withdraw_crop") {
                window.sessionStorage.setItem("cheddarFarmHarvestedSuccesfully", "yes");
                (0, _document.showSuccess)("Tokens harvested successfully");
            } else {
                console.log("Method", method);
                console.log("Args", args.join("\n"));
            }
        } else //not signed-in 
        await signedOutFlow() //show home-not-connected -> select wallet page
        ;
        const poolList = await (0, _poolList.getPoolList)(wallet);
        await addPoolList(poolList);
        setDefaultFilter(didJustActivate);
    } catch (ex) {
        (0, _document.showErr)(ex);
    } finally{
        (0, _document.qs)(".loader").style.display = "none";
    }
};
async function stakeResult(argsArray) {
    let message = "Staked: ";
    let tokensStakedMessage = [];
    const poolList = await (0, _poolList.getPoolList)(wallet);
    let pool;
    for(let i = 0; i < poolList.length; i++)if (argsArray[0].receiver_id == poolList[i].stakingContractData.contract.contractId) {
        pool = poolList[i];
        break;
    }
    if (!pool) throw new Error(`No pool found with contract id ${argsArray[0].receiver_id}`);
    await Promise.all(argsArray.map(async (args, index)=>{
        // const args = JSON.parse(atob(finalExecutionOutcome.transaction.actions[0].FunctionCall.args))
        let metadata;
        if (pool instanceof (0, _poolParams.PoolParams)) metadata = await pool.stakeTokenContract.ft_metadata();
        else if (pool instanceof (0, _poolParamsP3.PoolParamsP3)) {
            const stakeTokenContractList = await pool.stakingContractData.getStakeTokenContractList();
            metadata = await stakeTokenContractList[index].contract.ft_metadata();
        }
        if (!metadata) // This if should never be true
        throw new Error("Error obtaining metadata on stake result");
        const amount = (0, _conversions.convertToDecimals)(args.amount, metadata.decimals, 5);
        tokensStakedMessage.push(`${amount} ${metadata.symbol}`);
    }));
    message += tokensStakedMessage.join(" - ");
    (0, _document.showSuccess)(message, "Stake");
}
async function unstakeResult(argsArray) {
    let message = "Unstaked: ";
    if ("nft_contract_id" in argsArray[0]) message += `deposited cheddar and ${argsArray.length} NFTs have been refunded`;
    else if ("token" in argsArray[0]) {
        let tokensUnstakedMessage = [];
        for(let i = 0; i < argsArray.length; i++){
            const args = argsArray[i];
            let contract = new (0, _nep141.NEP141Trait)(args.token);
            contract.wallet = wallet;
            const metaData = await contract.ft_metadata();
            // @ts-ignore
            const amount = (0, _conversions.convertToDecimals)(args.amount, metaData.decimals, 5);
            tokensUnstakedMessage.push(`${amount} ${metaData.symbol}`);
        }
        message += tokensUnstakedMessage.join(" - ");
    }
    (0, _document.showSuccess)(message, "Unstake");
}
// NEW CODE
function toggleActions(elementToShow) {
    return function(event) {
        let element = event.target;
        element.tagName.toLowerCase() != "a" && event.preventDefault();
        const tagName = element.tagName.toLowerCase();
        const tagsToIgnore = [
            "button",
            "input",
            "span",
            "img",
            "svg",
            "path",
            "a"
        ];
        if (!tagsToIgnore.includes(tagName) || element.classList.contains("toggle-display")) elementToShow.classList.toggle("hidden");
    };
}
function flipElement(elementToFlip) {
    return function(event) {
        let element = event.target;
        element.tagName.toLowerCase() != "a" && event.preventDefault();
        const tagName = element.tagName.toLowerCase();
        const tagsToIgnore = [
            "button",
            "input",
            "span",
            "img",
            "svg",
            "path",
            "polygon",
            "a"
        ];
        if (!tagsToIgnore.includes(tagName) || element.classList.contains("toggle-display")) elementToFlip.classList.toggle("flipped");
    };
}
function toggleElement(elementToShow) {
    return function(event) {
        event.preventDefault();
        elementToShow.classList.toggle("hidden");
    };
}
function paintOrUnPaintElement(previousColoringClass, elementToPaint) {
    return function(event) {
        event.preventDefault();
        elementToPaint.classList.toggle("transparent");
        elementToPaint.classList.toggle(previousColoringClass);
    };
}
function makeBlinkElement(elementToMakeBlink) {
    return function(event) {
        event.preventDefault();
        elementToMakeBlink.classList.toggle("blink");
    };
}
function showElement(elementToShow) {
    return function(event) {
        event.preventDefault();
        elementToShow.classList.remove("hidden");
    };
}
function hideElement(elementToHide) {
    return function(event) {
        event.preventDefault();
        elementToHide.classList.add("hidden");
    };
}
function showElementHideAnother(elementToShow, elementToHide) {
    return function(event) {
        event.preventDefault();
        elementToShow.classList.remove("hidden");
        elementToHide.classList.add("hidden");
    };
}
function setActiveColor(event) {
    let element = event.target;
    element.classList.add("active");
}
function cancelActiveColor(elementToDisplayAsNotActive) {
    return function(event) {
        event.preventDefault();
        elementToDisplayAsNotActive.classList.remove("active");
    };
}
async function loadAndShowNfts(poolParams, buttonId) {
    await loadNFTs(poolParams, buttonId);
    (0, _document.qs)("#nft-pools-section").classList.remove("hidden");
    if (poolParams instanceof (0, _poolParamsNFT.PoolParamsNFT)) {
        let confirmStakeUnstakeNFTButton = NFTPoolSection.querySelector("#confirm-stake-unstake");
        let cancelStakeUnstakeNFTButton = NFTPoolSection.querySelector("#cancel-stake-unstake");
        confirmStakeUnstakeNFTButton.addEventListener("click", confirmStakeUnstakeNFTButtonHandler(poolParams));
        cancelStakeUnstakeNFTButton.addEventListener("click", quitNFTFlex());
    }
}
function displayCheddarNeededToStakeNFTs(stakeRate) {
    const nftPoolSection = (0, _document.qs)("#nft-pools-section");
    let countSelectedToStakeNfts = nftPoolSection.querySelectorAll(".nft-card.selected.unstaked").length;
    const amountNeededToStakeAllNfts = nftPoolSection.querySelector(".cheddar-needed-to-stake-all-nfts");
    amountNeededToStakeAllNfts.innerHTML = (countSelectedToStakeNfts * stakeRate).toString();
}
function selectAllActionNftButtons(action, stakeRate) {
    return function(event) {
        event.preventDefault();
        const nftPoolsSection = (0, _document.qs)("#nft-pools-section");
        const allSelectedPreviously = nftPoolsSection.querySelectorAll(".selected");
        allSelectedPreviously.forEach((element)=>{
            element.classList.remove("selected");
        });
        const clickedElement = event.target;
        clickedElement.classList.add("selected");
        let allNFTCardsByAction;
        if (action == "stake") allNFTCardsByAction = nftPoolsSection.querySelectorAll(".nft-card.unstaked");
        else allNFTCardsByAction = nftPoolsSection.querySelectorAll(".nft-card.staked");
        allNFTCardsByAction.forEach((card)=>{
            card.classList.add("selected");
        });
        displayCheddarNeededToStakeNFTs(stakeRate);
    };
}
async function showStakeUnstakeNFTGrid(poolParams, buttonId) {
    const contractParams = await poolParams.stakingContractData.getContractParams();
    // const stakeRateStr: string = contractParams.stake_rates[0]    
    const stakeRate = (0, _conversions.yton)(contractParams.cheddar_rate);
    (0, _document.qs)(".needed-to-stake-each-nft .amount").innerHTML = stakeRate.toString();
    const multipleNftSelectionButtons = (0, _document.qs)(".multiple-nft-selection");
    multipleNftSelectionButtons.classList.remove("hidden");
    const confirmButton = (0, _document.qs)("#confirm-stake-unstake");
    confirmButton.classList.remove("hidden");
    const cancelButton = (0, _document.qs)("#cancel-stake-unstake");
    cancelButton.classList.remove("hidden");
    const unstakeAllNftsButton = (0, _document.qs)(".unstake-all-nft-button");
    unstakeAllNftsButton.addEventListener("click", selectAllActionNftButtons("unstake", stakeRate));
    const stakeAllNftsButton = (0, _document.qs)(".stake-all-nft-button");
    stakeAllNftsButton.addEventListener("click", selectAllActionNftButtons("stake", stakeRate));
    displayCheddarNeededToStakeNFTs(stakeRate);
    await loadAndShowNfts(poolParams, buttonId);
}
function showNFTGrid(poolParams, buttonId) {
    return async function() {
        loadAndShowNfts(poolParams, buttonId);
    };
}
async function loadNFTs(poolParams, buttonId) {
    const NFTContainer = (0, _document.qs)(".nft-flex");
    NFTContainer.innerHTML = "";
    const accountId = poolParams.wallet.getAccountId();
    let nftContract;
    let stakedOrBoostingNFTsToAdd = [];
    //Use conditional to check if the pressed button was boost or stake/unstake so the correct nft are loaded
    let userUnstakedNFTsWithMetadata = [];
    let userStatus = await poolParams.stakingContractData.getUserStatus();
    let poolHasStaked = false;
    if (buttonId === "boost-button") {
        nftContract = poolParams.nftContractForBoosting;
        const userUnstakedNFTs = await nftContract.nft_tokens_for_owner(accountId);
        const mapped = userUnstakedNFTs.map((nft)=>{
            return {
                ...nft,
                contract_id: nftContract.contractId,
                base_url: nftContract.baseUrl
            };
        });
        console.log(1, mapped.length);
        userUnstakedNFTsWithMetadata = userUnstakedNFTsWithMetadata.concat(mapped);
        let tokenId;
        if ("boost_nfts" in userStatus) {
            poolHasStaked = userStatus.boost_nfts != "";
            tokenId = userStatus.boost_nfts;
        } else {
            poolHasStaked = userStatus.cheddy_nft != "";
            tokenId = userStatus.cheddy_nft;
        }
        // poolHasStaked = userStatus.cheddy_nft != '' || userStatus.boost_nfts != ''
        if (poolHasStaked) stakedOrBoostingNFTsToAdd.push((0, _nftStructs.newNFT)(tokenId, nftContract.baseUrl, nftContract.contractId));
    } else if (buttonId === "stake-unstake-nft" && poolParams instanceof (0, _poolParamsNFT.PoolParamsNFT)) {
        const nftContractList = await poolParams.stakingContractData.getStakeNFTContractList();
        for(let i = 0; i < nftContractList.length; i++){
            const contract = nftContractList[i].contract;
            const nftMetadata = contract.nft_metadata();
            const userUnstakedNFTs = await contract.nft_tokens_for_owner(accountId);
            let baseUrl = (await nftMetadata).base_uri;
            if (!baseUrl) baseUrl = contract.baseUrl;
            userUnstakedNFTsWithMetadata = userUnstakedNFTsWithMetadata.concat(userUnstakedNFTs.map((nft)=>{
                return {
                    ...nft,
                    contract_id: contract.contractId,
                    base_url: baseUrl
                };
            }));
        }
        poolHasStaked = userStatus.stake_tokens.some((a)=>a.length > 0);
        for(let index = 0; index < userStatus.stake_tokens.length; index++){
            const contract = nftContractList[index].contract;
            let contractTokens = userStatus.stake_tokens[index];
            let thisUserStakedNFTsPromises = [];
            for (let tokenId of contractTokens)thisUserStakedNFTsPromises.push(contract.nft_token(tokenId));
            const thisUserStakedNFTs = await Promise.all(thisUserStakedNFTsPromises);
            thisUserStakedNFTs.forEach((nft)=>{
                stakedOrBoostingNFTsToAdd.push({
                    ...nft,
                    contract_id: contract.contractId,
                    base_url: contract.baseUrl
                });
            });
        }
    } else throw new Error(`Object ${typeof poolParams} is not implemented for loading NFT's`);
    if (userUnstakedNFTsWithMetadata.length == 0 && !poolHasStaked) {
        let tokenName = "";
        if (poolParams instanceof (0, _poolParamsP3.PoolParamsP3)) tokenName = "cheddar";
        else {
            const nftContractList = await poolParams.stakingContractData.getStakeNFTContractList();
            // It will be assumed there is only one NFT for staking
            const nftContractMetadata = await nftContractList[0].getMetadata();
            tokenName = nftContractMetadata.name.toLowerCase();
        }
        NFTContainer.innerHTML = `You don't have any ${tokenName} NFT`;
        return;
    }
    if (stakedOrBoostingNFTsToAdd.length > 0) stakedOrBoostingNFTsToAdd.forEach((nft)=>{
        addNFT(poolParams, NFTContainer, nft, poolHasStaked, "", buttonId, "", true);
    });
    userUnstakedNFTsWithMetadata.forEach((nft)=>{
        console.log(4, nft);
        addNFT(poolParams, NFTContainer, nft, poolHasStaked, "", buttonId, "", false);
    });
}
function checkIfMultipleSelectionButtonsMustBeSelected() {
    const nftPoolsSection = document.querySelector("#nft-pools-section");
    let unstakedAmount = nftPoolsSection.querySelectorAll(".unstaked").length;
    let stakedAmount = nftPoolsSection.querySelectorAll(".staked").length;
    let unstakedSelectedAmount = nftPoolsSection.querySelectorAll(".unstaked.selected").length;
    let stakedSelectedAmount = nftPoolsSection.querySelectorAll(".staked.selected").length;
    let stakeAllButton = (0, _document.qs)(".stake-all-nft-button");
    if (unstakedAmount == unstakedSelectedAmount && unstakedAmount != 0) stakeAllButton.classList.add("selected");
    else stakeAllButton.classList.remove("selected");
    let unstakeAllButton = (0, _document.qs)(".unstake-all-nft-button");
    if (stakedAmount == stakedSelectedAmount && stakedAmount != 0) unstakeAllButton.classList.add("selected");
    else unstakeAllButton.classList.remove("selected");
}
function stakeAndUstakeNFTButtonHandler(newNFTCard, stakeRate) {
    return function() {
        newNFTCard.classList.toggle("selected");
        checkIfMultipleSelectionButtonsMustBeSelected();
        displayCheddarNeededToStakeNFTs(stakeRate);
    };
}
function confirmStakeUnstakeNFTButtonHandler(poolParams) {
    return async function(event) {
        event.preventDefault();
        let isAnyNFTSelected = (0, _document.qsa)(".nft-flex .selected").length > 0;
        if (!isAnyNFTSelected) {
            (0, _document.showError)("Select NFT's to stake or unstake");
            return;
        }
        try {
            const contractParams = await poolParams.stakingContractData.getContractParams();
            //If used don´t have enough cheddar to stake all the selected NFTs show error msg and return
            let cheddarBalanceContainer = document.querySelector(".cheddar-balance");
            let cheddarBalance = parseInt(cheddarBalanceContainer.innerHTML);
            let cheddarNeededToStakeNFTsContainer = document.querySelector(".cheddar-needed-to-stake-all-nfts");
            let cheddarNeededToStakeNFTs = parseInt(cheddarNeededToStakeNFTsContainer.innerHTML);
            if (cheddarBalance < cheddarNeededToStakeNFTs) (0, _document.showError)("Not enough cheddar to stake selected NFTs");
            const stakeUnstakeNFTsMap = await getNFTsToStakeAndUnstake(poolParams);
            const haveNftsToStake = Array.from(stakeUnstakeNFTsMap.values()).some((entry)=>entry.nftsToStake.length > 0);
            let unixTimestamp = new Date().getTime() / 1000;
            const isDateInRange = unixTimestamp < contractParams.farming_end;
            if (!isDateInRange && haveNftsToStake) throw Error("Pools is Closed.");
            poolParams.stakeUnstakeNFTs(stakeUnstakeNFTsMap);
        } catch (err) {
            (0, _document.showErr)(err);
        }
    };
}
async function getNFTsToStakeAndUnstake(poolParams) {
    // let nftsToStake = [] as string[]
    // let nftsToUnstake = [] as string[]
    const stakeNFTContractList = await poolParams.stakingContractData.getStakeNFTContractList();
    let output = new Map();
    stakeNFTContractList.forEach((nftContractData)=>{
        const contractId = nftContractData.contract.contractId;
        output.set(contractId, {
            nftsToStake: [],
            nftsToUnstake: []
        });
    });
    let allSelectedNfts = NFTPoolSection.querySelectorAll(".nft-card.selected");
    allSelectedNfts.forEach((nft)=>{
        let nftNameContainer = nft.querySelector(".nft-name");
        let nftName = nftNameContainer.innerHTML;
        let thisNFTStakeButton = nft.querySelector(".stake-nft-button");
        let contractId = nft.getAttribute("contract_id");
        let contractStakeUnstakeData = output.get(contractId);
        // TODO: For some reason, this function is being called multiple times on confirm, and on some run this object is undefined
        // The next line is set to avoid an error message, but it should be reviewed why this is happening.
        // There is also some react involved for some reason. It is uncertained wheter it is called from NEAR, since this project
        // doesn't have any react code involved, and it doesn't seem to be malicious
        if (!contractStakeUnstakeData) return;
        //If the stake button is hidden the pool needs to be unstaked
        //If not it needs to be staked
        if (thisNFTStakeButton?.classList.contains("hidden")) contractStakeUnstakeData.nftsToUnstake.push(nftName);
        else contractStakeUnstakeData.nftsToStake.push(nftName);
    });
    return output;
}
function displayNFTPoolSectionForStakeUnstakeNFT(newNFTCard, stakeButton, unstakeButton, stakeRate) {
    const NFTStakeTitle = NFTPoolSection.querySelector(".stake-nfts-title");
    const cheddarBalanceContainer = NFTPoolSection.querySelector(".cheddar-balance-container");
    NFTStakeTitle.classList.remove("hidden");
    cheddarBalanceContainer.classList.remove("hidden");
    stakeButton.addEventListener("click", stakeAndUstakeNFTButtonHandler(newNFTCard, stakeRate));
    unstakeButton.addEventListener("click", stakeAndUstakeNFTButtonHandler(newNFTCard, stakeRate));
}
function displayNFTPoolSectionForNFTBoost(poolParams, poolHasStaked, staked, newNFTCard, i, stakeButton, unstakeButton) {
    const NFTPoolSectionInfoRow = NFTPoolSection.querySelector(".nft-farm-info");
    //Only if user have more than 1 NFT the legend "You can only boost one NFT is shown"
    if (i > 1) NFTPoolSectionInfoRow.classList.remove("hidden");
    stakeButton?.addEventListener("click", stakeNFT(poolParams, newNFTCard));
    if (staked) unstakeButton.addEventListener("click", unstakeNFT(poolParams, newNFTCard));
    if (poolHasStaked) stakeButton.setAttribute("disabled", "disabled");
    else stakeButton.removeAttribute("disabled");
}
async function addNFT(poolParams, container, nft, poolHasStaked, nftBaseUrl, buttonId, contractId, staked = false) {
    const genericNFTCard = (0, _document.qs)(".generic-nft-card");
    const newNFTCard = genericNFTCard.cloneNode(true);
    newNFTCard.setAttribute("contract_id", nft.contract_id);
    let i = 0;
    const nftName = nft.token_id.indexOf("@") != -1 ? nft.token_id.split("@")[1] : nft.token_id;
    for(; i < newNFTCard.querySelectorAll(".nft-name").length; i++)newNFTCard.querySelectorAll(".nft-name")[i].innerHTML = nftName;
    const NFTPoolSectionInfoRow = NFTPoolSection.querySelector(".nft-farm-info");
    NFTPoolSectionInfoRow.classList.add("hidden");
    let imgElement = newNFTCard.querySelector(".nft-img-container img");
    // imgElement?.setAttribute("src", new URL(nft.metadata.media, nftBaseUrl).href)
    const nftMedia = nft.metadata.media.indexOf("@") != -1 ? nft.metadata.media.split("@")[1] : nft.metadata.media;
    let src;
    console.log(3, nftMedia, nft.base_url);
    if (nftMedia.startsWith("https://")) src = nftMedia;
    else src = nft.base_url + "/" + nftMedia;
    imgElement?.setAttribute("src", src);
    imgElement.setAttribute("alt", nft.metadata.media);
    let stakeButton = newNFTCard.querySelector(".stake-nft-button");
    let unstakeButton = newNFTCard.querySelector(".unstake-nft-button");
    if (staked) {
        unstakeButton.classList.remove("hidden");
        stakeButton.classList.add("hidden");
        if (buttonId == "stake-unstake-nft") {
            newNFTCard.classList.add("staked");
            newNFTCard.classList.remove("unstaked");
        }
    } else {
        unstakeButton.classList.add("hidden");
        stakeButton.classList.remove("hidden");
        if (buttonId == "stake-unstake-nft") {
            newNFTCard.classList.add("unstaked");
            newNFTCard.classList.remove("staked");
        }
    }
    if (buttonId === "boost-button") displayNFTPoolSectionForNFTBoost(poolParams, poolHasStaked, staked, newNFTCard, i, stakeButton, unstakeButton);
    else if (buttonId === "stake-unstake-nft" && poolParams instanceof (0, _poolParamsNFT.PoolParamsNFT)) {
        const contractParams = await poolParams.stakingContractData.getContractParams();
        const stakeRate = (0, _conversions.yton)(contractParams.cheddar_rate);
        displayNFTPoolSectionForStakeUnstakeNFT(newNFTCard, stakeButton, unstakeButton, stakeRate);
    }
    container.append(newNFTCard);
    toggleGenericClass(newNFTCard);
}
function stakeNFT(poolParams, card) {
    return async function(event) {
        try {
            event.preventDefault();
            (0, _document.showWait)("Staking NFT...");
            const tokenId = card.querySelector(".nft-name").innerHTML;
            await poolParams.nftContractForBoosting.nft_transfer_call(poolParams.stakingContractData.contract.contractId, tokenId);
            (0, _document.showSuccess)("NFT staked successfully");
            let allNFTCards = (0, _document.qsa)(".nft-card");
            allNFTCards.forEach((NFTCard)=>{
                NFTCard.querySelector(".stake-nft-button").setAttribute("disabled", "disabled");
            });
            card.querySelector(".stake-nft-button").classList.add("hidden");
            let unstakeButton = card.querySelector(".unstake-nft-button");
            unstakeButton.removeAttribute("disabled");
            unstakeButton.addEventListener("click", unstakeNFT(poolParams, card));
        } catch (err) {
            (0, _document.showErr)(err);
        }
    };
}
function unstakeNFT(poolParams, card) {
    return async function(event) {
        try {
            event.preventDefault();
            (0, _document.showWait)("Unstaking NFT...");
            if (poolParams instanceof (0, _poolParamsP3.PoolParamsP3)) await poolParams.stakingContractData.contract.withdraw_nft(poolParams.wallet.getAccountId());
            else if (poolParams instanceof (0, _poolParamsNFT.PoolParamsNFT)) await poolParams.withdrawBoost();
            (0, _document.showSuccess)("NFT unstaked successfully");
            card.querySelector(".unstake-nft-button").classList.add("hidden");
            (0, _document.qsa)(".stake-nft-button").forEach((elem)=>{
                elem.removeAttribute("disabled");
                elem.classList.remove("hidden");
            });
        // let stakeButton = card.querySelector(".stake-nft-button")!
        // stakeButton.removeAttribute("disabled")
        // stakeButton.addEventListener("click", stakeNFT(poolParams, card))
        } catch (err) {
            (0, _document.showErr)(err);
        }
    };
}
function hideNFTFlexComponents() {
    const hideNFTFlexComponents1 = NFTPoolSection.querySelectorAll(".hiddenByDefault");
    for(let i = 0; i < hideNFTFlexComponents1.length; i++)hideNFTFlexComponents1[i].classList.add("hidden");
}
function showNFTFlexComponents() {
    const showNFTFlexComponents1 = NFTPoolSection.querySelectorAll(".shownUnselectedByDefault");
    for(let i = 0; i < showNFTFlexComponents1.length; i++)showNFTFlexComponents1[i].classList.remove("selected");
}
function quitNFTFlex() {
    return function(event) {
        event.preventDefault();
        let element = event.target;
        if (element.getAttribute("id") == "nft-pools-section" || element.getAttribute("id") == "cancel-stake-unstake") {
            (0, _document.qs)(".nft-flex").innerHTML = "";
            (0, _document.qs)("#nft-pools-section").classList.add("hidden");
            hideNFTFlexComponents();
            showNFTFlexComponents();
        }
    };
}
const NFTPoolSection = (0, _document.qs)("#nft-pools-section");
NFTPoolSection.addEventListener("click", quitNFTFlex());
//Burger button
const burgerTogglers = (0, _document.qsa)(".toggleBurguer");
burgerTogglers.forEach((toggler)=>{
    toggler.addEventListener("click", ()=>{
        toggleBurgerNav();
    });
});
const toggleBurgerNav = ()=>{
    const burgerButton = (0, _document.qs)(".burger-button");
    const rightNav = (0, _document.qs)(".burguer-content");
    rightNav.classList.toggle("show-right__nav");
    burgerButton.classList.toggle("burger-button--toggle");
};

},{"near-api-js":"ohc3m","./config":"gTux2","./wallet-api/disconnected-wallet":"1aCpf","./wallet-api/near-web-wallet/near-web-wallet":"knXiI","./wallet-api/narwallets/narwallets":"2aflt","./util/conversions":"ddkdY","./util/document":"jRQBA","./wallet-api/near-web-wallet/checkRedirectSearchParams":"asJSA","./contracts/NEP141":"1tjx0","./entities/poolParams":"eP0iK","./entities/poolList":"lU394","./entities/poolParamsP3":"3DkGx","./util/oracle":"8iDnh","./contracts/nft-structs":"d7k99","bn.js":"VopIn","./contracts/multipleCall":"khWvf","./entities/poolParamsNFT":"5iRbw","./util/animations/liquidityButton":"aY54o","./util/animations/new-confetti-button":"afsAb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ohc3m":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = this && this.__exportStar || function(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.keyStores = __importStar(require("./key_stores/browser-index"));
__exportStar(require("./common-index"), exports);
__exportStar(require("./browser-connect"), exports);
require("error-polyfill");

},{"./key_stores/browser-index":"aBfSM","./common-index":"gtZXS","./browser-connect":"7yTE6","error-polyfill":"2YFhR"}],"aBfSM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MergeKeyStore = exports.BrowserLocalStorageKeyStore = exports.InMemoryKeyStore = exports.KeyStore = void 0;
const keystore_1 = require("./keystore");
Object.defineProperty(exports, "KeyStore", {
    enumerable: true,
    get: function() {
        return keystore_1.KeyStore;
    }
});
const in_memory_key_store_1 = require("./in_memory_key_store");
Object.defineProperty(exports, "InMemoryKeyStore", {
    enumerable: true,
    get: function() {
        return in_memory_key_store_1.InMemoryKeyStore;
    }
});
const browser_local_storage_key_store_1 = require("./browser_local_storage_key_store");
Object.defineProperty(exports, "BrowserLocalStorageKeyStore", {
    enumerable: true,
    get: function() {
        return browser_local_storage_key_store_1.BrowserLocalStorageKeyStore;
    }
});
const merge_key_store_1 = require("./merge_key_store");
Object.defineProperty(exports, "MergeKeyStore", {
    enumerable: true,
    get: function() {
        return merge_key_store_1.MergeKeyStore;
    }
});

},{"./keystore":"5Moei","./in_memory_key_store":"fTfs7","./browser_local_storage_key_store":"l5Tuv","./merge_key_store":"kgqhu"}],"5Moei":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.KeyStore = void 0;
/**
 * Key store interface for `InMemorySigner`.
 */ class KeyStore {
}
exports.KeyStore = KeyStore;

},{}],"fTfs7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InMemoryKeyStore = void 0;
const keystore_1 = require("./keystore");
const key_pair_1 = require("../utils/key_pair");
/**
 * Simple in-memory keystore for testing purposes.
 */ class InMemoryKeyStore extends keystore_1.KeyStore {
    constructor(){
        super();
        this.keys = {};
    }
    /**
     * Sets an in-memory storage item
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @param accountId The NEAR account tied to the key pair
     * @param keyPair The key pair to store in local storage
     */ async setKey(networkId, accountId, keyPair) {
        this.keys[`${accountId}:${networkId}`] = keyPair.toString();
    }
    /**
     * Gets a key from in-memory storage
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @param accountId The NEAR account tied to the key pair
     * @returns {Promise<KeyPair>}
     */ async getKey(networkId, accountId) {
        const value = this.keys[`${accountId}:${networkId}`];
        if (!value) return null;
        return key_pair_1.KeyPair.fromString(value);
    }
    /**
     * Removes a key from in-memory storage
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @param accountId The NEAR account tied to the key pair
     */ async removeKey(networkId, accountId) {
        delete this.keys[`${accountId}:${networkId}`];
    }
    /**
     * Sets all in-memory keys to empty objects
     */ async clear() {
        this.keys = {};
    }
    /**
     * Get the network(s) from in-memory storage
     * @returns {Promise<string[]>}
     */ async getNetworks() {
        const result = new Set();
        Object.keys(this.keys).forEach((key)=>{
            const parts = key.split(":");
            result.add(parts[1]);
        });
        return Array.from(result.values());
    }
    /**
     * Gets the account(s) from in-memory storage
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @returns{Promise<string[]>}
     */ async getAccounts(networkId) {
        const result = new Array();
        Object.keys(this.keys).forEach((key)=>{
            const parts = key.split(":");
            if (parts[parts.length - 1] === networkId) result.push(parts.slice(0, parts.length - 1).join(":"));
        });
        return result;
    }
    toString() {
        return "InMemoryKeyStore";
    }
}
exports.InMemoryKeyStore = InMemoryKeyStore;

},{"./keystore":"5Moei","../utils/key_pair":"kBQFP"}],"kBQFP":[function(require,module,exports) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.KeyPairEd25519 = exports.KeyPair = exports.PublicKey = exports.KeyType = void 0;
const tweetnacl_1 = __importDefault(require("tweetnacl"));
const serialize_1 = require("./serialize");
const enums_1 = require("./enums");
/** All supported key types */ var KeyType;
(function(KeyType1) {
    KeyType1[KeyType1["ED25519"] = 0] = "ED25519";
})(KeyType = exports.KeyType || (exports.KeyType = {}));
function key_type_to_str(keyType) {
    switch(keyType){
        case KeyType.ED25519:
            return "ed25519";
        default:
            throw new Error(`Unknown key type ${keyType}`);
    }
}
function str_to_key_type(keyType) {
    switch(keyType.toLowerCase()){
        case "ed25519":
            return KeyType.ED25519;
        default:
            throw new Error(`Unknown key type ${keyType}`);
    }
}
/**
 * PublicKey representation that has type and bytes of the key.
 */ class PublicKey extends enums_1.Assignable {
    static from(value) {
        if (typeof value === "string") return PublicKey.fromString(value);
        return value;
    }
    static fromString(encodedKey) {
        const parts = encodedKey.split(":");
        if (parts.length === 1) return new PublicKey({
            keyType: KeyType.ED25519,
            data: serialize_1.base_decode(parts[0])
        });
        else if (parts.length === 2) return new PublicKey({
            keyType: str_to_key_type(parts[0]),
            data: serialize_1.base_decode(parts[1])
        });
        else throw new Error("Invalid encoded key format, must be <curve>:<encoded key>");
    }
    toString() {
        return `${key_type_to_str(this.keyType)}:${serialize_1.base_encode(this.data)}`;
    }
}
exports.PublicKey = PublicKey;
class KeyPair {
    /**
     * @param curve Name of elliptical curve, case-insensitive
     * @returns Random KeyPair based on the curve
     */ static fromRandom(curve) {
        switch(curve.toUpperCase()){
            case "ED25519":
                return KeyPairEd25519.fromRandom();
            default:
                throw new Error(`Unknown curve ${curve}`);
        }
    }
    static fromString(encodedKey) {
        const parts = encodedKey.split(":");
        if (parts.length === 1) return new KeyPairEd25519(parts[0]);
        else if (parts.length === 2) switch(parts[0].toUpperCase()){
            case "ED25519":
                return new KeyPairEd25519(parts[1]);
            default:
                throw new Error(`Unknown curve: ${parts[0]}`);
        }
        else throw new Error("Invalid encoded key format, must be <curve>:<encoded key>");
    }
}
exports.KeyPair = KeyPair;
/**
 * This class provides key pair functionality for Ed25519 curve:
 * generating key pairs, encoding key pairs, signing and verifying.
 */ class KeyPairEd25519 extends KeyPair {
    /**
     * Construct an instance of key pair given a secret key.
     * It's generally assumed that these are encoded in base58.
     * @param {string} secretKey
     */ constructor(secretKey){
        super();
        const keyPair = tweetnacl_1.default.sign.keyPair.fromSecretKey(serialize_1.base_decode(secretKey));
        this.publicKey = new PublicKey({
            keyType: KeyType.ED25519,
            data: keyPair.publicKey
        });
        this.secretKey = secretKey;
    }
    /**
     * Generate a new random keypair.
     * @example
     * const keyRandom = KeyPair.fromRandom();
     * keyRandom.publicKey
     * // returns [PUBLIC_KEY]
     *
     * keyRandom.secretKey
     * // returns [SECRET_KEY]
     */ static fromRandom() {
        const newKeyPair = tweetnacl_1.default.sign.keyPair();
        return new KeyPairEd25519(serialize_1.base_encode(newKeyPair.secretKey));
    }
    sign(message) {
        const signature = tweetnacl_1.default.sign.detached(message, serialize_1.base_decode(this.secretKey));
        return {
            signature,
            publicKey: this.publicKey
        };
    }
    verify(message, signature) {
        return tweetnacl_1.default.sign.detached.verify(message, signature, this.publicKey.data);
    }
    toString() {
        return `ed25519:${this.secretKey}`;
    }
    getPublicKey() {
        return this.publicKey;
    }
}
exports.KeyPairEd25519 = KeyPairEd25519;

},{"tweetnacl":"3J9rh","./serialize":"dUoM9","./enums":"kjmPo"}],"3J9rh":[function(require,module,exports) {
(function(nacl) {
    "use strict";
    // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
    // Public domain.
    //
    // Implementation derived from TweetNaCl version 20140427.
    // See for details: http://tweetnacl.cr.yp.to/
    var gf = function(init) {
        var i, r = new Float64Array(16);
        if (init) for(i = 0; i < init.length; i++)r[i] = init[i];
        return r;
    };
    //  Pluggable, initialized in high-level API below.
    var randombytes = function() {
        throw new Error("no PRNG");
    };
    var _0 = new Uint8Array(16);
    var _9 = new Uint8Array(32);
    _9[0] = 9;
    var gf0 = gf(), gf1 = gf([
        1
    ]), _121665 = gf([
        0xdb41,
        1
    ]), D = gf([
        0x78a3,
        0x1359,
        0x4dca,
        0x75eb,
        0xd8ab,
        0x4141,
        0x0a4d,
        0x0070,
        0xe898,
        0x7779,
        0x4079,
        0x8cc7,
        0xfe73,
        0x2b6f,
        0x6cee,
        0x5203
    ]), D2 = gf([
        0xf159,
        0x26b2,
        0x9b94,
        0xebd6,
        0xb156,
        0x8283,
        0x149a,
        0x00e0,
        0xd130,
        0xeef3,
        0x80f2,
        0x198e,
        0xfce7,
        0x56df,
        0xd9dc,
        0x2406
    ]), X = gf([
        0xd51a,
        0x8f25,
        0x2d60,
        0xc956,
        0xa7b2,
        0x9525,
        0xc760,
        0x692c,
        0xdc5c,
        0xfdd6,
        0xe231,
        0xc0a4,
        0x53fe,
        0xcd6e,
        0x36d3,
        0x2169
    ]), Y = gf([
        0x6658,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666
    ]), I = gf([
        0xa0b0,
        0x4a0e,
        0x1b27,
        0xc4ee,
        0xe478,
        0xad2f,
        0x1806,
        0x2f43,
        0xd7a7,
        0x3dfb,
        0x0099,
        0x2b4d,
        0xdf0b,
        0x4fc1,
        0x2480,
        0x2b83
    ]);
    function ts64(x, i, h, l) {
        x[i] = h >> 24 & 0xff;
        x[i + 1] = h >> 16 & 0xff;
        x[i + 2] = h >> 8 & 0xff;
        x[i + 3] = h & 0xff;
        x[i + 4] = l >> 24 & 0xff;
        x[i + 5] = l >> 16 & 0xff;
        x[i + 6] = l >> 8 & 0xff;
        x[i + 7] = l & 0xff;
    }
    function vn(x, xi, y, yi, n) {
        var i, d = 0;
        for(i = 0; i < n; i++)d |= x[xi + i] ^ y[yi + i];
        return (1 & d - 1 >>> 8) - 1;
    }
    function crypto_verify_16(x, xi, y, yi) {
        return vn(x, xi, y, yi, 16);
    }
    function crypto_verify_32(x, xi, y, yi) {
        return vn(x, xi, y, yi, 32);
    }
    function core_salsa20(o, p, k, c) {
        var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24, j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24, j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24, j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24, j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24, j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24, j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24, j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24, j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24, j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24, j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24, j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24, j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24, j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24, j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24, j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
        for(var i = 0; i < 20; i += 2){
            u = x0 + x12 | 0;
            x4 ^= u << 7 | u >>> 25;
            u = x4 + x0 | 0;
            x8 ^= u << 9 | u >>> 23;
            u = x8 + x4 | 0;
            x12 ^= u << 13 | u >>> 19;
            u = x12 + x8 | 0;
            x0 ^= u << 18 | u >>> 14;
            u = x5 + x1 | 0;
            x9 ^= u << 7 | u >>> 25;
            u = x9 + x5 | 0;
            x13 ^= u << 9 | u >>> 23;
            u = x13 + x9 | 0;
            x1 ^= u << 13 | u >>> 19;
            u = x1 + x13 | 0;
            x5 ^= u << 18 | u >>> 14;
            u = x10 + x6 | 0;
            x14 ^= u << 7 | u >>> 25;
            u = x14 + x10 | 0;
            x2 ^= u << 9 | u >>> 23;
            u = x2 + x14 | 0;
            x6 ^= u << 13 | u >>> 19;
            u = x6 + x2 | 0;
            x10 ^= u << 18 | u >>> 14;
            u = x15 + x11 | 0;
            x3 ^= u << 7 | u >>> 25;
            u = x3 + x15 | 0;
            x7 ^= u << 9 | u >>> 23;
            u = x7 + x3 | 0;
            x11 ^= u << 13 | u >>> 19;
            u = x11 + x7 | 0;
            x15 ^= u << 18 | u >>> 14;
            u = x0 + x3 | 0;
            x1 ^= u << 7 | u >>> 25;
            u = x1 + x0 | 0;
            x2 ^= u << 9 | u >>> 23;
            u = x2 + x1 | 0;
            x3 ^= u << 13 | u >>> 19;
            u = x3 + x2 | 0;
            x0 ^= u << 18 | u >>> 14;
            u = x5 + x4 | 0;
            x6 ^= u << 7 | u >>> 25;
            u = x6 + x5 | 0;
            x7 ^= u << 9 | u >>> 23;
            u = x7 + x6 | 0;
            x4 ^= u << 13 | u >>> 19;
            u = x4 + x7 | 0;
            x5 ^= u << 18 | u >>> 14;
            u = x10 + x9 | 0;
            x11 ^= u << 7 | u >>> 25;
            u = x11 + x10 | 0;
            x8 ^= u << 9 | u >>> 23;
            u = x8 + x11 | 0;
            x9 ^= u << 13 | u >>> 19;
            u = x9 + x8 | 0;
            x10 ^= u << 18 | u >>> 14;
            u = x15 + x14 | 0;
            x12 ^= u << 7 | u >>> 25;
            u = x12 + x15 | 0;
            x13 ^= u << 9 | u >>> 23;
            u = x13 + x12 | 0;
            x14 ^= u << 13 | u >>> 19;
            u = x14 + x13 | 0;
            x15 ^= u << 18 | u >>> 14;
        }
        x0 = x0 + j0 | 0;
        x1 = x1 + j1 | 0;
        x2 = x2 + j2 | 0;
        x3 = x3 + j3 | 0;
        x4 = x4 + j4 | 0;
        x5 = x5 + j5 | 0;
        x6 = x6 + j6 | 0;
        x7 = x7 + j7 | 0;
        x8 = x8 + j8 | 0;
        x9 = x9 + j9 | 0;
        x10 = x10 + j10 | 0;
        x11 = x11 + j11 | 0;
        x12 = x12 + j12 | 0;
        x13 = x13 + j13 | 0;
        x14 = x14 + j14 | 0;
        x15 = x15 + j15 | 0;
        o[0] = x0 >>> 0 & 0xff;
        o[1] = x0 >>> 8 & 0xff;
        o[2] = x0 >>> 16 & 0xff;
        o[3] = x0 >>> 24 & 0xff;
        o[4] = x1 >>> 0 & 0xff;
        o[5] = x1 >>> 8 & 0xff;
        o[6] = x1 >>> 16 & 0xff;
        o[7] = x1 >>> 24 & 0xff;
        o[8] = x2 >>> 0 & 0xff;
        o[9] = x2 >>> 8 & 0xff;
        o[10] = x2 >>> 16 & 0xff;
        o[11] = x2 >>> 24 & 0xff;
        o[12] = x3 >>> 0 & 0xff;
        o[13] = x3 >>> 8 & 0xff;
        o[14] = x3 >>> 16 & 0xff;
        o[15] = x3 >>> 24 & 0xff;
        o[16] = x4 >>> 0 & 0xff;
        o[17] = x4 >>> 8 & 0xff;
        o[18] = x4 >>> 16 & 0xff;
        o[19] = x4 >>> 24 & 0xff;
        o[20] = x5 >>> 0 & 0xff;
        o[21] = x5 >>> 8 & 0xff;
        o[22] = x5 >>> 16 & 0xff;
        o[23] = x5 >>> 24 & 0xff;
        o[24] = x6 >>> 0 & 0xff;
        o[25] = x6 >>> 8 & 0xff;
        o[26] = x6 >>> 16 & 0xff;
        o[27] = x6 >>> 24 & 0xff;
        o[28] = x7 >>> 0 & 0xff;
        o[29] = x7 >>> 8 & 0xff;
        o[30] = x7 >>> 16 & 0xff;
        o[31] = x7 >>> 24 & 0xff;
        o[32] = x8 >>> 0 & 0xff;
        o[33] = x8 >>> 8 & 0xff;
        o[34] = x8 >>> 16 & 0xff;
        o[35] = x8 >>> 24 & 0xff;
        o[36] = x9 >>> 0 & 0xff;
        o[37] = x9 >>> 8 & 0xff;
        o[38] = x9 >>> 16 & 0xff;
        o[39] = x9 >>> 24 & 0xff;
        o[40] = x10 >>> 0 & 0xff;
        o[41] = x10 >>> 8 & 0xff;
        o[42] = x10 >>> 16 & 0xff;
        o[43] = x10 >>> 24 & 0xff;
        o[44] = x11 >>> 0 & 0xff;
        o[45] = x11 >>> 8 & 0xff;
        o[46] = x11 >>> 16 & 0xff;
        o[47] = x11 >>> 24 & 0xff;
        o[48] = x12 >>> 0 & 0xff;
        o[49] = x12 >>> 8 & 0xff;
        o[50] = x12 >>> 16 & 0xff;
        o[51] = x12 >>> 24 & 0xff;
        o[52] = x13 >>> 0 & 0xff;
        o[53] = x13 >>> 8 & 0xff;
        o[54] = x13 >>> 16 & 0xff;
        o[55] = x13 >>> 24 & 0xff;
        o[56] = x14 >>> 0 & 0xff;
        o[57] = x14 >>> 8 & 0xff;
        o[58] = x14 >>> 16 & 0xff;
        o[59] = x14 >>> 24 & 0xff;
        o[60] = x15 >>> 0 & 0xff;
        o[61] = x15 >>> 8 & 0xff;
        o[62] = x15 >>> 16 & 0xff;
        o[63] = x15 >>> 24 & 0xff;
    }
    function core_hsalsa20(o, p, k, c) {
        var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24, j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24, j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24, j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24, j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24, j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24, j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24, j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24, j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24, j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24, j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24, j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24, j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24, j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24, j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24, j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
        for(var i = 0; i < 20; i += 2){
            u = x0 + x12 | 0;
            x4 ^= u << 7 | u >>> 25;
            u = x4 + x0 | 0;
            x8 ^= u << 9 | u >>> 23;
            u = x8 + x4 | 0;
            x12 ^= u << 13 | u >>> 19;
            u = x12 + x8 | 0;
            x0 ^= u << 18 | u >>> 14;
            u = x5 + x1 | 0;
            x9 ^= u << 7 | u >>> 25;
            u = x9 + x5 | 0;
            x13 ^= u << 9 | u >>> 23;
            u = x13 + x9 | 0;
            x1 ^= u << 13 | u >>> 19;
            u = x1 + x13 | 0;
            x5 ^= u << 18 | u >>> 14;
            u = x10 + x6 | 0;
            x14 ^= u << 7 | u >>> 25;
            u = x14 + x10 | 0;
            x2 ^= u << 9 | u >>> 23;
            u = x2 + x14 | 0;
            x6 ^= u << 13 | u >>> 19;
            u = x6 + x2 | 0;
            x10 ^= u << 18 | u >>> 14;
            u = x15 + x11 | 0;
            x3 ^= u << 7 | u >>> 25;
            u = x3 + x15 | 0;
            x7 ^= u << 9 | u >>> 23;
            u = x7 + x3 | 0;
            x11 ^= u << 13 | u >>> 19;
            u = x11 + x7 | 0;
            x15 ^= u << 18 | u >>> 14;
            u = x0 + x3 | 0;
            x1 ^= u << 7 | u >>> 25;
            u = x1 + x0 | 0;
            x2 ^= u << 9 | u >>> 23;
            u = x2 + x1 | 0;
            x3 ^= u << 13 | u >>> 19;
            u = x3 + x2 | 0;
            x0 ^= u << 18 | u >>> 14;
            u = x5 + x4 | 0;
            x6 ^= u << 7 | u >>> 25;
            u = x6 + x5 | 0;
            x7 ^= u << 9 | u >>> 23;
            u = x7 + x6 | 0;
            x4 ^= u << 13 | u >>> 19;
            u = x4 + x7 | 0;
            x5 ^= u << 18 | u >>> 14;
            u = x10 + x9 | 0;
            x11 ^= u << 7 | u >>> 25;
            u = x11 + x10 | 0;
            x8 ^= u << 9 | u >>> 23;
            u = x8 + x11 | 0;
            x9 ^= u << 13 | u >>> 19;
            u = x9 + x8 | 0;
            x10 ^= u << 18 | u >>> 14;
            u = x15 + x14 | 0;
            x12 ^= u << 7 | u >>> 25;
            u = x12 + x15 | 0;
            x13 ^= u << 9 | u >>> 23;
            u = x13 + x12 | 0;
            x14 ^= u << 13 | u >>> 19;
            u = x14 + x13 | 0;
            x15 ^= u << 18 | u >>> 14;
        }
        o[0] = x0 >>> 0 & 0xff;
        o[1] = x0 >>> 8 & 0xff;
        o[2] = x0 >>> 16 & 0xff;
        o[3] = x0 >>> 24 & 0xff;
        o[4] = x5 >>> 0 & 0xff;
        o[5] = x5 >>> 8 & 0xff;
        o[6] = x5 >>> 16 & 0xff;
        o[7] = x5 >>> 24 & 0xff;
        o[8] = x10 >>> 0 & 0xff;
        o[9] = x10 >>> 8 & 0xff;
        o[10] = x10 >>> 16 & 0xff;
        o[11] = x10 >>> 24 & 0xff;
        o[12] = x15 >>> 0 & 0xff;
        o[13] = x15 >>> 8 & 0xff;
        o[14] = x15 >>> 16 & 0xff;
        o[15] = x15 >>> 24 & 0xff;
        o[16] = x6 >>> 0 & 0xff;
        o[17] = x6 >>> 8 & 0xff;
        o[18] = x6 >>> 16 & 0xff;
        o[19] = x6 >>> 24 & 0xff;
        o[20] = x7 >>> 0 & 0xff;
        o[21] = x7 >>> 8 & 0xff;
        o[22] = x7 >>> 16 & 0xff;
        o[23] = x7 >>> 24 & 0xff;
        o[24] = x8 >>> 0 & 0xff;
        o[25] = x8 >>> 8 & 0xff;
        o[26] = x8 >>> 16 & 0xff;
        o[27] = x8 >>> 24 & 0xff;
        o[28] = x9 >>> 0 & 0xff;
        o[29] = x9 >>> 8 & 0xff;
        o[30] = x9 >>> 16 & 0xff;
        o[31] = x9 >>> 24 & 0xff;
    }
    function crypto_core_salsa20(out, inp, k, c) {
        core_salsa20(out, inp, k, c);
    }
    function crypto_core_hsalsa20(out, inp, k, c) {
        core_hsalsa20(out, inp, k, c);
    }
    var sigma = new Uint8Array([
        101,
        120,
        112,
        97,
        110,
        100,
        32,
        51,
        50,
        45,
        98,
        121,
        116,
        101,
        32,
        107
    ]);
    // "expand 32-byte k"
    function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i;
        for(i = 0; i < 16; i++)z[i] = 0;
        for(i = 0; i < 8; i++)z[i] = n[i];
        while(b >= 64){
            crypto_core_salsa20(x, z, k, sigma);
            for(i = 0; i < 64; i++)c[cpos + i] = m[mpos + i] ^ x[i];
            u = 1;
            for(i = 8; i < 16; i++){
                u = u + (z[i] & 0xff) | 0;
                z[i] = u & 0xff;
                u >>>= 8;
            }
            b -= 64;
            cpos += 64;
            mpos += 64;
        }
        if (b > 0) {
            crypto_core_salsa20(x, z, k, sigma);
            for(i = 0; i < b; i++)c[cpos + i] = m[mpos + i] ^ x[i];
        }
        return 0;
    }
    function crypto_stream_salsa20(c, cpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i;
        for(i = 0; i < 16; i++)z[i] = 0;
        for(i = 0; i < 8; i++)z[i] = n[i];
        while(b >= 64){
            crypto_core_salsa20(x, z, k, sigma);
            for(i = 0; i < 64; i++)c[cpos + i] = x[i];
            u = 1;
            for(i = 8; i < 16; i++){
                u = u + (z[i] & 0xff) | 0;
                z[i] = u & 0xff;
                u >>>= 8;
            }
            b -= 64;
            cpos += 64;
        }
        if (b > 0) {
            crypto_core_salsa20(x, z, k, sigma);
            for(i = 0; i < b; i++)c[cpos + i] = x[i];
        }
        return 0;
    }
    function crypto_stream(c, cpos, d, n, k) {
        var s = new Uint8Array(32);
        crypto_core_hsalsa20(s, n, k, sigma);
        var sn = new Uint8Array(8);
        for(var i = 0; i < 8; i++)sn[i] = n[i + 16];
        return crypto_stream_salsa20(c, cpos, d, sn, s);
    }
    function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
        var s = new Uint8Array(32);
        crypto_core_hsalsa20(s, n, k, sigma);
        var sn = new Uint8Array(8);
        for(var i = 0; i < 8; i++)sn[i] = n[i + 16];
        return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
    }
    /*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/ var poly1305 = function(key) {
        this.buffer = new Uint8Array(16);
        this.r = new Uint16Array(10);
        this.h = new Uint16Array(10);
        this.pad = new Uint16Array(8);
        this.leftover = 0;
        this.fin = 0;
        var t0, t1, t2, t3, t4, t5, t6, t7;
        t0 = key[0] & 0xff | (key[1] & 0xff) << 8;
        this.r[0] = t0 & 0x1fff;
        t1 = key[2] & 0xff | (key[3] & 0xff) << 8;
        this.r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;
        t2 = key[4] & 0xff | (key[5] & 0xff) << 8;
        this.r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;
        t3 = key[6] & 0xff | (key[7] & 0xff) << 8;
        this.r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;
        t4 = key[8] & 0xff | (key[9] & 0xff) << 8;
        this.r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;
        this.r[5] = t4 >>> 1 & 0x1ffe;
        t5 = key[10] & 0xff | (key[11] & 0xff) << 8;
        this.r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;
        t6 = key[12] & 0xff | (key[13] & 0xff) << 8;
        this.r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;
        t7 = key[14] & 0xff | (key[15] & 0xff) << 8;
        this.r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;
        this.r[9] = t7 >>> 5 & 0x007f;
        this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
        this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
        this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
        this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
        this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
        this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
        this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
        this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
    };
    poly1305.prototype.blocks = function(m, mpos, bytes) {
        var hibit = this.fin ? 0 : 2048;
        var t0, t1, t2, t3, t4, t5, t6, t7, c;
        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
        var h0 = this.h[0], h1 = this.h[1], h2 = this.h[2], h3 = this.h[3], h4 = this.h[4], h5 = this.h[5], h6 = this.h[6], h7 = this.h[7], h8 = this.h[8], h9 = this.h[9];
        var r0 = this.r[0], r1 = this.r[1], r2 = this.r[2], r3 = this.r[3], r4 = this.r[4], r5 = this.r[5], r6 = this.r[6], r7 = this.r[7], r8 = this.r[8], r9 = this.r[9];
        while(bytes >= 16){
            t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8;
            h0 += t0 & 0x1fff;
            t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8;
            h1 += (t0 >>> 13 | t1 << 3) & 0x1fff;
            t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8;
            h2 += (t1 >>> 10 | t2 << 6) & 0x1fff;
            t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8;
            h3 += (t2 >>> 7 | t3 << 9) & 0x1fff;
            t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8;
            h4 += (t3 >>> 4 | t4 << 12) & 0x1fff;
            h5 += t4 >>> 1 & 0x1fff;
            t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8;
            h6 += (t4 >>> 14 | t5 << 2) & 0x1fff;
            t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8;
            h7 += (t5 >>> 11 | t6 << 5) & 0x1fff;
            t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8;
            h8 += (t6 >>> 8 | t7 << 8) & 0x1fff;
            h9 += t7 >>> 5 | hibit;
            c = 0;
            d0 = c;
            d0 += h0 * r0;
            d0 += h1 * (5 * r9);
            d0 += h2 * (5 * r8);
            d0 += h3 * (5 * r7);
            d0 += h4 * (5 * r6);
            c = d0 >>> 13;
            d0 &= 0x1fff;
            d0 += h5 * (5 * r5);
            d0 += h6 * (5 * r4);
            d0 += h7 * (5 * r3);
            d0 += h8 * (5 * r2);
            d0 += h9 * (5 * r1);
            c += d0 >>> 13;
            d0 &= 0x1fff;
            d1 = c;
            d1 += h0 * r1;
            d1 += h1 * r0;
            d1 += h2 * (5 * r9);
            d1 += h3 * (5 * r8);
            d1 += h4 * (5 * r7);
            c = d1 >>> 13;
            d1 &= 0x1fff;
            d1 += h5 * (5 * r6);
            d1 += h6 * (5 * r5);
            d1 += h7 * (5 * r4);
            d1 += h8 * (5 * r3);
            d1 += h9 * (5 * r2);
            c += d1 >>> 13;
            d1 &= 0x1fff;
            d2 = c;
            d2 += h0 * r2;
            d2 += h1 * r1;
            d2 += h2 * r0;
            d2 += h3 * (5 * r9);
            d2 += h4 * (5 * r8);
            c = d2 >>> 13;
            d2 &= 0x1fff;
            d2 += h5 * (5 * r7);
            d2 += h6 * (5 * r6);
            d2 += h7 * (5 * r5);
            d2 += h8 * (5 * r4);
            d2 += h9 * (5 * r3);
            c += d2 >>> 13;
            d2 &= 0x1fff;
            d3 = c;
            d3 += h0 * r3;
            d3 += h1 * r2;
            d3 += h2 * r1;
            d3 += h3 * r0;
            d3 += h4 * (5 * r9);
            c = d3 >>> 13;
            d3 &= 0x1fff;
            d3 += h5 * (5 * r8);
            d3 += h6 * (5 * r7);
            d3 += h7 * (5 * r6);
            d3 += h8 * (5 * r5);
            d3 += h9 * (5 * r4);
            c += d3 >>> 13;
            d3 &= 0x1fff;
            d4 = c;
            d4 += h0 * r4;
            d4 += h1 * r3;
            d4 += h2 * r2;
            d4 += h3 * r1;
            d4 += h4 * r0;
            c = d4 >>> 13;
            d4 &= 0x1fff;
            d4 += h5 * (5 * r9);
            d4 += h6 * (5 * r8);
            d4 += h7 * (5 * r7);
            d4 += h8 * (5 * r6);
            d4 += h9 * (5 * r5);
            c += d4 >>> 13;
            d4 &= 0x1fff;
            d5 = c;
            d5 += h0 * r5;
            d5 += h1 * r4;
            d5 += h2 * r3;
            d5 += h3 * r2;
            d5 += h4 * r1;
            c = d5 >>> 13;
            d5 &= 0x1fff;
            d5 += h5 * r0;
            d5 += h6 * (5 * r9);
            d5 += h7 * (5 * r8);
            d5 += h8 * (5 * r7);
            d5 += h9 * (5 * r6);
            c += d5 >>> 13;
            d5 &= 0x1fff;
            d6 = c;
            d6 += h0 * r6;
            d6 += h1 * r5;
            d6 += h2 * r4;
            d6 += h3 * r3;
            d6 += h4 * r2;
            c = d6 >>> 13;
            d6 &= 0x1fff;
            d6 += h5 * r1;
            d6 += h6 * r0;
            d6 += h7 * (5 * r9);
            d6 += h8 * (5 * r8);
            d6 += h9 * (5 * r7);
            c += d6 >>> 13;
            d6 &= 0x1fff;
            d7 = c;
            d7 += h0 * r7;
            d7 += h1 * r6;
            d7 += h2 * r5;
            d7 += h3 * r4;
            d7 += h4 * r3;
            c = d7 >>> 13;
            d7 &= 0x1fff;
            d7 += h5 * r2;
            d7 += h6 * r1;
            d7 += h7 * r0;
            d7 += h8 * (5 * r9);
            d7 += h9 * (5 * r8);
            c += d7 >>> 13;
            d7 &= 0x1fff;
            d8 = c;
            d8 += h0 * r8;
            d8 += h1 * r7;
            d8 += h2 * r6;
            d8 += h3 * r5;
            d8 += h4 * r4;
            c = d8 >>> 13;
            d8 &= 0x1fff;
            d8 += h5 * r3;
            d8 += h6 * r2;
            d8 += h7 * r1;
            d8 += h8 * r0;
            d8 += h9 * (5 * r9);
            c += d8 >>> 13;
            d8 &= 0x1fff;
            d9 = c;
            d9 += h0 * r9;
            d9 += h1 * r8;
            d9 += h2 * r7;
            d9 += h3 * r6;
            d9 += h4 * r5;
            c = d9 >>> 13;
            d9 &= 0x1fff;
            d9 += h5 * r4;
            d9 += h6 * r3;
            d9 += h7 * r2;
            d9 += h8 * r1;
            d9 += h9 * r0;
            c += d9 >>> 13;
            d9 &= 0x1fff;
            c = (c << 2) + c | 0;
            c = c + d0 | 0;
            d0 = c & 0x1fff;
            c = c >>> 13;
            d1 += c;
            h0 = d0;
            h1 = d1;
            h2 = d2;
            h3 = d3;
            h4 = d4;
            h5 = d5;
            h6 = d6;
            h7 = d7;
            h8 = d8;
            h9 = d9;
            mpos += 16;
            bytes -= 16;
        }
        this.h[0] = h0;
        this.h[1] = h1;
        this.h[2] = h2;
        this.h[3] = h3;
        this.h[4] = h4;
        this.h[5] = h5;
        this.h[6] = h6;
        this.h[7] = h7;
        this.h[8] = h8;
        this.h[9] = h9;
    };
    poly1305.prototype.finish = function(mac, macpos) {
        var g = new Uint16Array(10);
        var c, mask, f, i;
        if (this.leftover) {
            i = this.leftover;
            this.buffer[i++] = 1;
            for(; i < 16; i++)this.buffer[i] = 0;
            this.fin = 1;
            this.blocks(this.buffer, 0, 16);
        }
        c = this.h[1] >>> 13;
        this.h[1] &= 0x1fff;
        for(i = 2; i < 10; i++){
            this.h[i] += c;
            c = this.h[i] >>> 13;
            this.h[i] &= 0x1fff;
        }
        this.h[0] += c * 5;
        c = this.h[0] >>> 13;
        this.h[0] &= 0x1fff;
        this.h[1] += c;
        c = this.h[1] >>> 13;
        this.h[1] &= 0x1fff;
        this.h[2] += c;
        g[0] = this.h[0] + 5;
        c = g[0] >>> 13;
        g[0] &= 0x1fff;
        for(i = 1; i < 10; i++){
            g[i] = this.h[i] + c;
            c = g[i] >>> 13;
            g[i] &= 0x1fff;
        }
        g[9] -= 8192;
        mask = (c ^ 1) - 1;
        for(i = 0; i < 10; i++)g[i] &= mask;
        mask = ~mask;
        for(i = 0; i < 10; i++)this.h[i] = this.h[i] & mask | g[i];
        this.h[0] = (this.h[0] | this.h[1] << 13) & 0xffff;
        this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 0xffff;
        this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 0xffff;
        this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 0xffff;
        this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 0xffff;
        this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 0xffff;
        this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 0xffff;
        this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 0xffff;
        f = this.h[0] + this.pad[0];
        this.h[0] = f & 0xffff;
        for(i = 1; i < 8; i++){
            f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;
            this.h[i] = f & 0xffff;
        }
        mac[macpos + 0] = this.h[0] >>> 0 & 0xff;
        mac[macpos + 1] = this.h[0] >>> 8 & 0xff;
        mac[macpos + 2] = this.h[1] >>> 0 & 0xff;
        mac[macpos + 3] = this.h[1] >>> 8 & 0xff;
        mac[macpos + 4] = this.h[2] >>> 0 & 0xff;
        mac[macpos + 5] = this.h[2] >>> 8 & 0xff;
        mac[macpos + 6] = this.h[3] >>> 0 & 0xff;
        mac[macpos + 7] = this.h[3] >>> 8 & 0xff;
        mac[macpos + 8] = this.h[4] >>> 0 & 0xff;
        mac[macpos + 9] = this.h[4] >>> 8 & 0xff;
        mac[macpos + 10] = this.h[5] >>> 0 & 0xff;
        mac[macpos + 11] = this.h[5] >>> 8 & 0xff;
        mac[macpos + 12] = this.h[6] >>> 0 & 0xff;
        mac[macpos + 13] = this.h[6] >>> 8 & 0xff;
        mac[macpos + 14] = this.h[7] >>> 0 & 0xff;
        mac[macpos + 15] = this.h[7] >>> 8 & 0xff;
    };
    poly1305.prototype.update = function(m, mpos, bytes) {
        var i, want;
        if (this.leftover) {
            want = 16 - this.leftover;
            if (want > bytes) want = bytes;
            for(i = 0; i < want; i++)this.buffer[this.leftover + i] = m[mpos + i];
            bytes -= want;
            mpos += want;
            this.leftover += want;
            if (this.leftover < 16) return;
            this.blocks(this.buffer, 0, 16);
            this.leftover = 0;
        }
        if (bytes >= 16) {
            want = bytes - bytes % 16;
            this.blocks(m, mpos, want);
            mpos += want;
            bytes -= want;
        }
        if (bytes) {
            for(i = 0; i < bytes; i++)this.buffer[this.leftover + i] = m[mpos + i];
            this.leftover += bytes;
        }
    };
    function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
        var s = new poly1305(k);
        s.update(m, mpos, n);
        s.finish(out, outpos);
        return 0;
    }
    function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
        var x = new Uint8Array(16);
        crypto_onetimeauth(x, 0, m, mpos, n, k);
        return crypto_verify_16(h, hpos, x, 0);
    }
    function crypto_secretbox(c, m, d, n, k) {
        var i;
        if (d < 32) return -1;
        crypto_stream_xor(c, 0, m, 0, d, n, k);
        crypto_onetimeauth(c, 16, c, 32, d - 32, c);
        for(i = 0; i < 16; i++)c[i] = 0;
        return 0;
    }
    function crypto_secretbox_open(m, c, d, n, k) {
        var i;
        var x = new Uint8Array(32);
        if (d < 32) return -1;
        crypto_stream(x, 0, 32, n, k);
        if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
        crypto_stream_xor(m, 0, c, 0, d, n, k);
        for(i = 0; i < 32; i++)m[i] = 0;
        return 0;
    }
    function set25519(r, a) {
        var i;
        for(i = 0; i < 16; i++)r[i] = a[i] | 0;
    }
    function car25519(o) {
        var i, v, c = 1;
        for(i = 0; i < 16; i++){
            v = o[i] + c + 65535;
            c = Math.floor(v / 65536);
            o[i] = v - c * 65536;
        }
        o[0] += c - 1 + 37 * (c - 1);
    }
    function sel25519(p, q, b) {
        var t, c = ~(b - 1);
        for(var i = 0; i < 16; i++){
            t = c & (p[i] ^ q[i]);
            p[i] ^= t;
            q[i] ^= t;
        }
    }
    function pack25519(o, n) {
        var i, j, b;
        var m = gf(), t = gf();
        for(i = 0; i < 16; i++)t[i] = n[i];
        car25519(t);
        car25519(t);
        car25519(t);
        for(j = 0; j < 2; j++){
            m[0] = t[0] - 0xffed;
            for(i = 1; i < 15; i++){
                m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);
                m[i - 1] &= 0xffff;
            }
            m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);
            b = m[15] >> 16 & 1;
            m[14] &= 0xffff;
            sel25519(t, m, 1 - b);
        }
        for(i = 0; i < 16; i++){
            o[2 * i] = t[i] & 0xff;
            o[2 * i + 1] = t[i] >> 8;
        }
    }
    function neq25519(a, b) {
        var c = new Uint8Array(32), d = new Uint8Array(32);
        pack25519(c, a);
        pack25519(d, b);
        return crypto_verify_32(c, 0, d, 0);
    }
    function par25519(a) {
        var d = new Uint8Array(32);
        pack25519(d, a);
        return d[0] & 1;
    }
    function unpack25519(o, n) {
        var i;
        for(i = 0; i < 16; i++)o[i] = n[2 * i] + (n[2 * i + 1] << 8);
        o[15] &= 0x7fff;
    }
    function A(o, a, b) {
        for(var i = 0; i < 16; i++)o[i] = a[i] + b[i];
    }
    function Z(o, a, b) {
        for(var i = 0; i < 16; i++)o[i] = a[i] - b[i];
    }
    function M(o, a, b) {
        var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
        v = a[0];
        t0 += v * b0;
        t1 += v * b1;
        t2 += v * b2;
        t3 += v * b3;
        t4 += v * b4;
        t5 += v * b5;
        t6 += v * b6;
        t7 += v * b7;
        t8 += v * b8;
        t9 += v * b9;
        t10 += v * b10;
        t11 += v * b11;
        t12 += v * b12;
        t13 += v * b13;
        t14 += v * b14;
        t15 += v * b15;
        v = a[1];
        t1 += v * b0;
        t2 += v * b1;
        t3 += v * b2;
        t4 += v * b3;
        t5 += v * b4;
        t6 += v * b5;
        t7 += v * b6;
        t8 += v * b7;
        t9 += v * b8;
        t10 += v * b9;
        t11 += v * b10;
        t12 += v * b11;
        t13 += v * b12;
        t14 += v * b13;
        t15 += v * b14;
        t16 += v * b15;
        v = a[2];
        t2 += v * b0;
        t3 += v * b1;
        t4 += v * b2;
        t5 += v * b3;
        t6 += v * b4;
        t7 += v * b5;
        t8 += v * b6;
        t9 += v * b7;
        t10 += v * b8;
        t11 += v * b9;
        t12 += v * b10;
        t13 += v * b11;
        t14 += v * b12;
        t15 += v * b13;
        t16 += v * b14;
        t17 += v * b15;
        v = a[3];
        t3 += v * b0;
        t4 += v * b1;
        t5 += v * b2;
        t6 += v * b3;
        t7 += v * b4;
        t8 += v * b5;
        t9 += v * b6;
        t10 += v * b7;
        t11 += v * b8;
        t12 += v * b9;
        t13 += v * b10;
        t14 += v * b11;
        t15 += v * b12;
        t16 += v * b13;
        t17 += v * b14;
        t18 += v * b15;
        v = a[4];
        t4 += v * b0;
        t5 += v * b1;
        t6 += v * b2;
        t7 += v * b3;
        t8 += v * b4;
        t9 += v * b5;
        t10 += v * b6;
        t11 += v * b7;
        t12 += v * b8;
        t13 += v * b9;
        t14 += v * b10;
        t15 += v * b11;
        t16 += v * b12;
        t17 += v * b13;
        t18 += v * b14;
        t19 += v * b15;
        v = a[5];
        t5 += v * b0;
        t6 += v * b1;
        t7 += v * b2;
        t8 += v * b3;
        t9 += v * b4;
        t10 += v * b5;
        t11 += v * b6;
        t12 += v * b7;
        t13 += v * b8;
        t14 += v * b9;
        t15 += v * b10;
        t16 += v * b11;
        t17 += v * b12;
        t18 += v * b13;
        t19 += v * b14;
        t20 += v * b15;
        v = a[6];
        t6 += v * b0;
        t7 += v * b1;
        t8 += v * b2;
        t9 += v * b3;
        t10 += v * b4;
        t11 += v * b5;
        t12 += v * b6;
        t13 += v * b7;
        t14 += v * b8;
        t15 += v * b9;
        t16 += v * b10;
        t17 += v * b11;
        t18 += v * b12;
        t19 += v * b13;
        t20 += v * b14;
        t21 += v * b15;
        v = a[7];
        t7 += v * b0;
        t8 += v * b1;
        t9 += v * b2;
        t10 += v * b3;
        t11 += v * b4;
        t12 += v * b5;
        t13 += v * b6;
        t14 += v * b7;
        t15 += v * b8;
        t16 += v * b9;
        t17 += v * b10;
        t18 += v * b11;
        t19 += v * b12;
        t20 += v * b13;
        t21 += v * b14;
        t22 += v * b15;
        v = a[8];
        t8 += v * b0;
        t9 += v * b1;
        t10 += v * b2;
        t11 += v * b3;
        t12 += v * b4;
        t13 += v * b5;
        t14 += v * b6;
        t15 += v * b7;
        t16 += v * b8;
        t17 += v * b9;
        t18 += v * b10;
        t19 += v * b11;
        t20 += v * b12;
        t21 += v * b13;
        t22 += v * b14;
        t23 += v * b15;
        v = a[9];
        t9 += v * b0;
        t10 += v * b1;
        t11 += v * b2;
        t12 += v * b3;
        t13 += v * b4;
        t14 += v * b5;
        t15 += v * b6;
        t16 += v * b7;
        t17 += v * b8;
        t18 += v * b9;
        t19 += v * b10;
        t20 += v * b11;
        t21 += v * b12;
        t22 += v * b13;
        t23 += v * b14;
        t24 += v * b15;
        v = a[10];
        t10 += v * b0;
        t11 += v * b1;
        t12 += v * b2;
        t13 += v * b3;
        t14 += v * b4;
        t15 += v * b5;
        t16 += v * b6;
        t17 += v * b7;
        t18 += v * b8;
        t19 += v * b9;
        t20 += v * b10;
        t21 += v * b11;
        t22 += v * b12;
        t23 += v * b13;
        t24 += v * b14;
        t25 += v * b15;
        v = a[11];
        t11 += v * b0;
        t12 += v * b1;
        t13 += v * b2;
        t14 += v * b3;
        t15 += v * b4;
        t16 += v * b5;
        t17 += v * b6;
        t18 += v * b7;
        t19 += v * b8;
        t20 += v * b9;
        t21 += v * b10;
        t22 += v * b11;
        t23 += v * b12;
        t24 += v * b13;
        t25 += v * b14;
        t26 += v * b15;
        v = a[12];
        t12 += v * b0;
        t13 += v * b1;
        t14 += v * b2;
        t15 += v * b3;
        t16 += v * b4;
        t17 += v * b5;
        t18 += v * b6;
        t19 += v * b7;
        t20 += v * b8;
        t21 += v * b9;
        t22 += v * b10;
        t23 += v * b11;
        t24 += v * b12;
        t25 += v * b13;
        t26 += v * b14;
        t27 += v * b15;
        v = a[13];
        t13 += v * b0;
        t14 += v * b1;
        t15 += v * b2;
        t16 += v * b3;
        t17 += v * b4;
        t18 += v * b5;
        t19 += v * b6;
        t20 += v * b7;
        t21 += v * b8;
        t22 += v * b9;
        t23 += v * b10;
        t24 += v * b11;
        t25 += v * b12;
        t26 += v * b13;
        t27 += v * b14;
        t28 += v * b15;
        v = a[14];
        t14 += v * b0;
        t15 += v * b1;
        t16 += v * b2;
        t17 += v * b3;
        t18 += v * b4;
        t19 += v * b5;
        t20 += v * b6;
        t21 += v * b7;
        t22 += v * b8;
        t23 += v * b9;
        t24 += v * b10;
        t25 += v * b11;
        t26 += v * b12;
        t27 += v * b13;
        t28 += v * b14;
        t29 += v * b15;
        v = a[15];
        t15 += v * b0;
        t16 += v * b1;
        t17 += v * b2;
        t18 += v * b3;
        t19 += v * b4;
        t20 += v * b5;
        t21 += v * b6;
        t22 += v * b7;
        t23 += v * b8;
        t24 += v * b9;
        t25 += v * b10;
        t26 += v * b11;
        t27 += v * b12;
        t28 += v * b13;
        t29 += v * b14;
        t30 += v * b15;
        t0 += 38 * t16;
        t1 += 38 * t17;
        t2 += 38 * t18;
        t3 += 38 * t19;
        t4 += 38 * t20;
        t5 += 38 * t21;
        t6 += 38 * t22;
        t7 += 38 * t23;
        t8 += 38 * t24;
        t9 += 38 * t25;
        t10 += 38 * t26;
        t11 += 38 * t27;
        t12 += 38 * t28;
        t13 += 38 * t29;
        t14 += 38 * t30;
        // t15 left as is
        // first car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        // second car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        o[0] = t0;
        o[1] = t1;
        o[2] = t2;
        o[3] = t3;
        o[4] = t4;
        o[5] = t5;
        o[6] = t6;
        o[7] = t7;
        o[8] = t8;
        o[9] = t9;
        o[10] = t10;
        o[11] = t11;
        o[12] = t12;
        o[13] = t13;
        o[14] = t14;
        o[15] = t15;
    }
    function S(o, a) {
        M(o, a, a);
    }
    function inv25519(o, i) {
        var c = gf();
        var a;
        for(a = 0; a < 16; a++)c[a] = i[a];
        for(a = 253; a >= 0; a--){
            S(c, c);
            if (a !== 2 && a !== 4) M(c, c, i);
        }
        for(a = 0; a < 16; a++)o[a] = c[a];
    }
    function pow2523(o, i) {
        var c = gf();
        var a;
        for(a = 0; a < 16; a++)c[a] = i[a];
        for(a = 250; a >= 0; a--){
            S(c, c);
            if (a !== 1) M(c, c, i);
        }
        for(a = 0; a < 16; a++)o[a] = c[a];
    }
    function crypto_scalarmult(q, n, p) {
        var z = new Uint8Array(32);
        var x = new Float64Array(80), r, i;
        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();
        for(i = 0; i < 31; i++)z[i] = n[i];
        z[31] = n[31] & 127 | 64;
        z[0] &= 248;
        unpack25519(x, p);
        for(i = 0; i < 16; i++){
            b[i] = x[i];
            d[i] = a[i] = c[i] = 0;
        }
        a[0] = d[0] = 1;
        for(i = 254; i >= 0; --i){
            r = z[i >>> 3] >>> (i & 7) & 1;
            sel25519(a, b, r);
            sel25519(c, d, r);
            A(e, a, c);
            Z(a, a, c);
            A(c, b, d);
            Z(b, b, d);
            S(d, e);
            S(f, a);
            M(a, c, a);
            M(c, b, e);
            A(e, a, c);
            Z(a, a, c);
            S(b, a);
            Z(c, d, f);
            M(a, c, _121665);
            A(a, a, d);
            M(c, c, a);
            M(a, d, f);
            M(d, b, x);
            S(b, e);
            sel25519(a, b, r);
            sel25519(c, d, r);
        }
        for(i = 0; i < 16; i++){
            x[i + 16] = a[i];
            x[i + 32] = c[i];
            x[i + 48] = b[i];
            x[i + 64] = d[i];
        }
        var x32 = x.subarray(32);
        var x16 = x.subarray(16);
        inv25519(x32, x32);
        M(x16, x16, x32);
        pack25519(q, x16);
        return 0;
    }
    function crypto_scalarmult_base(q, n) {
        return crypto_scalarmult(q, n, _9);
    }
    function crypto_box_keypair(y, x) {
        randombytes(x, 32);
        return crypto_scalarmult_base(y, x);
    }
    function crypto_box_beforenm(k, y, x) {
        var s = new Uint8Array(32);
        crypto_scalarmult(s, x, y);
        return crypto_core_hsalsa20(k, _0, s, sigma);
    }
    var crypto_box_afternm = crypto_secretbox;
    var crypto_box_open_afternm = crypto_secretbox_open;
    function crypto_box(c, m, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_afternm(c, m, d, n, k);
    }
    function crypto_box_open(m, c, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_open_afternm(m, c, d, n, k);
    }
    var K = [
        0x428a2f98,
        0xd728ae22,
        0x71374491,
        0x23ef65cd,
        0xb5c0fbcf,
        0xec4d3b2f,
        0xe9b5dba5,
        0x8189dbbc,
        0x3956c25b,
        0xf348b538,
        0x59f111f1,
        0xb605d019,
        0x923f82a4,
        0xaf194f9b,
        0xab1c5ed5,
        0xda6d8118,
        0xd807aa98,
        0xa3030242,
        0x12835b01,
        0x45706fbe,
        0x243185be,
        0x4ee4b28c,
        0x550c7dc3,
        0xd5ffb4e2,
        0x72be5d74,
        0xf27b896f,
        0x80deb1fe,
        0x3b1696b1,
        0x9bdc06a7,
        0x25c71235,
        0xc19bf174,
        0xcf692694,
        0xe49b69c1,
        0x9ef14ad2,
        0xefbe4786,
        0x384f25e3,
        0x0fc19dc6,
        0x8b8cd5b5,
        0x240ca1cc,
        0x77ac9c65,
        0x2de92c6f,
        0x592b0275,
        0x4a7484aa,
        0x6ea6e483,
        0x5cb0a9dc,
        0xbd41fbd4,
        0x76f988da,
        0x831153b5,
        0x983e5152,
        0xee66dfab,
        0xa831c66d,
        0x2db43210,
        0xb00327c8,
        0x98fb213f,
        0xbf597fc7,
        0xbeef0ee4,
        0xc6e00bf3,
        0x3da88fc2,
        0xd5a79147,
        0x930aa725,
        0x06ca6351,
        0xe003826f,
        0x14292967,
        0x0a0e6e70,
        0x27b70a85,
        0x46d22ffc,
        0x2e1b2138,
        0x5c26c926,
        0x4d2c6dfc,
        0x5ac42aed,
        0x53380d13,
        0x9d95b3df,
        0x650a7354,
        0x8baf63de,
        0x766a0abb,
        0x3c77b2a8,
        0x81c2c92e,
        0x47edaee6,
        0x92722c85,
        0x1482353b,
        0xa2bfe8a1,
        0x4cf10364,
        0xa81a664b,
        0xbc423001,
        0xc24b8b70,
        0xd0f89791,
        0xc76c51a3,
        0x0654be30,
        0xd192e819,
        0xd6ef5218,
        0xd6990624,
        0x5565a910,
        0xf40e3585,
        0x5771202a,
        0x106aa070,
        0x32bbd1b8,
        0x19a4c116,
        0xb8d2d0c8,
        0x1e376c08,
        0x5141ab53,
        0x2748774c,
        0xdf8eeb99,
        0x34b0bcb5,
        0xe19b48a8,
        0x391c0cb3,
        0xc5c95a63,
        0x4ed8aa4a,
        0xe3418acb,
        0x5b9cca4f,
        0x7763e373,
        0x682e6ff3,
        0xd6b2b8a3,
        0x748f82ee,
        0x5defb2fc,
        0x78a5636f,
        0x43172f60,
        0x84c87814,
        0xa1f0ab72,
        0x8cc70208,
        0x1a6439ec,
        0x90befffa,
        0x23631e28,
        0xa4506ceb,
        0xde82bde9,
        0xbef9a3f7,
        0xb2c67915,
        0xc67178f2,
        0xe372532b,
        0xca273ece,
        0xea26619c,
        0xd186b8c7,
        0x21c0c207,
        0xeada7dd6,
        0xcde0eb1e,
        0xf57d4f7f,
        0xee6ed178,
        0x06f067aa,
        0x72176fba,
        0x0a637dc5,
        0xa2c898a6,
        0x113f9804,
        0xbef90dae,
        0x1b710b35,
        0x131c471b,
        0x28db77f5,
        0x23047d84,
        0x32caab7b,
        0x40c72493,
        0x3c9ebe0a,
        0x15c9bebc,
        0x431d67c4,
        0x9c100d4c,
        0x4cc5d4be,
        0xcb3e42b6,
        0x597f299c,
        0xfc657e2a,
        0x5fcb6fab,
        0x3ad6faec,
        0x6c44198c,
        0x4a475817
    ];
    function crypto_hashblocks_hl(hh, hl, m, n) {
        var wh = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i, j, h, l, a, b, c, d;
        var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
        var pos = 0;
        while(n >= 128){
            for(i = 0; i < 16; i++){
                j = 8 * i + pos;
                wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
                wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
            }
            for(i = 0; i < 80; i++){
                bh0 = ah0;
                bh1 = ah1;
                bh2 = ah2;
                bh3 = ah3;
                bh4 = ah4;
                bh5 = ah5;
                bh6 = ah6;
                bh7 = ah7;
                bl0 = al0;
                bl1 = al1;
                bl2 = al2;
                bl3 = al3;
                bl4 = al4;
                bl5 = al5;
                bl6 = al6;
                bl7 = al7;
                // add
                h = ah7;
                l = al7;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                // Sigma1
                h = (ah4 >>> 14 | al4 << 18) ^ (ah4 >>> 18 | al4 << 14) ^ (al4 >>> 9 | ah4 << 23);
                l = (al4 >>> 14 | ah4 << 18) ^ (al4 >>> 18 | ah4 << 14) ^ (ah4 >>> 9 | al4 << 23);
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // Ch
                h = ah4 & ah5 ^ ~ah4 & ah6;
                l = al4 & al5 ^ ~al4 & al6;
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // K
                h = K[i * 2];
                l = K[i * 2 + 1];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // w
                h = wh[i % 16];
                l = wl[i % 16];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                th = c & 0xffff | d << 16;
                tl = a & 0xffff | b << 16;
                // add
                h = th;
                l = tl;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                // Sigma0
                h = (ah0 >>> 28 | al0 << 4) ^ (al0 >>> 2 | ah0 << 30) ^ (al0 >>> 7 | ah0 << 25);
                l = (al0 >>> 28 | ah0 << 4) ^ (ah0 >>> 2 | al0 << 30) ^ (ah0 >>> 7 | al0 << 25);
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // Maj
                h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
                l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                bh7 = c & 0xffff | d << 16;
                bl7 = a & 0xffff | b << 16;
                // add
                h = bh3;
                l = bl3;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = th;
                l = tl;
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                bh3 = c & 0xffff | d << 16;
                bl3 = a & 0xffff | b << 16;
                ah1 = bh0;
                ah2 = bh1;
                ah3 = bh2;
                ah4 = bh3;
                ah5 = bh4;
                ah6 = bh5;
                ah7 = bh6;
                ah0 = bh7;
                al1 = bl0;
                al2 = bl1;
                al3 = bl2;
                al4 = bl3;
                al5 = bl4;
                al6 = bl5;
                al7 = bl6;
                al0 = bl7;
                if (i % 16 === 15) for(j = 0; j < 16; j++){
                    // add
                    h = wh[j];
                    l = wl[j];
                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;
                    h = wh[(j + 9) % 16];
                    l = wl[(j + 9) % 16];
                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;
                    // sigma0
                    th = wh[(j + 1) % 16];
                    tl = wl[(j + 1) % 16];
                    h = (th >>> 1 | tl << 31) ^ (th >>> 8 | tl << 24) ^ th >>> 7;
                    l = (tl >>> 1 | th << 31) ^ (tl >>> 8 | th << 24) ^ (tl >>> 7 | th << 25);
                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;
                    // sigma1
                    th = wh[(j + 14) % 16];
                    tl = wl[(j + 14) % 16];
                    h = (th >>> 19 | tl << 13) ^ (tl >>> 29 | th << 3) ^ th >>> 6;
                    l = (tl >>> 19 | th << 13) ^ (th >>> 29 | tl << 3) ^ (tl >>> 6 | th << 26);
                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;
                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;
                    wh[j] = c & 0xffff | d << 16;
                    wl[j] = a & 0xffff | b << 16;
                }
            }
            // add
            h = ah0;
            l = al0;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[0];
            l = hl[0];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[0] = ah0 = c & 0xffff | d << 16;
            hl[0] = al0 = a & 0xffff | b << 16;
            h = ah1;
            l = al1;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[1];
            l = hl[1];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[1] = ah1 = c & 0xffff | d << 16;
            hl[1] = al1 = a & 0xffff | b << 16;
            h = ah2;
            l = al2;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[2];
            l = hl[2];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[2] = ah2 = c & 0xffff | d << 16;
            hl[2] = al2 = a & 0xffff | b << 16;
            h = ah3;
            l = al3;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[3];
            l = hl[3];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[3] = ah3 = c & 0xffff | d << 16;
            hl[3] = al3 = a & 0xffff | b << 16;
            h = ah4;
            l = al4;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[4];
            l = hl[4];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[4] = ah4 = c & 0xffff | d << 16;
            hl[4] = al4 = a & 0xffff | b << 16;
            h = ah5;
            l = al5;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[5];
            l = hl[5];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[5] = ah5 = c & 0xffff | d << 16;
            hl[5] = al5 = a & 0xffff | b << 16;
            h = ah6;
            l = al6;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[6];
            l = hl[6];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[6] = ah6 = c & 0xffff | d << 16;
            hl[6] = al6 = a & 0xffff | b << 16;
            h = ah7;
            l = al7;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[7];
            l = hl[7];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[7] = ah7 = c & 0xffff | d << 16;
            hl[7] = al7 = a & 0xffff | b << 16;
            pos += 128;
            n -= 128;
        }
        return n;
    }
    function crypto_hash(out, m, n) {
        var hh = new Int32Array(8), hl = new Int32Array(8), x = new Uint8Array(256), i, b = n;
        hh[0] = 0x6a09e667;
        hh[1] = 0xbb67ae85;
        hh[2] = 0x3c6ef372;
        hh[3] = 0xa54ff53a;
        hh[4] = 0x510e527f;
        hh[5] = 0x9b05688c;
        hh[6] = 0x1f83d9ab;
        hh[7] = 0x5be0cd19;
        hl[0] = 0xf3bcc908;
        hl[1] = 0x84caa73b;
        hl[2] = 0xfe94f82b;
        hl[3] = 0x5f1d36f1;
        hl[4] = 0xade682d1;
        hl[5] = 0x2b3e6c1f;
        hl[6] = 0xfb41bd6b;
        hl[7] = 0x137e2179;
        crypto_hashblocks_hl(hh, hl, m, n);
        n %= 128;
        for(i = 0; i < n; i++)x[i] = m[b - n + i];
        x[n] = 128;
        n = 256 - 128 * (n < 112 ? 1 : 0);
        x[n - 9] = 0;
        ts64(x, n - 8, b / 0x20000000 | 0, b << 3);
        crypto_hashblocks_hl(hh, hl, x, n);
        for(i = 0; i < 8; i++)ts64(out, 8 * i, hh[i], hl[i]);
        return 0;
    }
    function add(p, q) {
        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();
        Z(a, p[1], p[0]);
        Z(t, q[1], q[0]);
        M(a, a, t);
        A(b, p[0], p[1]);
        A(t, q[0], q[1]);
        M(b, b, t);
        M(c, p[3], q[3]);
        M(c, c, D2);
        M(d, p[2], q[2]);
        A(d, d, d);
        Z(e, b, a);
        Z(f, d, c);
        A(g, d, c);
        A(h, b, a);
        M(p[0], e, f);
        M(p[1], h, g);
        M(p[2], g, f);
        M(p[3], e, h);
    }
    function cswap(p, q, b) {
        var i;
        for(i = 0; i < 4; i++)sel25519(p[i], q[i], b);
    }
    function pack(r, p) {
        var tx = gf(), ty = gf(), zi = gf();
        inv25519(zi, p[2]);
        M(tx, p[0], zi);
        M(ty, p[1], zi);
        pack25519(r, ty);
        r[31] ^= par25519(tx) << 7;
    }
    function scalarmult(p, q, s) {
        var b, i;
        set25519(p[0], gf0);
        set25519(p[1], gf1);
        set25519(p[2], gf1);
        set25519(p[3], gf0);
        for(i = 255; i >= 0; --i){
            b = s[i / 8 | 0] >> (i & 7) & 1;
            cswap(p, q, b);
            add(q, p);
            add(p, p);
            cswap(p, q, b);
        }
    }
    function scalarbase(p, s) {
        var q = [
            gf(),
            gf(),
            gf(),
            gf()
        ];
        set25519(q[0], X);
        set25519(q[1], Y);
        set25519(q[2], gf1);
        M(q[3], X, Y);
        scalarmult(p, q, s);
    }
    function crypto_sign_keypair(pk, sk, seeded) {
        var d = new Uint8Array(64);
        var p = [
            gf(),
            gf(),
            gf(),
            gf()
        ];
        var i;
        if (!seeded) randombytes(sk, 32);
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        scalarbase(p, d);
        pack(pk, p);
        for(i = 0; i < 32; i++)sk[i + 32] = pk[i];
        return 0;
    }
    var L = new Float64Array([
        0xed,
        0xd3,
        0xf5,
        0x5c,
        0x1a,
        0x63,
        0x12,
        0x58,
        0xd6,
        0x9c,
        0xf7,
        0xa2,
        0xde,
        0xf9,
        0xde,
        0x14,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0x10
    ]);
    function modL(r, x) {
        var carry, i, j, k;
        for(i = 63; i >= 32; --i){
            carry = 0;
            for(j = i - 32, k = i - 12; j < k; ++j){
                x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                carry = Math.floor((x[j] + 128) / 256);
                x[j] -= carry * 256;
            }
            x[j] += carry;
            x[i] = 0;
        }
        carry = 0;
        for(j = 0; j < 32; j++){
            x[j] += carry - (x[31] >> 4) * L[j];
            carry = x[j] >> 8;
            x[j] &= 255;
        }
        for(j = 0; j < 32; j++)x[j] -= carry * L[j];
        for(i = 0; i < 32; i++){
            x[i + 1] += x[i] >> 8;
            r[i] = x[i] & 255;
        }
    }
    function reduce(r) {
        var x = new Float64Array(64), i;
        for(i = 0; i < 64; i++)x[i] = r[i];
        for(i = 0; i < 64; i++)r[i] = 0;
        modL(r, x);
    }
    // Note: difference from C - smlen returned, not passed as argument.
    function crypto_sign(sm, m, n, sk) {
        var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
        var i, j, x = new Float64Array(64);
        var p = [
            gf(),
            gf(),
            gf(),
            gf()
        ];
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        var smlen = n + 64;
        for(i = 0; i < n; i++)sm[64 + i] = m[i];
        for(i = 0; i < 32; i++)sm[32 + i] = d[32 + i];
        crypto_hash(r, sm.subarray(32), n + 32);
        reduce(r);
        scalarbase(p, r);
        pack(sm, p);
        for(i = 32; i < 64; i++)sm[i] = sk[i];
        crypto_hash(h, sm, n + 64);
        reduce(h);
        for(i = 0; i < 64; i++)x[i] = 0;
        for(i = 0; i < 32; i++)x[i] = r[i];
        for(i = 0; i < 32; i++)for(j = 0; j < 32; j++)x[i + j] += h[i] * d[j];
        modL(sm.subarray(32), x);
        return smlen;
    }
    function unpackneg(r, p) {
        var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
        set25519(r[2], gf1);
        unpack25519(r[1], p);
        S(num, r[1]);
        M(den, num, D);
        Z(num, num, r[2]);
        A(den, r[2], den);
        S(den2, den);
        S(den4, den2);
        M(den6, den4, den2);
        M(t, den6, num);
        M(t, t, den);
        pow2523(t, t);
        M(t, t, num);
        M(t, t, den);
        M(t, t, den);
        M(r[0], t, den);
        S(chk, r[0]);
        M(chk, chk, den);
        if (neq25519(chk, num)) M(r[0], r[0], I);
        S(chk, r[0]);
        M(chk, chk, den);
        if (neq25519(chk, num)) return -1;
        if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);
        M(r[3], r[0], r[1]);
        return 0;
    }
    function crypto_sign_open(m, sm, n, pk) {
        var i;
        var t = new Uint8Array(32), h = new Uint8Array(64);
        var p = [
            gf(),
            gf(),
            gf(),
            gf()
        ], q = [
            gf(),
            gf(),
            gf(),
            gf()
        ];
        if (n < 64) return -1;
        if (unpackneg(q, pk)) return -1;
        for(i = 0; i < n; i++)m[i] = sm[i];
        for(i = 0; i < 32; i++)m[i + 32] = pk[i];
        crypto_hash(h, m, n);
        reduce(h);
        scalarmult(p, q, h);
        scalarbase(q, sm.subarray(32));
        add(p, q);
        pack(t, p);
        n -= 64;
        if (crypto_verify_32(sm, 0, t, 0)) {
            for(i = 0; i < n; i++)m[i] = 0;
            return -1;
        }
        for(i = 0; i < n; i++)m[i] = sm[i + 64];
        return n;
    }
    var crypto_secretbox_KEYBYTES = 32, crypto_secretbox_NONCEBYTES = 24, crypto_secretbox_ZEROBYTES = 32, crypto_secretbox_BOXZEROBYTES = 16, crypto_scalarmult_BYTES = 32, crypto_scalarmult_SCALARBYTES = 32, crypto_box_PUBLICKEYBYTES = 32, crypto_box_SECRETKEYBYTES = 32, crypto_box_BEFORENMBYTES = 32, crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES, crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES, crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES, crypto_sign_BYTES = 64, crypto_sign_PUBLICKEYBYTES = 32, crypto_sign_SECRETKEYBYTES = 64, crypto_sign_SEEDBYTES = 32, crypto_hash_BYTES = 64;
    nacl.lowlevel = {
        crypto_core_hsalsa20: crypto_core_hsalsa20,
        crypto_stream_xor: crypto_stream_xor,
        crypto_stream: crypto_stream,
        crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
        crypto_stream_salsa20: crypto_stream_salsa20,
        crypto_onetimeauth: crypto_onetimeauth,
        crypto_onetimeauth_verify: crypto_onetimeauth_verify,
        crypto_verify_16: crypto_verify_16,
        crypto_verify_32: crypto_verify_32,
        crypto_secretbox: crypto_secretbox,
        crypto_secretbox_open: crypto_secretbox_open,
        crypto_scalarmult: crypto_scalarmult,
        crypto_scalarmult_base: crypto_scalarmult_base,
        crypto_box_beforenm: crypto_box_beforenm,
        crypto_box_afternm: crypto_box_afternm,
        crypto_box: crypto_box,
        crypto_box_open: crypto_box_open,
        crypto_box_keypair: crypto_box_keypair,
        crypto_hash: crypto_hash,
        crypto_sign: crypto_sign,
        crypto_sign_keypair: crypto_sign_keypair,
        crypto_sign_open: crypto_sign_open,
        crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
        crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
        crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
        crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
        crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
        crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
        crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
        crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
        crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
        crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
        crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
        crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
        crypto_sign_BYTES: crypto_sign_BYTES,
        crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
        crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
        crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
        crypto_hash_BYTES: crypto_hash_BYTES,
        gf: gf,
        D: D,
        L: L,
        pack25519: pack25519,
        unpack25519: unpack25519,
        M: M,
        A: A,
        S: S,
        Z: Z,
        pow2523: pow2523,
        add: add,
        set25519: set25519,
        modL: modL,
        scalarmult: scalarmult,
        scalarbase: scalarbase
    };
    /* High-level API */ function checkLengths(k, n) {
        if (k.length !== crypto_secretbox_KEYBYTES) throw new Error("bad key size");
        if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error("bad nonce size");
    }
    function checkBoxLengths(pk, sk) {
        if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error("bad public key size");
        if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error("bad secret key size");
    }
    function checkArrayTypes() {
        for(var i = 0; i < arguments.length; i++){
            if (!(arguments[i] instanceof Uint8Array)) throw new TypeError("unexpected type, use Uint8Array");
        }
    }
    function cleanup(arr) {
        for(var i = 0; i < arr.length; i++)arr[i] = 0;
    }
    nacl.randomBytes = function(n) {
        var b = new Uint8Array(n);
        randombytes(b, n);
        return b;
    };
    nacl.secretbox = function(msg, nonce, key) {
        checkArrayTypes(msg, nonce, key);
        checkLengths(key, nonce);
        var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
        var c = new Uint8Array(m.length);
        for(var i = 0; i < msg.length; i++)m[i + crypto_secretbox_ZEROBYTES] = msg[i];
        crypto_secretbox(c, m, m.length, nonce, key);
        return c.subarray(crypto_secretbox_BOXZEROBYTES);
    };
    nacl.secretbox.open = function(box, nonce, key) {
        checkArrayTypes(box, nonce, key);
        checkLengths(key, nonce);
        var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
        var m = new Uint8Array(c.length);
        for(var i = 0; i < box.length; i++)c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
        if (c.length < 32) return null;
        if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
        return m.subarray(crypto_secretbox_ZEROBYTES);
    };
    nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
    nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
    nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
    nacl.scalarMult = function(n, p) {
        checkArrayTypes(n, p);
        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error("bad n size");
        if (p.length !== crypto_scalarmult_BYTES) throw new Error("bad p size");
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult(q, n, p);
        return q;
    };
    nacl.scalarMult.base = function(n) {
        checkArrayTypes(n);
        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error("bad n size");
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult_base(q, n);
        return q;
    };
    nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
    nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
    nacl.box = function(msg, nonce, publicKey, secretKey) {
        var k = nacl.box.before(publicKey, secretKey);
        return nacl.secretbox(msg, nonce, k);
    };
    nacl.box.before = function(publicKey, secretKey) {
        checkArrayTypes(publicKey, secretKey);
        checkBoxLengths(publicKey, secretKey);
        var k = new Uint8Array(crypto_box_BEFORENMBYTES);
        crypto_box_beforenm(k, publicKey, secretKey);
        return k;
    };
    nacl.box.after = nacl.secretbox;
    nacl.box.open = function(msg, nonce, publicKey, secretKey) {
        var k = nacl.box.before(publicKey, secretKey);
        return nacl.secretbox.open(msg, nonce, k);
    };
    nacl.box.open.after = nacl.secretbox.open;
    nacl.box.keyPair = function() {
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
        crypto_box_keypair(pk, sk);
        return {
            publicKey: pk,
            secretKey: sk
        };
    };
    nacl.box.keyPair.fromSecretKey = function(secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error("bad secret key size");
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        crypto_scalarmult_base(pk, secretKey);
        return {
            publicKey: pk,
            secretKey: new Uint8Array(secretKey)
        };
    };
    nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
    nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
    nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
    nacl.box.nonceLength = crypto_box_NONCEBYTES;
    nacl.box.overheadLength = nacl.secretbox.overheadLength;
    nacl.sign = function(msg, secretKey) {
        checkArrayTypes(msg, secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error("bad secret key size");
        var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
        crypto_sign(signedMsg, msg, msg.length, secretKey);
        return signedMsg;
    };
    nacl.sign.open = function(signedMsg, publicKey) {
        checkArrayTypes(signedMsg, publicKey);
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error("bad public key size");
        var tmp = new Uint8Array(signedMsg.length);
        var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
        if (mlen < 0) return null;
        var m = new Uint8Array(mlen);
        for(var i = 0; i < m.length; i++)m[i] = tmp[i];
        return m;
    };
    nacl.sign.detached = function(msg, secretKey) {
        var signedMsg = nacl.sign(msg, secretKey);
        var sig = new Uint8Array(crypto_sign_BYTES);
        for(var i = 0; i < sig.length; i++)sig[i] = signedMsg[i];
        return sig;
    };
    nacl.sign.detached.verify = function(msg, sig, publicKey) {
        checkArrayTypes(msg, sig, publicKey);
        if (sig.length !== crypto_sign_BYTES) throw new Error("bad signature size");
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error("bad public key size");
        var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
        var m = new Uint8Array(crypto_sign_BYTES + msg.length);
        var i;
        for(i = 0; i < crypto_sign_BYTES; i++)sm[i] = sig[i];
        for(i = 0; i < msg.length; i++)sm[i + crypto_sign_BYTES] = msg[i];
        return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
    };
    nacl.sign.keyPair = function() {
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        crypto_sign_keypair(pk, sk);
        return {
            publicKey: pk,
            secretKey: sk
        };
    };
    nacl.sign.keyPair.fromSecretKey = function(secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error("bad secret key size");
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        for(var i = 0; i < pk.length; i++)pk[i] = secretKey[32 + i];
        return {
            publicKey: pk,
            secretKey: new Uint8Array(secretKey)
        };
    };
    nacl.sign.keyPair.fromSeed = function(seed) {
        checkArrayTypes(seed);
        if (seed.length !== crypto_sign_SEEDBYTES) throw new Error("bad seed size");
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        for(var i = 0; i < 32; i++)sk[i] = seed[i];
        crypto_sign_keypair(pk, sk, true);
        return {
            publicKey: pk,
            secretKey: sk
        };
    };
    nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
    nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
    nacl.sign.seedLength = crypto_sign_SEEDBYTES;
    nacl.sign.signatureLength = crypto_sign_BYTES;
    nacl.hash = function(msg) {
        checkArrayTypes(msg);
        var h = new Uint8Array(crypto_hash_BYTES);
        crypto_hash(h, msg, msg.length);
        return h;
    };
    nacl.hash.hashLength = crypto_hash_BYTES;
    nacl.verify = function(x, y) {
        checkArrayTypes(x, y);
        // Zero length arguments are considered not equal.
        if (x.length === 0 || y.length === 0) return false;
        if (x.length !== y.length) return false;
        return vn(x, 0, y, 0, x.length) === 0 ? true : false;
    };
    nacl.setPRNG = function(fn) {
        randombytes = fn;
    };
    (function() {
        // Initialize PRNG if environment provides CSPRNG.
        // If not, methods calling randombytes will throw.
        var crypto = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
        if (crypto && crypto.getRandomValues) {
            // Browsers.
            var QUOTA = 65536;
            nacl.setPRNG(function(x, n) {
                var i, v = new Uint8Array(n);
                for(i = 0; i < n; i += QUOTA)crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
                for(i = 0; i < n; i++)x[i] = v[i];
                cleanup(v);
            });
        } else {
            // Node.js.
            crypto = require("crypto");
            if (crypto && crypto.randomBytes) nacl.setPRNG(function(x, n) {
                var i, v = crypto.randomBytes(n);
                for(i = 0; i < n; i++)x[i] = v[i];
                cleanup(v);
            });
        }
    })();
})(module.exports ? module.exports : self.nacl = self.nacl || {});

},{"crypto":"jhUEF"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"dUoM9":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var borsh_1 = require("borsh");
Object.defineProperty(exports, "base_encode", {
    enumerable: true,
    get: function() {
        return borsh_1.baseEncode;
    }
});
Object.defineProperty(exports, "base_decode", {
    enumerable: true,
    get: function() {
        return borsh_1.baseDecode;
    }
});
Object.defineProperty(exports, "serialize", {
    enumerable: true,
    get: function() {
        return borsh_1.serialize;
    }
});
Object.defineProperty(exports, "deserialize", {
    enumerable: true,
    get: function() {
        return borsh_1.deserialize;
    }
});
Object.defineProperty(exports, "BorshError", {
    enumerable: true,
    get: function() {
        return borsh_1.BorshError;
    }
});
Object.defineProperty(exports, "BinaryWriter", {
    enumerable: true,
    get: function() {
        return borsh_1.BinaryWriter;
    }
});
Object.defineProperty(exports, "BinaryReader", {
    enumerable: true,
    get: function() {
        return borsh_1.BinaryReader;
    }
});

},{"borsh":"4JCmN"}],"4JCmN":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var global = arguments[3];
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const bs58_1 = __importDefault(require("bs58"));
// TODO: Make sure this polyfill not included when not required
const encoding = __importStar(require("text-encoding-utf-8"));
const TextDecoder = typeof global.TextDecoder !== "function" ? encoding.TextDecoder : global.TextDecoder;
const textDecoder = new TextDecoder("utf-8", {
    fatal: true
});
function baseEncode(value) {
    if (typeof value === "string") value = Buffer.from(value, "utf8");
    return bs58_1.default.encode(Buffer.from(value));
}
exports.baseEncode = baseEncode;
function baseDecode(value) {
    return Buffer.from(bs58_1.default.decode(value));
}
exports.baseDecode = baseDecode;
const INITIAL_LENGTH = 1024;
class BorshError extends Error {
    constructor(message){
        super(message);
        this.fieldPath = [];
        this.originalMessage = message;
    }
    addToFieldPath(fieldName) {
        this.fieldPath.splice(0, 0, fieldName);
        // NOTE: Modifying message directly as jest doesn't use .toString()
        this.message = this.originalMessage + ": " + this.fieldPath.join(".");
    }
}
exports.BorshError = BorshError;
/// Binary encoder.
class BinaryWriter {
    constructor(){
        this.buf = Buffer.alloc(INITIAL_LENGTH);
        this.length = 0;
    }
    maybeResize() {
        if (this.buf.length < 16 + this.length) this.buf = Buffer.concat([
            this.buf,
            Buffer.alloc(INITIAL_LENGTH)
        ]);
    }
    writeU8(value) {
        this.maybeResize();
        this.buf.writeUInt8(value, this.length);
        this.length += 1;
    }
    writeU32(value) {
        this.maybeResize();
        this.buf.writeUInt32LE(value, this.length);
        this.length += 4;
    }
    writeU64(value) {
        this.maybeResize();
        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 8)));
    }
    writeU128(value) {
        this.maybeResize();
        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 16)));
    }
    writeBuffer(buffer) {
        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser
        this.buf = Buffer.concat([
            Buffer.from(this.buf.subarray(0, this.length)),
            buffer,
            Buffer.alloc(INITIAL_LENGTH)
        ]);
        this.length += buffer.length;
    }
    writeString(str) {
        this.maybeResize();
        const b = Buffer.from(str, "utf8");
        this.writeU32(b.length);
        this.writeBuffer(b);
    }
    writeFixedArray(array) {
        this.writeBuffer(Buffer.from(array));
    }
    writeArray(array, fn) {
        this.maybeResize();
        this.writeU32(array.length);
        for (const elem of array){
            this.maybeResize();
            fn(elem);
        }
    }
    toArray() {
        return this.buf.subarray(0, this.length);
    }
}
exports.BinaryWriter = BinaryWriter;
function handlingRangeError(target, propertyKey, propertyDescriptor) {
    const originalMethod = propertyDescriptor.value;
    propertyDescriptor.value = function(...args) {
        try {
            return originalMethod.apply(this, args);
        } catch (e) {
            if (e instanceof RangeError) {
                const code = e.code;
                if ([
                    "ERR_BUFFER_OUT_OF_BOUNDS",
                    "ERR_OUT_OF_RANGE"
                ].indexOf(code) >= 0) throw new BorshError("Reached the end of buffer when deserializing");
            }
            throw e;
        }
    };
}
class BinaryReader {
    constructor(buf){
        this.buf = buf;
        this.offset = 0;
    }
    readU8() {
        const value = this.buf.readUInt8(this.offset);
        this.offset += 1;
        return value;
    }
    readU32() {
        const value = this.buf.readUInt32LE(this.offset);
        this.offset += 4;
        return value;
    }
    readU64() {
        const buf = this.readBuffer(8);
        return new bn_js_1.default(buf, "le");
    }
    readU128() {
        const buf = this.readBuffer(16);
        return new bn_js_1.default(buf, "le");
    }
    readBuffer(len) {
        if (this.offset + len > this.buf.length) throw new BorshError(`Expected buffer length ${len} isn't within bounds`);
        const result = this.buf.slice(this.offset, this.offset + len);
        this.offset += len;
        return result;
    }
    readString() {
        const len = this.readU32();
        const buf = this.readBuffer(len);
        try {
            // NOTE: Using TextDecoder to fail on invalid UTF-8
            return textDecoder.decode(buf);
        } catch (e) {
            throw new BorshError(`Error decoding UTF-8 string: ${e}`);
        }
    }
    readFixedArray(len) {
        return new Uint8Array(this.readBuffer(len));
    }
    readArray(fn) {
        const len = this.readU32();
        const result = Array();
        for(let i = 0; i < len; ++i)result.push(fn());
        return result;
    }
}
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readU8", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readU32", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readU64", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readU128", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readString", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readFixedArray", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readArray", null);
exports.BinaryReader = BinaryReader;
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
function serializeField(schema, fieldName, value, fieldType, writer) {
    try {
        // TODO: Handle missing values properly (make sure they never result in just skipped write)
        if (typeof fieldType === "string") writer[`write${capitalizeFirstLetter(fieldType)}`](value);
        else if (fieldType instanceof Array) {
            if (typeof fieldType[0] === "number") {
                if (value.length !== fieldType[0]) throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);
                writer.writeFixedArray(value);
            } else writer.writeArray(value, (item)=>{
                serializeField(schema, fieldName, item, fieldType[0], writer);
            });
        } else if (fieldType.kind !== undefined) switch(fieldType.kind){
            case "option":
                if (value === null) writer.writeU8(0);
                else {
                    writer.writeU8(1);
                    serializeField(schema, fieldName, value, fieldType.type, writer);
                }
                break;
            default:
                throw new BorshError(`FieldType ${fieldType} unrecognized`);
        }
        else serializeStruct(schema, value, writer);
    } catch (error) {
        if (error instanceof BorshError) error.addToFieldPath(fieldName);
        throw error;
    }
}
function serializeStruct(schema, obj, writer) {
    const structSchema = schema.get(obj.constructor);
    if (!structSchema) throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);
    if (structSchema.kind === "struct") structSchema.fields.map(([fieldName, fieldType])=>{
        serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
    });
    else if (structSchema.kind === "enum") {
        const name = obj[structSchema.field];
        for(let idx = 0; idx < structSchema.values.length; ++idx){
            const [fieldName, fieldType] = structSchema.values[idx];
            if (fieldName === name) {
                writer.writeU8(idx);
                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
                break;
            }
        }
    } else throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);
}
/// Serialize given object using schema of the form:
/// { class_name -> [ [field_name, field_type], .. ], .. }
function serialize(schema, obj) {
    const writer = new BinaryWriter();
    serializeStruct(schema, obj, writer);
    return writer.toArray();
}
exports.serialize = serialize;
function deserializeField(schema, fieldName, fieldType, reader) {
    try {
        if (typeof fieldType === "string") return reader[`read${capitalizeFirstLetter(fieldType)}`]();
        if (fieldType instanceof Array) {
            if (typeof fieldType[0] === "number") return reader.readFixedArray(fieldType[0]);
            return reader.readArray(()=>deserializeField(schema, fieldName, fieldType[0], reader));
        }
        return deserializeStruct(schema, fieldType, reader);
    } catch (error) {
        if (error instanceof BorshError) error.addToFieldPath(fieldName);
        throw error;
    }
}
function deserializeStruct(schema, classType, reader) {
    const structSchema = schema.get(classType);
    if (!structSchema) throw new BorshError(`Class ${classType.name} is missing in schema`);
    if (structSchema.kind === "struct") {
        const result = {};
        for (const [fieldName, fieldType] of schema.get(classType).fields)result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);
        return new classType(result);
    }
    if (structSchema.kind === "enum") {
        const idx = reader.readU8();
        if (idx >= structSchema.values.length) throw new BorshError(`Enum index: ${idx} is out of range`);
        const [fieldName, fieldType] = structSchema.values[idx];
        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);
        return new classType({
            [fieldName]: fieldValue
        });
    }
    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);
}
/// Deserializes object from bytes using schema.
function deserialize(schema, classType, buffer) {
    const reader = new BinaryReader(buffer);
    const result = deserializeStruct(schema, classType, reader);
    if (reader.offset < buffer.length) throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);
    return result;
}
exports.deserialize = deserialize;

},{"buffer":"fCgem","bn.js":"VopIn","bs58":"4ji3p","text-encoding-utf-8":"feCA6"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("base64-js");
const ieee754 = require("ieee754");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i1;
    if (dir) {
        let foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength1 && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    let val = this[offset + --byteLength2];
    let mul = 1;
    while(byteLength2 > 0 && (mul *= 0x100))val += this[offset + --byteLength2] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength3 && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength4, noAssert) {
    offset = offset >>> 0;
    byteLength4 = byteLength4 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength4, this.length);
    let i = byteLength4;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength4);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength5, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength5 = byteLength5 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength5) - 1;
        checkInt(this, value, offset, byteLength5, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength5 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength5;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength6, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength6 = byteLength6 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength6) - 1;
        checkInt(this, value, offset, byteLength6, maxBytes, 0);
    }
    let i = byteLength6 - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength6;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength7, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength7 - 1);
        checkInt(this, value, offset, byteLength7, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength7 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength7;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength8, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength8 - 1);
        checkInt(this, value, offset, byteLength8, limit - 1, -limit);
    }
    let i = byteLength8 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength8;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength9) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength9] === undefined) boundsError(offset, buf.length - (byteLength9 + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength10) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength10 > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength10 + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength10 + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength10 + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength10);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"base64-js":"eIiSV","ieee754":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len1 = b64.length;
    if (len1 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len1;
    var placeHoldersLen = validLen === len1 ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i1;
    for(i1 = 0; i1 < len2; i1 += 4){
        tmp = revLookup[b64.charCodeAt(i1)] << 18 | revLookup[b64.charCodeAt(i1 + 1)] << 12 | revLookup[b64.charCodeAt(i1 + 2)] << 6 | revLookup[b64.charCodeAt(i1 + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i1)] << 2 | revLookup[b64.charCodeAt(i1 + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i1)] << 10 | revLookup[b64.charCodeAt(i1 + 1)] << 4 | revLookup[b64.charCodeAt(i1 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i2 = start; i2 < end; i2 += 3){
        tmp = (uint8[i2] << 16 & 0xFF0000) + (uint8[i2 + 1] << 8 & 0xFF00) + (uint8[i2 + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len3 = uint8.length;
    var extraBytes = len3 % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i3 = 0, len2 = len3 - extraBytes; i3 < len2; i3 += maxChunkLength)parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len2 ? len2 : i3 + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len3 - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len3 - 2] << 8) + uint8[len3 - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"VopIn":[function(require,module,exports) {
(function(module, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module === "object") module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("buffer").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, "Invalid character in " + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, "Invalid character");
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") try {
        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"buffer":"jhUEF"}],"4ji3p":[function(require,module,exports) {
var basex = require("base-x");
var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
module.exports = basex(ALPHABET);

},{"base-x":"inVbl"}],"inVbl":[function(require,module,exports) {
"use strict";
// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
// @ts-ignore
var _Buffer = require("safe-buffer").Buffer;
function base(ALPHABET) {
    if (ALPHABET.length >= 255) throw new TypeError("Alphabet too long");
    var BASE_MAP = new Uint8Array(256);
    for(var j1 = 0; j1 < BASE_MAP.length; j1++)BASE_MAP[j1] = 255;
    for(var i1 = 0; i1 < ALPHABET.length; i1++){
        var x = ALPHABET.charAt(i1);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) throw new TypeError(x + " is ambiguous");
        BASE_MAP[xc] = i1;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up
    ;
    var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up
    ;
    function encode(source) {
        if (Array.isArray(source) || source instanceof Uint8Array) source = _Buffer.from(source);
        if (!_Buffer.isBuffer(source)) throw new TypeError("Expected Buffer");
        if (source.length === 0) return "";
        // Skip & count leading zeroes.
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while(pbegin !== pend && source[pbegin] === 0){
            pbegin++;
            zeroes++;
        }
        // Allocate enough space in big-endian base58 representation.
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        // Process the bytes.
        while(pbegin !== pend){
            var carry = source[pbegin];
            // Apply "b58 = b58 * 256 + ch".
            var i = 0;
            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){
                carry += 256 * b58[it1] >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = carry / BASE >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length = i;
            pbegin++;
        }
        // Skip leading zeroes in base58 result.
        var it2 = size - length;
        while(it2 !== size && b58[it2] === 0)it2++;
        // Translate the result into a string.
        var str = LEADER.repeat(zeroes);
        for(; it2 < size; ++it2)str += ALPHABET.charAt(b58[it2]);
        return str;
    }
    function decodeUnsafe(source) {
        if (typeof source !== "string") throw new TypeError("Expected String");
        if (source.length === 0) return _Buffer.alloc(0);
        var psz = 0;
        // Skip and count leading '1's.
        var zeroes = 0;
        var length = 0;
        while(source[psz] === LEADER){
            zeroes++;
            psz++;
        }
        // Allocate enough space in big-endian base256 representation.
        var size = (source.length - psz) * FACTOR + 1 >>> 0 // log(58) / log(256), rounded up.
        ;
        var b256 = new Uint8Array(size);
        // Process the characters.
        while(source[psz]){
            // Decode character
            var carry = BASE_MAP[source.charCodeAt(psz)];
            // Invalid character
            if (carry === 255) return;
            var i = 0;
            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){
                carry += BASE * b256[it3] >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = carry / 256 >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length = i;
            psz++;
        }
        // Skip leading zeroes in b256.
        var it4 = size - length;
        while(it4 !== size && b256[it4] === 0)it4++;
        var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
        vch.fill(0x00, 0, zeroes);
        var j = zeroes;
        while(it4 !== size)vch[j++] = b256[it4++];
        return vch;
    }
    function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) return buffer;
        throw new Error("Non-base" + BASE + " character");
    }
    return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode
    };
}
module.exports = base;

},{"safe-buffer":"eW7r9"}],"eW7r9":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require("buffer");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return buffer.SlowBuffer(size);
};

},{"buffer":"fCgem"}],"feCA6":[function(require,module,exports) {
"use strict";
// This is free and unencumbered software released into the public domain.
// See LICENSE.md for more information.
//
// Utilities
//
/**
 * @param {number} a The number to test.
 * @param {number} min The minimum value in the range, inclusive.
 * @param {number} max The maximum value in the range, inclusive.
 * @return {boolean} True if a >= min and a <= max.
 */ function inRange(a, min, max) {
    return min <= a && a <= max;
}
/**
 * @param {*} o
 * @return {Object}
 */ function ToDictionary(o) {
    if (o === undefined) return {};
    if (o === Object(o)) return o;
    throw TypeError("Could not convert argument to dictionary");
}
/**
 * @param {string} string Input string of UTF-16 code units.
 * @return {!Array.<number>} Code points.
 */ function stringToCodePoints(string) {
    // https://heycam.github.io/webidl/#dfn-obtain-unicode
    // 1. Let S be the DOMString value.
    var s = String(string);
    // 2. Let n be the length of S.
    var n = s.length;
    // 3. Initialize i to 0.
    var i = 0;
    // 4. Initialize U to be an empty sequence of Unicode characters.
    var u = [];
    // 5. While i < n:
    while(i < n){
        // 1. Let c be the code unit in S at index i.
        var c = s.charCodeAt(i);
        // 2. Depending on the value of c:
        // c < 0xD800 or c > 0xDFFF
        if (c < 0xD800 || c > 0xDFFF) // Append to U the Unicode character with code point c.
        u.push(c);
        else if (0xDC00 <= c && c <= 0xDFFF) // Append to U a U+FFFD REPLACEMENT CHARACTER.
        u.push(0xFFFD);
        else if (0xD800 <= c && c <= 0xDBFF) {
            // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT
            // CHARACTER.
            if (i === n - 1) u.push(0xFFFD);
            else {
                // 1. Let d be the code unit in S at index i+1.
                var d = string.charCodeAt(i + 1);
                // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:
                if (0xDC00 <= d && d <= 0xDFFF) {
                    // 1. Let a be c & 0x3FF.
                    var a = c & 0x3FF;
                    // 2. Let b be d & 0x3FF.
                    var b = d & 0x3FF;
                    // 3. Append to U the Unicode character with code point
                    // 2^16+2^10*a+b.
                    u.push(0x10000 + (a << 10) + b);
                    // 4. Set i to i+1.
                    i += 1;
                } else u.push(0xFFFD);
            }
        }
        // 3. Set i to i+1.
        i += 1;
    }
    // 6. Return U.
    return u;
}
/**
 * @param {!Array.<number>} code_points Array of code points.
 * @return {string} string String of UTF-16 code units.
 */ function codePointsToString(code_points) {
    var s = "";
    for(var i = 0; i < code_points.length; ++i){
        var cp = code_points[i];
        if (cp <= 0xFFFF) s += String.fromCharCode(cp);
        else {
            cp -= 0x10000;
            s += String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);
        }
    }
    return s;
}
//
// Implementation of Encoding specification
// https://encoding.spec.whatwg.org/
//
//
// 3. Terminology
//
/**
 * End-of-stream is a special token that signifies no more tokens
 * are in the stream.
 * @const
 */ var end_of_stream = -1;
/**
 * A stream represents an ordered sequence of tokens.
 *
 * @constructor
 * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the
 * stream.
 */ function Stream(tokens) {
    /** @type {!Array.<number>} */ this.tokens = [].slice.call(tokens);
}
Stream.prototype = {
    /**
   * @return {boolean} True if end-of-stream has been hit.
   */ endOfStream: function() {
        return !this.tokens.length;
    },
    /**
   * When a token is read from a stream, the first token in the
   * stream must be returned and subsequently removed, and
   * end-of-stream must be returned otherwise.
   *
   * @return {number} Get the next token from the stream, or
   * end_of_stream.
   */ read: function() {
        if (!this.tokens.length) return end_of_stream;
        return this.tokens.shift();
    },
    /**
   * When one or more tokens are prepended to a stream, those tokens
   * must be inserted, in given order, before the first token in the
   * stream.
   *
   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.
   */ prepend: function(token) {
        if (Array.isArray(token)) {
            var tokens = token;
            while(tokens.length)this.tokens.unshift(tokens.pop());
        } else this.tokens.unshift(token);
    },
    /**
   * When one or more tokens are pushed to a stream, those tokens
   * must be inserted, in given order, after the last token in the
   * stream.
   *
   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.
   */ push: function(token) {
        if (Array.isArray(token)) {
            var tokens = token;
            while(tokens.length)this.tokens.push(tokens.shift());
        } else this.tokens.push(token);
    }
};
//
// 4. Encodings
//
// 4.1 Encoders and decoders
/** @const */ var finished = -1;
/**
 * @param {boolean} fatal If true, decoding errors raise an exception.
 * @param {number=} opt_code_point Override the standard fallback code point.
 * @return {number} The code point to insert on a decoding error.
 */ function decoderError(fatal, opt_code_point) {
    if (fatal) throw TypeError("Decoder error");
    return opt_code_point || 0xFFFD;
}
//
// 7. API
//
/** @const */ var DEFAULT_ENCODING = "utf-8";
// 7.1 Interface TextDecoder
/**
 * @constructor
 * @param {string=} encoding The label of the encoding;
 *     defaults to 'utf-8'.
 * @param {Object=} options
 */ function TextDecoder(encoding, options) {
    if (!(this instanceof TextDecoder)) return new TextDecoder(encoding, options);
    encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
    if (encoding !== DEFAULT_ENCODING) throw new Error("Encoding not supported. Only utf-8 is supported");
    options = ToDictionary(options);
    /** @private @type {boolean} */ this._streaming = false;
    /** @private @type {boolean} */ this._BOMseen = false;
    /** @private @type {?Decoder} */ this._decoder = null;
    /** @private @type {boolean} */ this._fatal = Boolean(options["fatal"]);
    /** @private @type {boolean} */ this._ignoreBOM = Boolean(options["ignoreBOM"]);
    Object.defineProperty(this, "encoding", {
        value: "utf-8"
    });
    Object.defineProperty(this, "fatal", {
        value: this._fatal
    });
    Object.defineProperty(this, "ignoreBOM", {
        value: this._ignoreBOM
    });
}
TextDecoder.prototype = {
    /**
   * @param {ArrayBufferView=} input The buffer of bytes to decode.
   * @param {Object=} options
   * @return {string} The decoded string.
   */ decode: function decode(input, options) {
        var bytes;
        if (typeof input === "object" && input instanceof ArrayBuffer) bytes = new Uint8Array(input);
        else if (typeof input === "object" && "buffer" in input && input.buffer instanceof ArrayBuffer) bytes = new Uint8Array(input.buffer, input.byteOffset, input.byteLength);
        else bytes = new Uint8Array(0);
        options = ToDictionary(options);
        if (!this._streaming) {
            this._decoder = new UTF8Decoder({
                fatal: this._fatal
            });
            this._BOMseen = false;
        }
        this._streaming = Boolean(options["stream"]);
        var input_stream = new Stream(bytes);
        var code_points = [];
        /** @type {?(number|!Array.<number>)} */ var result;
        while(!input_stream.endOfStream()){
            result = this._decoder.handler(input_stream, input_stream.read());
            if (result === finished) break;
            if (result === null) continue;
            if (Array.isArray(result)) code_points.push.apply(code_points, result);
            else code_points.push(result);
        }
        if (!this._streaming) {
            do {
                result = this._decoder.handler(input_stream, input_stream.read());
                if (result === finished) break;
                if (result === null) continue;
                if (Array.isArray(result)) code_points.push.apply(code_points, result);
                else code_points.push(result);
            }while (!input_stream.endOfStream());
            this._decoder = null;
        }
        if (code_points.length) // If encoding is one of utf-8, utf-16be, and utf-16le, and
        // ignore BOM flag and BOM seen flag are unset, run these
        // subsubsteps:
        {
            if ([
                "utf-8"
            ].indexOf(this.encoding) !== -1 && !this._ignoreBOM && !this._BOMseen) {
                // If token is U+FEFF, set BOM seen flag.
                if (code_points[0] === 0xFEFF) {
                    this._BOMseen = true;
                    code_points.shift();
                } else // Otherwise, if token is not end-of-stream, set BOM seen
                // flag and append token to output.
                this._BOMseen = true;
            }
        }
        return codePointsToString(code_points);
    }
};
// 7.2 Interface TextEncoder
/**
 * @constructor
 * @param {string=} encoding The label of the encoding;
 *     defaults to 'utf-8'.
 * @param {Object=} options
 */ function TextEncoder(encoding, options) {
    if (!(this instanceof TextEncoder)) return new TextEncoder(encoding, options);
    encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
    if (encoding !== DEFAULT_ENCODING) throw new Error("Encoding not supported. Only utf-8 is supported");
    options = ToDictionary(options);
    /** @private @type {boolean} */ this._streaming = false;
    /** @private @type {?Encoder} */ this._encoder = null;
    /** @private @type {{fatal: boolean}} */ this._options = {
        fatal: Boolean(options["fatal"])
    };
    Object.defineProperty(this, "encoding", {
        value: "utf-8"
    });
}
TextEncoder.prototype = {
    /**
   * @param {string=} opt_string The string to encode.
   * @param {Object=} options
   * @return {Uint8Array} Encoded bytes, as a Uint8Array.
   */ encode: function encode(opt_string, options) {
        opt_string = opt_string ? String(opt_string) : "";
        options = ToDictionary(options);
        // NOTE: This option is nonstandard. None of the encodings
        // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,
        // so streaming is not necessary.
        if (!this._streaming) this._encoder = new UTF8Encoder(this._options);
        this._streaming = Boolean(options["stream"]);
        var bytes = [];
        var input_stream = new Stream(stringToCodePoints(opt_string));
        /** @type {?(number|!Array.<number>)} */ var result;
        while(!input_stream.endOfStream()){
            result = this._encoder.handler(input_stream, input_stream.read());
            if (result === finished) break;
            if (Array.isArray(result)) bytes.push.apply(bytes, result);
            else bytes.push(result);
        }
        if (!this._streaming) {
            while(true){
                result = this._encoder.handler(input_stream, input_stream.read());
                if (result === finished) break;
                if (Array.isArray(result)) bytes.push.apply(bytes, result);
                else bytes.push(result);
            }
            this._encoder = null;
        }
        return new Uint8Array(bytes);
    }
};
//
// 8. The encoding
//
// 8.1 utf-8
/**
 * @constructor
 * @implements {Decoder}
 * @param {{fatal: boolean}} options
 */ function UTF8Decoder(options) {
    var fatal = options.fatal;
    // utf-8's decoder's has an associated utf-8 code point, utf-8
    // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
    // lower boundary (initially 0x80), and a utf-8 upper boundary
    // (initially 0xBF).
    var /** @type {number} */ utf8_code_point = 0, /** @type {number} */ utf8_bytes_seen = 0, /** @type {number} */ utf8_bytes_needed = 0, /** @type {number} */ utf8_lower_boundary = 0x80, /** @type {number} */ utf8_upper_boundary = 0xBF;
    /**
   * @param {Stream} stream The stream of bytes being decoded.
   * @param {number} bite The next byte read from the stream.
   * @return {?(number|!Array.<number>)} The next code point(s)
   *     decoded, or null if not enough data exists in the input
   *     stream to decode a complete code point.
   */ this.handler = function(stream, bite) {
        // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
        // set utf-8 bytes needed to 0 and return error.
        if (bite === end_of_stream && utf8_bytes_needed !== 0) {
            utf8_bytes_needed = 0;
            return decoderError(fatal);
        }
        // 2. If byte is end-of-stream, return finished.
        if (bite === end_of_stream) return finished;
        // 3. If utf-8 bytes needed is 0, based on byte:
        if (utf8_bytes_needed === 0) {
            // 0x00 to 0x7F
            if (inRange(bite, 0x00, 0x7F)) // Return a code point whose value is byte.
            return bite;
            // 0xC2 to 0xDF
            if (inRange(bite, 0xC2, 0xDF)) {
                // Set utf-8 bytes needed to 1 and utf-8 code point to byte
                // − 0xC0.
                utf8_bytes_needed = 1;
                utf8_code_point = bite - 0xC0;
            } else if (inRange(bite, 0xE0, 0xEF)) {
                // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
                if (bite === 0xE0) utf8_lower_boundary = 0xA0;
                // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
                if (bite === 0xED) utf8_upper_boundary = 0x9F;
                // 3. Set utf-8 bytes needed to 2 and utf-8 code point to
                // byte − 0xE0.
                utf8_bytes_needed = 2;
                utf8_code_point = bite - 0xE0;
            } else if (inRange(bite, 0xF0, 0xF4)) {
                // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
                if (bite === 0xF0) utf8_lower_boundary = 0x90;
                // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
                if (bite === 0xF4) utf8_upper_boundary = 0x8F;
                // 3. Set utf-8 bytes needed to 3 and utf-8 code point to
                // byte − 0xF0.
                utf8_bytes_needed = 3;
                utf8_code_point = bite - 0xF0;
            } else // Return error.
            return decoderError(fatal);
            // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code
            // point to utf-8 code point << (6 × utf-8 bytes needed) and
            // return continue.
            utf8_code_point = utf8_code_point << 6 * utf8_bytes_needed;
            return null;
        }
        // 4. If byte is not in the range utf-8 lower boundary to utf-8
        // upper boundary, run these substeps:
        if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {
            // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
            // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
            // utf-8 upper boundary to 0xBF.
            utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
            utf8_lower_boundary = 0x80;
            utf8_upper_boundary = 0xBF;
            // 2. Prepend byte to stream.
            stream.prepend(bite);
            // 3. Return error.
            return decoderError(fatal);
        }
        // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
        // to 0xBF.
        utf8_lower_boundary = 0x80;
        utf8_upper_boundary = 0xBF;
        // 6. Increase utf-8 bytes seen by one and set utf-8 code point
        // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes
        // needed − utf-8 bytes seen)).
        utf8_bytes_seen += 1;
        utf8_code_point += bite - 0x80 << 6 * (utf8_bytes_needed - utf8_bytes_seen);
        // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,
        // continue.
        if (utf8_bytes_seen !== utf8_bytes_needed) return null;
        // 8. Let code point be utf-8 code point.
        var code_point = utf8_code_point;
        // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
        // seen to 0.
        utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
        // 10. Return a code point whose value is code point.
        return code_point;
    };
}
/**
 * @constructor
 * @implements {Encoder}
 * @param {{fatal: boolean}} options
 */ function UTF8Encoder(options) {
    var fatal = options.fatal;
    /**
   * @param {Stream} stream Input stream.
   * @param {number} code_point Next code point read from the stream.
   * @return {(number|!Array.<number>)} Byte(s) to emit.
   */ this.handler = function(stream, code_point) {
        // 1. If code point is end-of-stream, return finished.
        if (code_point === end_of_stream) return finished;
        // 2. If code point is in the range U+0000 to U+007F, return a
        // byte whose value is code point.
        if (inRange(code_point, 0x0000, 0x007f)) return code_point;
        // 3. Set count and offset based on the range code point is in:
        var count, offset;
        // U+0080 to U+07FF:    1 and 0xC0
        if (inRange(code_point, 0x0080, 0x07FF)) {
            count = 1;
            offset = 0xC0;
        } else if (inRange(code_point, 0x0800, 0xFFFF)) {
            count = 2;
            offset = 0xE0;
        } else if (inRange(code_point, 0x10000, 0x10FFFF)) {
            count = 3;
            offset = 0xF0;
        }
        // 4.Let bytes be a byte sequence whose first byte is (code
        // point >> (6 × count)) + offset.
        var bytes = [
            (code_point >> 6 * count) + offset
        ];
        // 5. Run these substeps while count is greater than 0:
        while(count > 0){
            // 1. Set temp to code point >> (6 × (count − 1)).
            var temp = code_point >> 6 * (count - 1);
            // 2. Append to bytes 0x80 | (temp & 0x3F).
            bytes.push(0x80 | temp & 0x3F);
            // 3. Decrease count by one.
            count -= 1;
        }
        // 6. Return bytes bytes, in order.
        return bytes;
    };
}
exports.TextEncoder = TextEncoder;
exports.TextDecoder = TextDecoder;

},{}],"kjmPo":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Assignable = exports.Enum = void 0;
class Enum {
    constructor(properties){
        if (Object.keys(properties).length !== 1) throw new Error("Enum can only take single value");
        Object.keys(properties).map((key)=>{
            this[key] = properties[key];
            this.enum = key;
        });
    }
}
exports.Enum = Enum;
class Assignable {
    constructor(properties){
        Object.keys(properties).map((key)=>{
            this[key] = properties[key];
        });
    }
}
exports.Assignable = Assignable;

},{}],"l5Tuv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BrowserLocalStorageKeyStore = void 0;
const keystore_1 = require("./keystore");
const key_pair_1 = require("../utils/key_pair");
const LOCAL_STORAGE_KEY_PREFIX = "near-api-js:keystore:";
class BrowserLocalStorageKeyStore extends keystore_1.KeyStore {
    constructor(localStorage = window.localStorage, prefix = LOCAL_STORAGE_KEY_PREFIX){
        super();
        this.localStorage = localStorage;
        this.prefix = prefix;
    }
    /**
     * Sets a local storage item
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @param accountId The NEAR account tied to the key pair
     * @param keyPair The key pair to store in local storage
     */ async setKey(networkId, accountId, keyPair) {
        this.localStorage.setItem(this.storageKeyForSecretKey(networkId, accountId), keyPair.toString());
    }
    /**
     * Gets a key from local storage
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @param accountId The NEAR account tied to the key pair
     * @returns {Promise<KeyPair>}
     */ async getKey(networkId, accountId) {
        const value = this.localStorage.getItem(this.storageKeyForSecretKey(networkId, accountId));
        if (!value) return null;
        return key_pair_1.KeyPair.fromString(value);
    }
    /**
     * Removes a key from local storage
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @param accountId The NEAR account tied to the key pair
     */ async removeKey(networkId, accountId) {
        this.localStorage.removeItem(this.storageKeyForSecretKey(networkId, accountId));
    }
    /**
     * Removes all items from local storage
     */ async clear() {
        for (const key of this.storageKeys())if (key.startsWith(this.prefix)) this.localStorage.removeItem(key);
    }
    /**
     * Get the network(s) from local storage
     * @returns {Promise<string[]>}
     */ async getNetworks() {
        const result = new Set();
        for (const key of this.storageKeys())if (key.startsWith(this.prefix)) {
            const parts = key.substring(this.prefix.length).split(":");
            result.add(parts[1]);
        }
        return Array.from(result.values());
    }
    /**
     * Gets the account(s) from local storage
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @returns{Promise<string[]>}
     */ async getAccounts(networkId) {
        const result = new Array();
        for (const key of this.storageKeys())if (key.startsWith(this.prefix)) {
            const parts = key.substring(this.prefix.length).split(":");
            if (parts[1] === networkId) result.push(parts[0]);
        }
        return result;
    }
    /**
     * Helper function to retrieve a local storage key
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @param accountId The NEAR account tied to the storage keythat's sought
     * @returns {string} An example might be: `near-api-js:keystore:near-friend:default`
     */ storageKeyForSecretKey(networkId, accountId) {
        return `${this.prefix}${accountId}:${networkId}`;
    }
    *storageKeys() {
        for(let i = 0; i < this.localStorage.length; i++)yield this.localStorage.key(i);
    }
}
exports.BrowserLocalStorageKeyStore = BrowserLocalStorageKeyStore;

},{"./keystore":"5Moei","../utils/key_pair":"kBQFP"}],"kgqhu":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MergeKeyStore = void 0;
const keystore_1 = require("./keystore");
/**
 * Keystore which can be used to merge multiple key stores into one virtual key store.
 */ class MergeKeyStore extends keystore_1.KeyStore {
    /**
     * @param keyStores first keystore gets all write calls, read calls are attempted from start to end of array
     */ constructor(keyStores){
        super();
        this.keyStores = keyStores;
    }
    /**
     * Sets a storage item to the first index of a key store array
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @param accountId The NEAR account tied to the key pair
     * @param keyPair The key pair to store in local storage
     */ async setKey(networkId, accountId, keyPair) {
        await this.keyStores[0].setKey(networkId, accountId, keyPair);
    }
    /**
     * Gets a key from the array of key stores
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @param accountId The NEAR account tied to the key pair
     * @returns {Promise<KeyPair>}
     */ async getKey(networkId, accountId) {
        for (const keyStore of this.keyStores){
            const keyPair = await keyStore.getKey(networkId, accountId);
            if (keyPair) return keyPair;
        }
        return null;
    }
    /**
     * Removes a key from the array of key stores
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @param accountId The NEAR account tied to the key pair
     */ async removeKey(networkId, accountId) {
        for (const keyStore of this.keyStores)await keyStore.removeKey(networkId, accountId);
    }
    /**
     * Removes all items from each key store
     */ async clear() {
        for (const keyStore of this.keyStores)await keyStore.clear();
    }
    /**
     * Get the network(s) from the array of key stores
     * @returns {Promise<string[]>}
     */ async getNetworks() {
        const result = new Set();
        for (const keyStore of this.keyStores)for (const network of (await keyStore.getNetworks()))result.add(network);
        return Array.from(result);
    }
    /**
     * Gets the account(s) from the array of key stores
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @returns{Promise<string[]>}
     */ async getAccounts(networkId) {
        const result = new Set();
        for (const keyStore of this.keyStores)for (const account of (await keyStore.getAccounts(networkId)))result.add(account);
        return Array.from(result);
    }
    toString() {
        return `MergeKeyStore(${this.keyStores.join(", ")})`;
    }
}
exports.MergeKeyStore = MergeKeyStore;

},{"./keystore":"5Moei"}],"gtZXS":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WalletConnection = exports.WalletAccount = exports.ConnectedWalletAccount = exports.Near = exports.KeyPair = exports.Signer = exports.InMemorySigner = exports.Contract = exports.Connection = exports.Account = exports.multisig = exports.validators = exports.transactions = exports.utils = exports.providers = exports.accountCreator = void 0;
const providers = __importStar(require("./providers"));
exports.providers = providers;
const utils = __importStar(require("./utils"));
exports.utils = utils;
const transactions = __importStar(require("./transaction"));
exports.transactions = transactions;
const validators = __importStar(require("./validators"));
exports.validators = validators;
const account_1 = require("./account");
Object.defineProperty(exports, "Account", {
    enumerable: true,
    get: function() {
        return account_1.Account;
    }
});
const multisig = __importStar(require("./account_multisig"));
exports.multisig = multisig;
const accountCreator = __importStar(require("./account_creator"));
exports.accountCreator = accountCreator;
const connection_1 = require("./connection");
Object.defineProperty(exports, "Connection", {
    enumerable: true,
    get: function() {
        return connection_1.Connection;
    }
});
const signer_1 = require("./signer");
Object.defineProperty(exports, "Signer", {
    enumerable: true,
    get: function() {
        return signer_1.Signer;
    }
});
Object.defineProperty(exports, "InMemorySigner", {
    enumerable: true,
    get: function() {
        return signer_1.InMemorySigner;
    }
});
const contract_1 = require("./contract");
Object.defineProperty(exports, "Contract", {
    enumerable: true,
    get: function() {
        return contract_1.Contract;
    }
});
const key_pair_1 = require("./utils/key_pair");
Object.defineProperty(exports, "KeyPair", {
    enumerable: true,
    get: function() {
        return key_pair_1.KeyPair;
    }
});
const near_1 = require("./near");
Object.defineProperty(exports, "Near", {
    enumerable: true,
    get: function() {
        return near_1.Near;
    }
});
// TODO: Deprecate and remove WalletAccount
const wallet_account_1 = require("./wallet-account");
Object.defineProperty(exports, "ConnectedWalletAccount", {
    enumerable: true,
    get: function() {
        return wallet_account_1.ConnectedWalletAccount;
    }
});
Object.defineProperty(exports, "WalletAccount", {
    enumerable: true,
    get: function() {
        return wallet_account_1.WalletAccount;
    }
});
Object.defineProperty(exports, "WalletConnection", {
    enumerable: true,
    get: function() {
        return wallet_account_1.WalletConnection;
    }
});

},{"./providers":"gtL2a","./utils":"jOCMH","./transaction":"jJQ5a","./validators":"6CFD9","./account":"hxSQV","./account_multisig":"7q1du","./account_creator":"aQbxV","./connection":"3ThJM","./signer":"a6bzI","./contract":"guo0T","./utils/key_pair":"kBQFP","./near":"9Ying","./wallet-account":"dHM3Z"}],"gtL2a":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ErrorContext = exports.TypedError = exports.getTransactionLastResult = exports.FinalExecutionStatusBasic = exports.JsonRpcProvider = exports.Provider = void 0;
const provider_1 = require("./provider");
Object.defineProperty(exports, "Provider", {
    enumerable: true,
    get: function() {
        return provider_1.Provider;
    }
});
Object.defineProperty(exports, "getTransactionLastResult", {
    enumerable: true,
    get: function() {
        return provider_1.getTransactionLastResult;
    }
});
Object.defineProperty(exports, "FinalExecutionStatusBasic", {
    enumerable: true,
    get: function() {
        return provider_1.FinalExecutionStatusBasic;
    }
});
const json_rpc_provider_1 = require("./json-rpc-provider");
Object.defineProperty(exports, "JsonRpcProvider", {
    enumerable: true,
    get: function() {
        return json_rpc_provider_1.JsonRpcProvider;
    }
});
Object.defineProperty(exports, "TypedError", {
    enumerable: true,
    get: function() {
        return json_rpc_provider_1.TypedError;
    }
});
Object.defineProperty(exports, "ErrorContext", {
    enumerable: true,
    get: function() {
        return json_rpc_provider_1.ErrorContext;
    }
});

},{"./provider":"cUEh0","./json-rpc-provider":"kzXVU"}],"cUEh0":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getTransactionLastResult = exports.Provider = exports.IdType = exports.FinalExecutionStatusBasic = exports.ExecutionStatusBasic = void 0;
var ExecutionStatusBasic;
(function(ExecutionStatusBasic1) {
    ExecutionStatusBasic1["Unknown"] = "Unknown";
    ExecutionStatusBasic1["Pending"] = "Pending";
    ExecutionStatusBasic1["Failure"] = "Failure";
})(ExecutionStatusBasic = exports.ExecutionStatusBasic || (exports.ExecutionStatusBasic = {}));
var FinalExecutionStatusBasic;
(function(FinalExecutionStatusBasic1) {
    FinalExecutionStatusBasic1["NotStarted"] = "NotStarted";
    FinalExecutionStatusBasic1["Started"] = "Started";
    FinalExecutionStatusBasic1["Failure"] = "Failure";
})(FinalExecutionStatusBasic = exports.FinalExecutionStatusBasic || (exports.FinalExecutionStatusBasic = {}));
var IdType;
(function(IdType1) {
    IdType1["Transaction"] = "transaction";
    IdType1["Receipt"] = "receipt";
})(IdType = exports.IdType || (exports.IdType = {}));
class Provider {
}
exports.Provider = Provider;
function getTransactionLastResult(txResult) {
    if (typeof txResult.status === "object" && typeof txResult.status.SuccessValue === "string") {
        const value = Buffer.from(txResult.status.SuccessValue, "base64").toString();
        try {
            return JSON.parse(value);
        } catch (e) {
            return value;
        }
    }
    return null;
}
exports.getTransactionLastResult = getTransactionLastResult;

},{"buffer":"fCgem"}],"kzXVU":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;
const depd_1 = __importDefault(require("depd"));
const provider_1 = require("./provider");
const web_1 = require("../utils/web");
const errors_1 = require("../utils/errors");
Object.defineProperty(exports, "TypedError", {
    enumerable: true,
    get: function() {
        return errors_1.TypedError;
    }
});
Object.defineProperty(exports, "ErrorContext", {
    enumerable: true,
    get: function() {
        return errors_1.ErrorContext;
    }
});
const borsh_1 = require("borsh");
const exponential_backoff_1 = __importDefault(require("../utils/exponential-backoff"));
const rpc_errors_1 = require("../utils/rpc_errors");
// Default number of retries before giving up on a request.
const REQUEST_RETRY_NUMBER = 12;
// Default wait until next retry in millis.
const REQUEST_RETRY_WAIT = 500;
// Exponential back off for waiting to retry.
const REQUEST_RETRY_WAIT_BACKOFF = 1.5;
/// Keep ids unique across all connections.
let _nextId = 123;
class JsonRpcProvider extends provider_1.Provider {
    constructor(url){
        super();
        this.connection = {
            url
        };
    }
    /**
     * Get the current network (ex. test, beta, etc…)
     * @returns {Promise<Network>}
     */ async getNetwork() {
        return {
            name: "test",
            chainId: "test"
        };
    }
    /**
     * Gets the RPC's status
     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)
     * @returns {Promise<NodeStatusResult>}
     */ async status() {
        return this.sendJsonRpc("status", []);
    }
    /**
     * Sends a signed transaction to the RPC
     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await)
     * @param signedTransaction The signed transaction being sent
     * @returns {Promise<FinalExecutionOutcome>}
     */ async sendTransaction(signedTransaction) {
        const bytes = signedTransaction.encode();
        return this.sendJsonRpc("broadcast_tx_commit", [
            Buffer.from(bytes).toString("base64")
        ]);
    }
    /**
     * Gets a transaction's status from the RPC
     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status)
     * @param txHash The hash of the transaction
     * @param accountId The NEAR account that signed the transaction
     * @returns {Promise<FinalExecutionOutcome>}
     */ async txStatus(txHash, accountId) {
        return this.sendJsonRpc("tx", [
            borsh_1.baseEncode(txHash),
            accountId
        ]);
    }
    /**
     * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)
     */ async query(...args) {
        let result;
        if (args.length === 1) result = await this.sendJsonRpc("query", args[0]);
        else {
            const [path, data] = args;
            result = await this.sendJsonRpc("query", [
                path,
                data
            ]);
        }
        if (result && result.error) throw new errors_1.TypedError(`Querying ${args} failed: ${result.error}.\n${JSON.stringify(result, null, 2)}`, rpc_errors_1.getErrorTypeFromErrorMessage(result.error));
        return result;
    }
    /**
     * Query for block info from the RPC
     * See [docs for more info](https://docs.near.org/docs/interaction/rpc#block)
     */ async block(blockQuery) {
        const { finality  } = blockQuery;
        let { blockId  } = blockQuery;
        if (typeof blockQuery !== "object") {
            const deprecate = depd_1.default("JsonRpcProvider.block(blockId)");
            deprecate("use `block({ blockId })` or `block({ finality })` instead");
            blockId = blockQuery;
        }
        return this.sendJsonRpc("block", {
            block_id: blockId,
            finality
        });
    }
    /**
     * Queries for details of a specific chunk appending details of receipts and transactions to the same chunk data provided by a block
     * See [docs for more info](https://docs.near.org/docs/interaction/rpc#chunk)
     * @param chunkId Hash of a chunk ID or shard ID
     * @returns {Promise<ChunkResult>}
     */ async chunk(chunkId) {
        return this.sendJsonRpc("chunk", [
            chunkId
        ]);
    }
    /**
     * Query validators of the epoch defined by given block id.
     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status)
     * @param blockId Block hash or height, or null for latest.
     */ async validators(blockId) {
        return this.sendJsonRpc("validators", [
            blockId
        ]);
    }
    /**
     * Gets EXPERIMENTAL_genesis_config from RPC
     * @returns {Promise<NearProtocolConfig>}
     */ async experimental_genesisConfig() {
        const deprecate = depd_1.default("JsonRpcProvider.experimental_protocolConfig({ sync_checkpoint: 'genesis' })");
        deprecate("use `experimental_protocolConfig` to fetch the up-to-date or genesis protocol config explicitly");
        return await this.sendJsonRpc("EXPERIMENTAL_protocol_config", {
            sync_checkpoint: "genesis"
        });
    }
    /**
     * Gets EXPERIMENTAL_protocol_config from RPC
     * @returns {Promise<NearProtocolConfig>}
     */ async experimental_protocolConfig(blockReference) {
        return await this.sendJsonRpc("EXPERIMENTAL_protocol_config", blockReference);
    }
    /**
     * Gets light_client_proof from RPC (https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)
     * @returns {Promise<LightClientProof>}
     * @deprecated Use `lightClientProof` instead
     */ async experimental_lightClientProof(request) {
        const deprecate = depd_1.default("JsonRpcProvider.experimental_lightClientProof(request)");
        deprecate("use `lightClientProof` instead");
        return await this.lightClientProof(request);
    }
    /**
     * Gets light_client_proof from RPC (https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)
     * @returns {Promise<LightClientProof>}
     */ async lightClientProof(request) {
        return await this.sendJsonRpc("EXPERIMENTAL_light_client_proof", request);
    }
    /**
     * Directly call the RPC specifying the method and params
     * @param method RPC method
     * @param params Parameters to the method
     */ async sendJsonRpc(method, params) {
        const result = await exponential_backoff_1.default(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, async ()=>{
            try {
                const request = {
                    method,
                    params,
                    id: _nextId++,
                    jsonrpc: "2.0"
                };
                const response = await web_1.fetchJson(this.connection, JSON.stringify(request));
                if (response.error) {
                    if (typeof response.error.data === "object") {
                        if (typeof response.error.data.error_message === "string" && typeof response.error.data.error_type === "string") // if error data has error_message and error_type properties, we consider that node returned an error in the old format
                        throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);
                        throw rpc_errors_1.parseRpcError(response.error.data);
                    } else {
                        const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;
                        // NOTE: All this hackery is happening because structured errors not implemented
                        // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved
                        if (response.error.data === "Timeout" || errorMessage.includes("Timeout error") || errorMessage.includes("query has timed out")) throw new errors_1.TypedError(errorMessage, "TimeoutError");
                        throw new errors_1.TypedError(errorMessage, rpc_errors_1.getErrorTypeFromErrorMessage(response.error.data));
                    }
                }
                return response.result;
            } catch (error) {
                if (error.type === "TimeoutError") {
                    console.warn(`Retrying request to ${method} as it has timed out`, params);
                    return null;
                }
                throw error;
            }
        });
        if (!result) throw new errors_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, "RetriesExceeded");
        return result;
    }
    /**
     * Returns gas price for a specific block_height or block_hash.
     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#gas-price)
     * @param blockId Block hash or height, or null for latest.
     */ async gasPrice(blockId) {
        return await this.sendJsonRpc("gas_price", [
            blockId
        ]);
    }
}
exports.JsonRpcProvider = JsonRpcProvider;

},{"buffer":"fCgem","depd":"2jGeI","./provider":"cUEh0","../utils/web":"iSqiB","../utils/errors":"btMYy","borsh":"4JCmN","../utils/exponential-backoff":"51I5X","../utils/rpc_errors":"1TB1L"}],"2jGeI":[function(require,module,exports) {
/*!
 * depd
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */ "use strict";
/**
 * Module exports.
 * @public
 */ module.exports = depd;
/**
 * Create deprecate for namespace in caller.
 */ function depd(namespace) {
    if (!namespace) throw new TypeError("argument namespace is required");
    function deprecate(message) {
    // no-op in browser
    }
    deprecate._file = undefined;
    deprecate._ignored = true;
    deprecate._namespace = namespace;
    deprecate._traced = false;
    deprecate._warned = Object.create(null);
    deprecate.function = wrapfunction;
    deprecate.property = wrapproperty;
    return deprecate;
}
/**
 * Return a wrapped function in a deprecation message.
 *
 * This is a no-op version of the wrapper, which does nothing but call
 * validation.
 */ function wrapfunction(fn, message) {
    if (typeof fn !== "function") throw new TypeError("argument fn must be a function");
    return fn;
}
/**
 * Wrap property in a deprecation message.
 *
 * This is a no-op version of the wrapper, which does nothing but call
 * validation.
 */ function wrapproperty(obj, prop, message) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") throw new TypeError("argument obj must be object");
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    if (!descriptor) throw new TypeError("must call property on owner object");
    if (!descriptor.configurable) throw new TypeError("property must be configurable");
}

},{}],"iSqiB":[function(require,module,exports) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fetchJson = void 0;
const http_errors_1 = __importDefault(require("http-errors"));
const exponential_backoff_1 = __importDefault(require("./exponential-backoff"));
const providers_1 = require("../providers");
const START_WAIT_TIME_MS = 1000;
const BACKOFF_MULTIPLIER = 1.5;
const RETRY_NUMBER = 10;
// TODO: Move into separate module and exclude node-fetch kludge from browser build
let fetch;
if (typeof window === "undefined" || window.name === "nodejs") {
    /* eslint-disable @typescript-eslint/no-var-requires */ const nodeFetch = require("node-fetch");
    const http = require("http");
    const https = require("https");
    /* eslint-enable @typescript-eslint/no-var-requires */ const httpAgent = new http.Agent({
        keepAlive: true
    });
    const httpsAgent = new https.Agent({
        keepAlive: true
    });
    function agent(_parsedURL) {
        if (_parsedURL.protocol === "http:") return httpAgent;
        else return httpsAgent;
    }
    fetch = function(resource, init) {
        return nodeFetch(resource, {
            agent: agent(new URL(resource)),
            ...init
        });
    };
} else fetch = window.fetch;
async function fetchJson(connection, json) {
    let url = null;
    if (typeof connection === "string") url = connection;
    else url = connection.url;
    const response1 = await exponential_backoff_1.default(START_WAIT_TIME_MS, RETRY_NUMBER, BACKOFF_MULTIPLIER, async ()=>{
        try {
            const response = await fetch(url, {
                method: json ? "POST" : "GET",
                body: json ? json : undefined,
                headers: {
                    "Content-Type": "application/json; charset=utf-8"
                }
            });
            if (!response.ok) {
                if (response.status === 503) {
                    console.warn(`Retrying HTTP request for ${url} as it's not available now`);
                    return null;
                }
                throw http_errors_1.default(response.status, await response.text());
            }
            return response;
        } catch (error) {
            if (error.toString().includes("FetchError") || error.toString().includes("Failed to fetch")) {
                console.warn(`Retrying HTTP request for ${url} because of error: ${error}`);
                return null;
            }
            throw error;
        }
    });
    if (!response1) throw new providers_1.TypedError(`Exceeded ${RETRY_NUMBER} attempts for ${url}.`, "RetriesExceeded");
    return await response1.json();
}
exports.fetchJson = fetchJson;

},{"http-errors":"a3NQ3","./exponential-backoff":"51I5X","../providers":"gtL2a","node-fetch":"biJx9","http":"5y8Jo","https":"djrPu"}],"a3NQ3":[function(require,module,exports) {
/*!
 * http-errors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */ "use strict";
/**
 * Module dependencies.
 * @private
 */ var deprecate = require("depd")("http-errors");
var setPrototypeOf = require("setprototypeof");
var statuses = require("statuses");
var inherits = require("inherits");
var toIdentifier = require("toidentifier");
/**
 * Module exports.
 * @public
 */ module.exports = createError;
module.exports.HttpError = createHttpErrorConstructor();
module.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError);
// Populate exports for all constructors
populateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);
/**
 * Get the code class of a status code.
 * @private
 */ function codeClass(status) {
    return Number(String(status).charAt(0) + "00");
}
/**
 * Create a new HTTP Error.
 *
 * @returns {Error}
 * @public
 */ function createError() {
    // so much arity going on ~_~
    var err;
    var msg;
    var status = 500;
    var props = {};
    for(var i = 0; i < arguments.length; i++){
        var arg = arguments[i];
        if (arg instanceof Error) {
            err = arg;
            status = err.status || err.statusCode || status;
            continue;
        }
        switch(typeof arg){
            case "string":
                msg = arg;
                break;
            case "number":
                status = arg;
                if (i !== 0) deprecate("non-first-argument status code; replace with createError(" + arg + ", ...)");
                break;
            case "object":
                props = arg;
                break;
        }
    }
    if (typeof status === "number" && (status < 400 || status >= 600)) deprecate("non-error status code; use only 4xx or 5xx status codes");
    if (typeof status !== "number" || !statuses[status] && (status < 400 || status >= 600)) status = 500;
    // constructor
    var HttpError = createError[status] || createError[codeClass(status)];
    if (!err) {
        // create error
        err = HttpError ? new HttpError(msg) : new Error(msg || statuses[status]);
        Error.captureStackTrace(err, createError);
    }
    if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
        // add properties to generic error
        err.expose = status < 500;
        err.status = err.statusCode = status;
    }
    for(var key in props)if (key !== "status" && key !== "statusCode") err[key] = props[key];
    return err;
}
/**
 * Create HTTP error abstract base class.
 * @private
 */ function createHttpErrorConstructor() {
    function HttpError() {
        throw new TypeError("cannot construct abstract class");
    }
    inherits(HttpError, Error);
    return HttpError;
}
/**
 * Create a constructor for a client error.
 * @private
 */ function createClientErrorConstructor(HttpError, name, code) {
    var className = toClassName(name);
    function ClientError(message) {
        // create the error object
        var msg = message != null ? message : statuses[code];
        var err = new Error(msg);
        // capture a stack trace to the construction point
        Error.captureStackTrace(err, ClientError);
        // adjust the [[Prototype]]
        setPrototypeOf(err, ClientError.prototype);
        // redefine the error message
        Object.defineProperty(err, "message", {
            enumerable: true,
            configurable: true,
            value: msg,
            writable: true
        });
        // redefine the error name
        Object.defineProperty(err, "name", {
            enumerable: false,
            configurable: true,
            value: className,
            writable: true
        });
        return err;
    }
    inherits(ClientError, HttpError);
    nameFunc(ClientError, className);
    ClientError.prototype.status = code;
    ClientError.prototype.statusCode = code;
    ClientError.prototype.expose = true;
    return ClientError;
}
/**
 * Create function to test is a value is a HttpError.
 * @private
 */ function createIsHttpErrorFunction(HttpError) {
    return function isHttpError(val) {
        if (!val || typeof val !== "object") return false;
        if (val instanceof HttpError) return true;
        return val instanceof Error && typeof val.expose === "boolean" && typeof val.statusCode === "number" && val.status === val.statusCode;
    };
}
/**
 * Create a constructor for a server error.
 * @private
 */ function createServerErrorConstructor(HttpError, name, code) {
    var className = toClassName(name);
    function ServerError(message) {
        // create the error object
        var msg = message != null ? message : statuses[code];
        var err = new Error(msg);
        // capture a stack trace to the construction point
        Error.captureStackTrace(err, ServerError);
        // adjust the [[Prototype]]
        setPrototypeOf(err, ServerError.prototype);
        // redefine the error message
        Object.defineProperty(err, "message", {
            enumerable: true,
            configurable: true,
            value: msg,
            writable: true
        });
        // redefine the error name
        Object.defineProperty(err, "name", {
            enumerable: false,
            configurable: true,
            value: className,
            writable: true
        });
        return err;
    }
    inherits(ServerError, HttpError);
    nameFunc(ServerError, className);
    ServerError.prototype.status = code;
    ServerError.prototype.statusCode = code;
    ServerError.prototype.expose = false;
    return ServerError;
}
/**
 * Set the name of a function, if possible.
 * @private
 */ function nameFunc(func, name) {
    var desc = Object.getOwnPropertyDescriptor(func, "name");
    if (desc && desc.configurable) {
        desc.value = name;
        Object.defineProperty(func, "name", desc);
    }
}
/**
 * Populate the exports object with constructors for every error class.
 * @private
 */ function populateConstructorExports(exports, codes, HttpError) {
    codes.forEach(function forEachCode(code) {
        var CodeError;
        var name = toIdentifier(statuses[code]);
        switch(codeClass(code)){
            case 400:
                CodeError = createClientErrorConstructor(HttpError, name, code);
                break;
            case 500:
                CodeError = createServerErrorConstructor(HttpError, name, code);
                break;
        }
        if (CodeError) {
            // export the constructor
            exports[code] = CodeError;
            exports[name] = CodeError;
        }
    });
    // backwards-compatibility
    exports["I'mateapot"] = deprecate.function(exports.ImATeapot, '"I\'mateapot"; use "ImATeapot" instead');
}
/**
 * Get a class name from a name identifier.
 * @private
 */ function toClassName(name) {
    return name.substr(-5) !== "Error" ? name + "Error" : name;
}

},{"depd":"hArTA","setprototypeof":"7xKC9","statuses":"l1u37","inherits":"bRL3M","toidentifier":"gn15y"}],"hArTA":[function(require,module,exports) {
/*!
 * depd
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */ "use strict";
/**
 * Module exports.
 * @public
 */ module.exports = depd;
/**
 * Create deprecate for namespace in caller.
 */ function depd(namespace) {
    if (!namespace) throw new TypeError("argument namespace is required");
    function deprecate(message) {
    // no-op in browser
    }
    deprecate._file = undefined;
    deprecate._ignored = true;
    deprecate._namespace = namespace;
    deprecate._traced = false;
    deprecate._warned = Object.create(null);
    deprecate.function = wrapfunction;
    deprecate.property = wrapproperty;
    return deprecate;
}
/**
 * Return a wrapped function in a deprecation message.
 *
 * This is a no-op version of the wrapper, which does nothing but call
 * validation.
 */ function wrapfunction(fn, message) {
    if (typeof fn !== "function") throw new TypeError("argument fn must be a function");
    return fn;
}
/**
 * Wrap property in a deprecation message.
 *
 * This is a no-op version of the wrapper, which does nothing but call
 * validation.
 */ function wrapproperty(obj, prop, message) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") throw new TypeError("argument obj must be object");
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    if (!descriptor) throw new TypeError("must call property on owner object");
    if (!descriptor.configurable) throw new TypeError("property must be configurable");
}

},{}],"7xKC9":[function(require,module,exports) {
"use strict";
/* eslint no-proto: 0 */ module.exports = Object.setPrototypeOf || (({
    __proto__: []
}) instanceof Array ? setProtoOf : mixinProperties);
function setProtoOf(obj, proto) {
    obj.__proto__ = proto;
    return obj;
}
function mixinProperties(obj, proto) {
    for(var prop in proto)if (!Object.prototype.hasOwnProperty.call(obj, prop)) obj[prop] = proto[prop];
    return obj;
}

},{}],"l1u37":[function(require,module,exports) {
/*!
 * statuses
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */ "use strict";
/**
 * Module dependencies.
 * @private
 */ var codes = require("./codes.json");
/**
 * Module exports.
 * @public
 */ module.exports = status;
// status code to message map
status.STATUS_CODES = codes;
// array of status codes
status.codes = populateStatusesMap(status, codes);
// status codes for redirects
status.redirect = {
    300: true,
    301: true,
    302: true,
    303: true,
    305: true,
    307: true,
    308: true
};
// status codes for empty bodies
status.empty = {
    204: true,
    205: true,
    304: true
};
// status codes for when you should retry the request
status.retry = {
    502: true,
    503: true,
    504: true
};
/**
 * Populate the statuses map for given codes.
 * @private
 */ function populateStatusesMap(statuses, codes1) {
    var arr = [];
    Object.keys(codes1).forEach(function forEachCode(code) {
        var message = codes1[code];
        var status1 = Number(code);
        // Populate properties
        statuses[status1] = message;
        statuses[message] = status1;
        statuses[message.toLowerCase()] = status1;
        // Add to array
        arr.push(status1);
    });
    return arr;
}
/**
 * Get the status code.
 *
 * Given a number, this will throw if it is not a known status
 * code, otherwise the code will be returned. Given a string,
 * the string will be parsed for a number and return the code
 * if valid, otherwise will lookup the code assuming this is
 * the status message.
 *
 * @param {string|number} code
 * @returns {number}
 * @public
 */ function status(code) {
    if (typeof code === "number") {
        if (!status[code]) throw new Error("invalid status code: " + code);
        return code;
    }
    if (typeof code !== "string") throw new TypeError("code must be a number or string");
    // '403'
    var n = parseInt(code, 10);
    if (!isNaN(n)) {
        if (!status[n]) throw new Error("invalid status code: " + n);
        return n;
    }
    n = status[code.toLowerCase()];
    if (!n) throw new Error('invalid status message: "' + code + '"');
    return n;
}

},{"./codes.json":"8IptR"}],"8IptR":[function(require,module,exports) {
module.exports = JSON.parse('{"100":"Continue","101":"Switching Protocols","102":"Processing","103":"Early Hints","200":"OK","201":"Created","202":"Accepted","203":"Non-Authoritative Information","204":"No Content","205":"Reset Content","206":"Partial Content","207":"Multi-Status","208":"Already Reported","226":"IM Used","300":"Multiple Choices","301":"Moved Permanently","302":"Found","303":"See Other","304":"Not Modified","305":"Use Proxy","306":"(Unused)","307":"Temporary Redirect","308":"Permanent Redirect","400":"Bad Request","401":"Unauthorized","402":"Payment Required","403":"Forbidden","404":"Not Found","405":"Method Not Allowed","406":"Not Acceptable","407":"Proxy Authentication Required","408":"Request Timeout","409":"Conflict","410":"Gone","411":"Length Required","412":"Precondition Failed","413":"Payload Too Large","414":"URI Too Long","415":"Unsupported Media Type","416":"Range Not Satisfiable","417":"Expectation Failed","418":"I\'m a teapot","421":"Misdirected Request","422":"Unprocessable Entity","423":"Locked","424":"Failed Dependency","425":"Unordered Collection","426":"Upgrade Required","428":"Precondition Required","429":"Too Many Requests","431":"Request Header Fields Too Large","451":"Unavailable For Legal Reasons","500":"Internal Server Error","501":"Not Implemented","502":"Bad Gateway","503":"Service Unavailable","504":"Gateway Timeout","505":"HTTP Version Not Supported","506":"Variant Also Negotiates","507":"Insufficient Storage","508":"Loop Detected","509":"Bandwidth Limit Exceeded","510":"Not Extended","511":"Network Authentication Required"}');

},{}],"bRL3M":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"gn15y":[function(require,module,exports) {
/*!
 * toidentifier
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */ "use strict";
/**
 * Module exports.
 * @public
 */ module.exports = toIdentifier;
/**
 * Trasform the given string into a JavaScript identifier
 *
 * @param {string} str
 * @returns {string}
 * @public
 */ function toIdentifier(str) {
    return str.split(" ").map(function(token) {
        return token.slice(0, 1).toUpperCase() + token.slice(1);
    }).join("").replace(/[^ _0-9a-z]/gi, "");
}

},{}],"51I5X":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
async function exponentialBackoff(startWaitTime, retryNumber, waitBackoff, getResult) {
    // TODO: jitter?
    let waitTime = startWaitTime;
    for(let i = 0; i < retryNumber; i++){
        const result = await getResult();
        if (result) return result;
        await sleep(waitTime);
        waitTime *= waitBackoff;
        i++;
    }
    return null;
}
exports.default = exponentialBackoff;
// Sleep given number of millis.
function sleep(millis) {
    return new Promise((resolve)=>setTimeout(resolve, millis));
}

},{}],"biJx9":[function(require,module,exports) {
"use strict";
// ref: https://github.com/tc39/proposal-global
var getGlobal = function() {
    // the only reliable means to get the global object is
    // `Function('return this')()`
    // However, this causes CSP violations in Chrome apps.
    if (typeof self !== "undefined") return self;
    if (typeof window !== "undefined") return window;
    if (typeof global !== "undefined") return global;
    throw new Error("unable to locate global object");
};
var global = getGlobal();
module.exports = exports = global.fetch;
// Needed for TypeScript and Webpack.
if (global.fetch) exports.default = global.fetch.bind(global);
exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;

},{}],"5y8Jo":[function(require,module,exports) {
var global = arguments[3];
var ClientRequest = require("./lib/request");
var response = require("./lib/response");
var extend = require("xtend");
var statusCodes = require("builtin-status-codes");
var url = require("url");
var http = exports;
http.request = function(opts, cb) {
    if (typeof opts === "string") opts = url.parse(opts);
    else opts = extend(opts);
    // Normally, the page is loaded from http or https, so not specifying a protocol
    // will result in a (valid) protocol-relative url. However, this won't work if
    // the protocol is something else, like 'file:'
    var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? "http:" : "";
    var protocol = opts.protocol || defaultProtocol;
    var host = opts.hostname || opts.host;
    var port = opts.port;
    var path = opts.path || "/";
    // Necessary for IPv6 addresses
    if (host && host.indexOf(":") !== -1) host = "[" + host + "]";
    // This may be a relative url. The browser should always be able to interpret it correctly.
    opts.url = (host ? protocol + "//" + host : "") + (port ? ":" + port : "") + path;
    opts.method = (opts.method || "GET").toUpperCase();
    opts.headers = opts.headers || {};
    // Also valid opts.auth, opts.mode
    var req = new ClientRequest(opts);
    if (cb) req.on("response", cb);
    return req;
};
http.get = function get(opts, cb) {
    var req = http.request(opts, cb);
    req.end();
    return req;
};
http.ClientRequest = ClientRequest;
http.IncomingMessage = response.IncomingMessage;
http.Agent = function() {};
http.Agent.defaultMaxSockets = 4;
http.globalAgent = new http.Agent();
http.STATUS_CODES = statusCodes;
http.METHODS = [
    "CHECKOUT",
    "CONNECT",
    "COPY",
    "DELETE",
    "GET",
    "HEAD",
    "LOCK",
    "M-SEARCH",
    "MERGE",
    "MKACTIVITY",
    "MKCOL",
    "MOVE",
    "NOTIFY",
    "OPTIONS",
    "PATCH",
    "POST",
    "PROPFIND",
    "PROPPATCH",
    "PURGE",
    "PUT",
    "REPORT",
    "SEARCH",
    "SUBSCRIBE",
    "TRACE",
    "UNLOCK",
    "UNSUBSCRIBE"
];

},{"./lib/request":"csW06","./lib/response":"47huq","xtend":"93zjj","builtin-status-codes":"iqSVp","url":"7qjc7"}],"csW06":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
var Buffer = require("buffer").Buffer;
var capability = require("./capability");
var inherits = require("inherits");
var response = require("./response");
var stream = require("readable-stream");
var IncomingMessage = response.IncomingMessage;
var rStates = response.readyStates;
function decideMode(preferBinary, useFetch) {
    if (capability.fetch && useFetch) return "fetch";
    else if (capability.mozchunkedarraybuffer) return "moz-chunked-arraybuffer";
    else if (capability.msstream) return "ms-stream";
    else if (capability.arraybuffer && preferBinary) return "arraybuffer";
    else return "text";
}
var ClientRequest = module.exports = function(opts) {
    var self = this;
    stream.Writable.call(self);
    self._opts = opts;
    self._body = [];
    self._headers = {};
    if (opts.auth) self.setHeader("Authorization", "Basic " + Buffer.from(opts.auth).toString("base64"));
    Object.keys(opts.headers).forEach(function(name) {
        self.setHeader(name, opts.headers[name]);
    });
    var preferBinary;
    var useFetch = true;
    if (opts.mode === "disable-fetch" || "requestTimeout" in opts && !capability.abortController) {
        // If the use of XHR should be preferred. Not typically needed.
        useFetch = false;
        preferBinary = true;
    } else if (opts.mode === "prefer-streaming") // If streaming is a high priority but binary compatibility and
    // the accuracy of the 'content-type' header aren't
    preferBinary = false;
    else if (opts.mode === "allow-wrong-content-type") // If streaming is more important than preserving the 'content-type' header
    preferBinary = !capability.overrideMimeType;
    else if (!opts.mode || opts.mode === "default" || opts.mode === "prefer-fast") // Use binary if text streaming may corrupt data or the content-type header, or for speed
    preferBinary = true;
    else throw new Error("Invalid value for opts.mode");
    self._mode = decideMode(preferBinary, useFetch);
    self._fetchTimer = null;
    self._socketTimeout = null;
    self._socketTimer = null;
    self.on("finish", function() {
        self._onFinish();
    });
};
inherits(ClientRequest, stream.Writable);
ClientRequest.prototype.setHeader = function(name, value) {
    var self = this;
    var lowerName = name.toLowerCase();
    // This check is not necessary, but it prevents warnings from browsers about setting unsafe
    // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
    // http-browserify did it, so I will too.
    if (unsafeHeaders.indexOf(lowerName) !== -1) return;
    self._headers[lowerName] = {
        name: name,
        value: value
    };
};
ClientRequest.prototype.getHeader = function(name) {
    var header = this._headers[name.toLowerCase()];
    if (header) return header.value;
    return null;
};
ClientRequest.prototype.removeHeader = function(name) {
    var self = this;
    delete self._headers[name.toLowerCase()];
};
ClientRequest.prototype._onFinish = function() {
    var self = this;
    if (self._destroyed) return;
    var opts = self._opts;
    if ("timeout" in opts && opts.timeout !== 0) self.setTimeout(opts.timeout);
    var headersObj = self._headers;
    var body = null;
    if (opts.method !== "GET" && opts.method !== "HEAD") body = new Blob(self._body, {
        type: (headersObj["content-type"] || {}).value || ""
    });
    // create flattened list of headers
    var headersList = [];
    Object.keys(headersObj).forEach(function(keyName) {
        var name = headersObj[keyName].name;
        var value = headersObj[keyName].value;
        if (Array.isArray(value)) value.forEach(function(v) {
            headersList.push([
                name,
                v
            ]);
        });
        else headersList.push([
            name,
            value
        ]);
    });
    if (self._mode === "fetch") {
        var signal = null;
        if (capability.abortController) {
            var controller = new AbortController();
            signal = controller.signal;
            self._fetchAbortController = controller;
            if ("requestTimeout" in opts && opts.requestTimeout !== 0) self._fetchTimer = global.setTimeout(function() {
                self.emit("requestTimeout");
                if (self._fetchAbortController) self._fetchAbortController.abort();
            }, opts.requestTimeout);
        }
        global.fetch(self._opts.url, {
            method: self._opts.method,
            headers: headersList,
            body: body || undefined,
            mode: "cors",
            credentials: opts.withCredentials ? "include" : "same-origin",
            signal: signal
        }).then(function(response1) {
            self._fetchResponse = response1;
            self._resetTimers(false);
            self._connect();
        }, function(reason) {
            self._resetTimers(true);
            if (!self._destroyed) self.emit("error", reason);
        });
    } else {
        var xhr = self._xhr = new global.XMLHttpRequest();
        try {
            xhr.open(self._opts.method, self._opts.url, true);
        } catch (err) {
            process.nextTick(function() {
                self.emit("error", err);
            });
            return;
        }
        // Can't set responseType on really old browsers
        if ("responseType" in xhr) xhr.responseType = self._mode;
        if ("withCredentials" in xhr) xhr.withCredentials = !!opts.withCredentials;
        if (self._mode === "text" && "overrideMimeType" in xhr) xhr.overrideMimeType("text/plain; charset=x-user-defined");
        if ("requestTimeout" in opts) {
            xhr.timeout = opts.requestTimeout;
            xhr.ontimeout = function() {
                self.emit("requestTimeout");
            };
        }
        headersList.forEach(function(header) {
            xhr.setRequestHeader(header[0], header[1]);
        });
        self._response = null;
        xhr.onreadystatechange = function() {
            switch(xhr.readyState){
                case rStates.LOADING:
                case rStates.DONE:
                    self._onXHRProgress();
                    break;
            }
        };
        // Necessary for streaming in Firefox, since xhr.response is ONLY defined
        // in onprogress, not in onreadystatechange with xhr.readyState = 3
        if (self._mode === "moz-chunked-arraybuffer") xhr.onprogress = function() {
            self._onXHRProgress();
        };
        xhr.onerror = function() {
            if (self._destroyed) return;
            self._resetTimers(true);
            self.emit("error", new Error("XHR error"));
        };
        try {
            xhr.send(body);
        } catch (err1) {
            process.nextTick(function() {
                self.emit("error", err1);
            });
            return;
        }
    }
};
/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */ function statusValid(xhr) {
    try {
        var status = xhr.status;
        return status !== null && status !== 0;
    } catch (e) {
        return false;
    }
}
ClientRequest.prototype._onXHRProgress = function() {
    var self = this;
    self._resetTimers(false);
    if (!statusValid(self._xhr) || self._destroyed) return;
    if (!self._response) self._connect();
    self._response._onXHRProgress(self._resetTimers.bind(self));
};
ClientRequest.prototype._connect = function() {
    var self = this;
    if (self._destroyed) return;
    self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._resetTimers.bind(self));
    self._response.on("error", function(err) {
        self.emit("error", err);
    });
    self.emit("response", self._response);
};
ClientRequest.prototype._write = function(chunk, encoding, cb) {
    var self = this;
    self._body.push(chunk);
    cb();
};
ClientRequest.prototype._resetTimers = function(done) {
    var self = this;
    global.clearTimeout(self._socketTimer);
    self._socketTimer = null;
    if (done) {
        global.clearTimeout(self._fetchTimer);
        self._fetchTimer = null;
    } else if (self._socketTimeout) self._socketTimer = global.setTimeout(function() {
        self.emit("timeout");
    }, self._socketTimeout);
};
ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function(err) {
    var self = this;
    self._destroyed = true;
    self._resetTimers(true);
    if (self._response) self._response._destroyed = true;
    if (self._xhr) self._xhr.abort();
    else if (self._fetchAbortController) self._fetchAbortController.abort();
    if (err) self.emit("error", err);
};
ClientRequest.prototype.end = function(data, encoding, cb) {
    var self = this;
    if (typeof data === "function") {
        cb = data;
        data = undefined;
    }
    stream.Writable.prototype.end.call(self, data, encoding, cb);
};
ClientRequest.prototype.setTimeout = function(timeout, cb) {
    var self = this;
    if (cb) self.once("timeout", cb);
    self._socketTimeout = timeout;
    self._resetTimers(false);
};
ClientRequest.prototype.flushHeaders = function() {};
ClientRequest.prototype.setNoDelay = function() {};
ClientRequest.prototype.setSocketKeepAlive = function() {};
// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "cookie",
    "cookie2",
    "date",
    "dnt",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "via"
];

},{"process":"d5jf4","buffer":"fCgem","./capability":"jih7t","inherits":"bRL3M","./response":"47huq","readable-stream":"jXNWE"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"jih7t":[function(require,module,exports) {
var global = arguments[3];
exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream);
exports.writableStream = isFunction(global.WritableStream);
exports.abortController = isFunction(global.AbortController);
// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr;
function getXHR() {
    // Cache the xhr value
    if (xhr !== undefined) return xhr;
    if (global.XMLHttpRequest) {
        xhr = new global.XMLHttpRequest();
        // If XDomainRequest is available (ie only, where xhr might not work
        // cross domain), use the page location. Otherwise use example.com
        // Note: this doesn't actually make an http request.
        try {
            xhr.open("GET", global.XDomainRequest ? "/" : "https://example.com");
        } catch (e) {
            xhr = null;
        }
    } else // Service workers don't have XHR
    xhr = null;
    return xhr;
}
function checkTypeSupport(type) {
    var xhr1 = getXHR();
    if (!xhr1) return false;
    try {
        xhr1.responseType = type;
        return xhr1.responseType === type;
    } catch (e) {}
    return false;
}
// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || checkTypeSupport("arraybuffer");
// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && checkTypeSupport("ms-stream");
exports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport("moz-chunked-arraybuffer");
// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);
function isFunction(value) {
    return typeof value === "function";
}
xhr = null // Help gc
;

},{}],"47huq":[function(require,module,exports) {
var process = require("process");
var Buffer = require("buffer").Buffer;
var global = arguments[3];
var capability = require("./capability");
var inherits = require("inherits");
var stream = require("readable-stream");
var rStates = exports.readyStates = {
    UNSENT: 0,
    OPENED: 1,
    HEADERS_RECEIVED: 2,
    LOADING: 3,
    DONE: 4
};
var IncomingMessage = exports.IncomingMessage = function(xhr, response, mode, resetTimers) {
    var self = this;
    stream.Readable.call(self);
    self._mode = mode;
    self.headers = {};
    self.rawHeaders = [];
    self.trailers = {};
    self.rawTrailers = [];
    // Fake the 'close' event, but only once 'end' fires
    self.on("end", function() {
        // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
        process.nextTick(function() {
            self.emit("close");
        });
    });
    if (mode === "fetch") {
        self._fetchResponse = response;
        self.url = response.url;
        self.statusCode = response.status;
        self.statusMessage = response.statusText;
        response.headers.forEach(function(header, key) {
            self.headers[key.toLowerCase()] = header;
            self.rawHeaders.push(key, header);
        });
        if (capability.writableStream) {
            var writable = new WritableStream({
                write: function(chunk) {
                    resetTimers(false);
                    return new Promise(function(resolve, reject) {
                        if (self._destroyed) reject();
                        else if (self.push(Buffer.from(chunk))) resolve();
                        else self._resumeFetch = resolve;
                    });
                },
                close: function() {
                    resetTimers(true);
                    if (!self._destroyed) self.push(null);
                },
                abort: function(err) {
                    resetTimers(true);
                    if (!self._destroyed) self.emit("error", err);
                }
            });
            try {
                response.body.pipeTo(writable).catch(function(err) {
                    resetTimers(true);
                    if (!self._destroyed) self.emit("error", err);
                });
                return;
            } catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
        }
        // fallback for when writableStream or pipeTo aren't available
        var reader = response.body.getReader();
        function read() {
            reader.read().then(function(result) {
                if (self._destroyed) return;
                resetTimers(result.done);
                if (result.done) {
                    self.push(null);
                    return;
                }
                self.push(Buffer.from(result.value));
                read();
            }).catch(function(err) {
                resetTimers(true);
                if (!self._destroyed) self.emit("error", err);
            });
        }
        read();
    } else {
        self._xhr = xhr;
        self._pos = 0;
        self.url = xhr.responseURL;
        self.statusCode = xhr.status;
        self.statusMessage = xhr.statusText;
        var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
        headers.forEach(function(header) {
            var matches = header.match(/^([^:]+):\s*(.*)/);
            if (matches) {
                var key = matches[1].toLowerCase();
                if (key === "set-cookie") {
                    if (self.headers[key] === undefined) self.headers[key] = [];
                    self.headers[key].push(matches[2]);
                } else if (self.headers[key] !== undefined) self.headers[key] += ", " + matches[2];
                else self.headers[key] = matches[2];
                self.rawHeaders.push(matches[1], matches[2]);
            }
        });
        self._charset = "x-user-defined";
        if (!capability.overrideMimeType) {
            var mimeType = self.rawHeaders["mime-type"];
            if (mimeType) {
                var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
                if (charsetMatch) self._charset = charsetMatch[1].toLowerCase();
            }
            if (!self._charset) self._charset = "utf-8" // best guess
            ;
        }
    }
};
inherits(IncomingMessage, stream.Readable);
IncomingMessage.prototype._read = function() {
    var self = this;
    var resolve = self._resumeFetch;
    if (resolve) {
        self._resumeFetch = null;
        resolve();
    }
};
IncomingMessage.prototype._onXHRProgress = function(resetTimers) {
    var self = this;
    var xhr = self._xhr;
    var response = null;
    switch(self._mode){
        case "text":
            response = xhr.responseText;
            if (response.length > self._pos) {
                var newData = response.substr(self._pos);
                if (self._charset === "x-user-defined") {
                    var buffer = Buffer.alloc(newData.length);
                    for(var i = 0; i < newData.length; i++)buffer[i] = newData.charCodeAt(i) & 0xff;
                    self.push(buffer);
                } else self.push(newData, self._charset);
                self._pos = response.length;
            }
            break;
        case "arraybuffer":
            if (xhr.readyState !== rStates.DONE || !xhr.response) break;
            response = xhr.response;
            self.push(Buffer.from(new Uint8Array(response)));
            break;
        case "moz-chunked-arraybuffer":
            response = xhr.response;
            if (xhr.readyState !== rStates.LOADING || !response) break;
            self.push(Buffer.from(new Uint8Array(response)));
            break;
        case "ms-stream":
            response = xhr.response;
            if (xhr.readyState !== rStates.LOADING) break;
            var reader = new global.MSStreamReader();
            reader.onprogress = function() {
                if (reader.result.byteLength > self._pos) {
                    self.push(Buffer.from(new Uint8Array(reader.result.slice(self._pos))));
                    self._pos = reader.result.byteLength;
                }
            };
            reader.onload = function() {
                resetTimers(true);
                self.push(null);
            };
            // reader.onerror = ??? // TODO: this
            reader.readAsArrayBuffer(response);
            break;
    }
    // The ms-stream case handles end separately in reader.onload()
    if (self._xhr.readyState === rStates.DONE && self._mode !== "ms-stream") {
        resetTimers(true);
        self.push(null);
    }
};

},{"buffer":"fCgem","process":"d5jf4","./capability":"jih7t","inherits":"bRL3M","readable-stream":"jXNWE"}],"jXNWE":[function(require,module,exports) {
exports = module.exports = require("./lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require("./lib/_stream_writable.js");
exports.Duplex = require("./lib/_stream_duplex.js");
exports.Transform = require("./lib/_stream_transform.js");
exports.PassThrough = require("./lib/_stream_passthrough.js");
exports.finished = require("./lib/internal/streams/end-of-stream.js");
exports.pipeline = require("./lib/internal/streams/pipeline.js");

},{"./lib/_stream_readable.js":"6NdbQ","./lib/_stream_writable.js":"gTkcq","./lib/_stream_duplex.js":"kKNA3","./lib/_stream_transform.js":"ba8Mr","./lib/_stream_passthrough.js":"2xP98","./lib/internal/streams/end-of-stream.js":"aOMy2","./lib/internal/streams/pipeline.js":"fyp4t"}],"6NdbQ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var global = arguments[3];
var process = require("process");
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require("events").EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
/*</replacement>*/ var Buffer = require("buffer").Buffer;
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require("util");
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog("stream");
else debug = function debug() {};
/*</replacement>*/ var BufferList = require("./internal/streams/buffer_list");
var destroyImpl = require("./internal/streams/destroy");
var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require("inherits")(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require("./_stream_duplex");
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require("./_stream_duplex");
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug("need readable", doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
    } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug("onend");
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug("cleanup"); // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    prependListener(dest, "error", onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit("pipe", src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug("pipe resume");
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount("data") > 0) self.resume();
}
function nReadingNextTick(self) {
    debug("readable nexttick read 0");
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug("resume"); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < kProxyEvents.length; n1++)stream.on(kProxyEvents[n1], this.emit.bind(this, kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === "function") Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require("./internal/streams/async_iterator");
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug("endReadableNT", state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === "function") Readable.from = function(iterable, opts) {
    if (from === undefined) from = require("./internal/streams/from");
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"process":"d5jf4","events":"1VQLm","./internal/streams/stream":"60BLS","buffer":"fCgem","util":"jhUEF","./internal/streams/buffer_list":"hf3P2","./internal/streams/destroy":"YI8DF","./internal/streams/state":"61BRN","../errors":"aJlwj","inherits":"bRL3M","./_stream_duplex":"kKNA3","string_decoder/":"3vmkr","./internal/streams/async_iterator":"k019Y","./internal/streams/from":"ak0YH"}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"60BLS":[function(require,module,exports) {
module.exports = require("events").EventEmitter;

},{"events":"1VQLm"}],"hf3P2":[function(require,module,exports) {
"use strict";
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var _require = require("buffer"), Buffer = _require.Buffer;
var _require2 = require("util"), inspect = _require2.inspect;
var custom = inspect && inspect.custom || "inspect";
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

},{"buffer":"fCgem","util":"jhUEF"}],"YI8DF":[function(require,module,exports) {
"use strict"; // undocumented cb() API, needed for core, not for public API
var process = require("process");
function destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit("error", err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"process":"d5jf4"}],"61BRN":[function(require,module,exports) {
"use strict";
var ERR_INVALID_OPT_VALUE = require("../../../errors").codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"../../../errors":"aJlwj"}],"aJlwj":[function(require,module,exports) {
"use strict";
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
module.exports.codes = codes;

},{}],"kKNA3":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
"use strict";
var process = require("process");
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys1 = [];
    for(var key in obj)keys1.push(key);
    return keys1;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require("./_stream_readable");
var Writable = require("./_stream_writable");
require("inherits")(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"process":"d5jf4","./_stream_readable":"6NdbQ","./_stream_writable":"gTkcq","inherits":"bRL3M"}],"gTkcq":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
"use strict";
var process = require("process");
var global = arguments[3];
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require("util-deprecate")
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
/*</replacement>*/ var Buffer = require("buffer").Buffer;
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require("./internal/streams/destroy");
var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require("inherits")(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require("./_stream_duplex");
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require("./_stream_duplex"); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
} // if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"process":"d5jf4","util-deprecate":"j92NQ","./internal/streams/stream":"60BLS","buffer":"fCgem","./internal/streams/destroy":"YI8DF","./internal/streams/state":"61BRN","../errors":"aJlwj","inherits":"bRL3M","./_stream_duplex":"kKNA3"}],"j92NQ":[function(require,module,exports) {
var global = arguments[3];
/**
 * Module exports.
 */ module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config("noDeprecation")) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config("throwDeprecation")) throw new Error(msg);
            else if (config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

},{}],"3vmkr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
/*<replacement>*/ var Buffer = require("safe-buffer").Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "\uFFFD";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "\uFFFD";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "\uFFFD";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "\uFFFD";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

},{"safe-buffer":"eW7r9"}],"k019Y":[function(require,module,exports) {
"use strict";
var process = require("process");
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var finished = require("./end-of-stream");
var kLastResolve = Symbol("lastResolve");
var kLastReject = Symbol("lastReject");
var kError = Symbol("error");
var kEnded = Symbol("ended");
var kLastPromise = Symbol("lastPromise");
var kHandlePromise = Symbol("handlePromise");
var kStream = Symbol("stream");
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"process":"d5jf4","./end-of-stream":"aOMy2"}],"aOMy2":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var ERR_STREAM_PREMATURE_CLOSE = require("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function eos(stream, opts, callback) {
    if (typeof opts === "function") return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = eos;

},{"../../../errors":"aJlwj"}],"ak0YH":[function(require,module,exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

},{}],"ba8Mr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = Transform;
var _require$codes = require("../errors").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require("./_stream_duplex");
require("inherits")(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"../errors":"aJlwj","./_stream_duplex":"kKNA3","inherits":"bRL3M"}],"2xP98":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = PassThrough;
var Transform = require("./_stream_transform");
require("inherits")(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"./_stream_transform":"ba8Mr","inherits":"bRL3M"}],"fyp4t":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require("../../../errors").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if (eos === undefined) eos = require("./end-of-stream");
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== "function") return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"../../../errors":"aJlwj","./end-of-stream":"aOMy2"}],"93zjj":[function(require,module,exports) {
module.exports = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;
function extend() {
    var target = {};
    for(var i = 0; i < arguments.length; i++){
        var source = arguments[i];
        for(var key in source)if (hasOwnProperty.call(source, key)) target[key] = source[key];
    }
    return target;
}

},{}],"iqSVp":[function(require,module,exports) {
module.exports = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Unordered Collection",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
};

},{}],"7qjc7":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var punycode = require("punycode");
var util = require("./util");
exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;
function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
}
// Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = [
    "<",
    ">",
    '"',
    "`",
    " ",
    "\r",
    "\n",
    "	"
], // RFC 2396: characters not allowed for various reasons.
unwise = [
    "{",
    "}",
    "|",
    "\\",
    "^",
    "`"
].concat(delims), // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = [
    "'"
].concat(unwise), // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = [
    "%",
    "/",
    "?",
    ";",
    "#"
].concat(autoEscape), hostEndingChars = [
    "/",
    "?",
    "#"
], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
    "javascript": true,
    "javascript:": true
}, // protocols that never have a hostname.
hostlessProtocol = {
    "javascript": true,
    "javascript:": true
}, // protocols that always contain a // bit.
slashedProtocol = {
    "http": true,
    "https": true,
    "ftp": true,
    "gopher": true,
    "file": true,
    "http:": true,
    "https:": true,
    "ftp:": true,
    "gopher:": true,
    "file:": true
}, querystring = require("querystring");
function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && util.isObject(url) && url instanceof Url) return url;
    var u = new Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
}
Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    if (!util.isString(url)) throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, "/");
    url = uSplit.join(splitter);
    var rest = url;
    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();
    if (!slashesDenoteHost && url.split("#").length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];
            if (simplePath[2]) {
                this.search = simplePath[2];
                if (parseQueryString) this.query = querystring.parse(this.search.substr(1));
                else this.query = this.search.substr(1);
            } else if (parseQueryString) {
                this.search = "";
                this.query = {};
            }
            return this;
        }
    }
    var proto = protocolPattern.exec(rest);
    if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
    }
    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
        }
    }
    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for(var i = 0; i < hostEndingChars.length; i++){
            var hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) // atSign can be anywhere.
        atSign = rest.lastIndexOf("@");
        else // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf("@", hostEnd);
        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
        }
        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for(var i = 0; i < nonHostChars.length; i++){
            var hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1) hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        // pull out port.
        this.parseHost();
        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        this.hostname = this.hostname || "";
        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        // validate a little.
        if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for(var i = 0, l = hostparts.length; i < l; i++){
                var part = hostparts[i];
                if (!part) continue;
                if (!part.match(hostnamePartPattern)) {
                    var newpart = "";
                    for(var j = 0, k = part.length; j < k; j++)if (part.charCodeAt(j) > 127) // we replace non-ASCII char with a temporary placeholder
                    // we need this to make sure size of hostname is not
                    // broken by replacing non-ASCII by nothing
                    newpart += "x";
                    else newpart += part[j];
                    // we test again with ASCII char only
                    if (!newpart.match(hostnamePartPattern)) {
                        var validParts = hostparts.slice(0, i);
                        var notHost = hostparts.slice(i + 1);
                        var bit = part.match(hostnamePartStart);
                        if (bit) {
                            validParts.push(bit[1]);
                            notHost.unshift(bit[2]);
                        }
                        if (notHost.length) rest = "/" + notHost.join(".") + rest;
                        this.hostname = validParts.join(".");
                        break;
                    }
                }
            }
        }
        if (this.hostname.length > hostnameMaxLen) this.hostname = "";
        else // hostnames are always lower case.
        this.hostname = this.hostname.toLowerCase();
        if (!ipv6Hostname) // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        this.hostname = punycode.toASCII(this.hostname);
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if (rest[0] !== "/") rest = "/" + rest;
        }
    }
    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!unsafeProtocol[lowerProto]) // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for(var i = 0, l = autoEscape.length; i < l; i++){
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1) continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) esc = escape(ae);
        rest = rest.split(ae).join(esc);
    }
    // chop off from the tail first.
    var hash = rest.indexOf("#");
    if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf("?");
    if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) this.query = querystring.parse(this.query);
        rest = rest.slice(0, qm);
    } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = "";
        this.query = {};
    }
    if (rest) this.pathname = rest;
    if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) this.pathname = "/";
    //to support http.request
    if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
    }
    // finally, reconstruct the href based on what has been validated.
    this.href = this.format();
    return this;
};
// format a parsed object into a url string
function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (util.isString(obj)) obj = urlParse(obj);
    if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
    return obj.format();
}
Url.prototype.format = function() {
    var auth = this.auth || "";
    if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
    }
    var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
    if (this.host) host = auth + this.host;
    else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) host += ":" + this.port;
    }
    if (this.query && util.isObject(this.query) && Object.keys(this.query).length) query = querystring.stringify(this.query);
    var search = this.search || query && "?" + query || "";
    if (protocol && protocol.substr(-1) !== ":") protocol += ":";
    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
    } else if (!host) host = "";
    if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
    if (search && search.charAt(0) !== "?") search = "?" + search;
    pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
    });
    search = search.replace("#", "%23");
    return protocol + host + pathname + search + hash;
};
function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
}
Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
};
function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
}
Url.prototype.resolveObject = function(relative) {
    if (util.isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
    }
    var result = new Url();
    var tkeys = Object.keys(this);
    for(var tk = 0; tk < tkeys.length; tk++){
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
    }
    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;
    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === "") {
        result.href = result.format();
        return result;
    }
    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for(var rk = 0; rk < rkeys.length; rk++){
            var rkey = rkeys[rk];
            if (rkey !== "protocol") result[rkey] = relative[rkey];
        }
        //urlParse appends trailing / to urls like http://www.example.com
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) result.path = result.pathname = "/";
        result.href = result.format();
        return result;
    }
    if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);
            for(var v = 0; v < keys.length; v++){
                var k = keys[v];
                result[k] = relative[k];
            }
            result.href = result.format();
            return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || "").split("/");
            while(relPath.length && !(relative.host = relPath.shift()));
            if (!relative.host) relative.host = "";
            if (!relative.hostname) relative.hostname = "";
            if (relPath[0] !== "") relPath.unshift("");
            if (relPath.length < 2) relPath.unshift("");
            result.pathname = relPath.join("/");
        } else result.pathname = relative.pathname;
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
            var p = result.pathname || "";
            var s = result.search || "";
            result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
    }
    var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
            if (srcPath[0] === "") srcPath[0] = result.host;
            else srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;
            if (relative.host) {
                if (relPath[0] === "") relPath[0] = relative.host;
                else relPath.unshift(relative.host);
            }
            relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
    }
    if (isRelAbs) {
        // it's absolute.
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
    // fall through to the dot-handling below.
    } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
    } else if (!util.isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
            result.hostname = result.host = srcPath.shift();
            //occationaly the auth can get stuck only in host
            //this especially happens in cases like
            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
            var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
            if (authInHost) {
                result.auth = authInHost.shift();
                result.host = result.hostname = authInHost.shift();
            }
        }
        result.search = relative.search;
        result.query = relative.query;
        //to support http.request
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        result.href = result.format();
        return result;
    }
    if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null;
        //to support http.request
        if (result.search) result.path = "/" + result.search;
        else result.path = null;
        result.href = result.format();
        return result;
    }
    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for(var i = srcPath.length; i >= 0; i--){
        last = srcPath[i];
        if (last === ".") srcPath.splice(i, 1);
        else if (last === "..") {
            srcPath.splice(i, 1);
            up++;
        } else if (up) {
            srcPath.splice(i, 1);
            up--;
        }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) for(; up--; up)srcPath.unshift("..");
    if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) srcPath.unshift("");
    if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") srcPath.push("");
    var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
    // put the host back
    if (psychotic) {
        result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
        }
    }
    mustEndAbs = mustEndAbs || result.host && srcPath.length;
    if (mustEndAbs && !isAbsolute) srcPath.unshift("");
    if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
    } else result.pathname = srcPath.join("/");
    //to support request.http
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
};
Url.prototype.parseHost = function() {
    var host = this.host;
    var port = portPattern.exec(host);
    if (port) {
        port = port[0];
        if (port !== ":") this.port = port.substr(1);
        host = host.substr(0, host.length - port.length);
    }
    if (host) this.hostname = host;
};

},{"punycode":"4SwIZ","./util":"8nk0t","querystring":"7oCJH"}],"4SwIZ":[function(require,module,exports) {
var global = arguments[3];
(function(root) {
    /** Detect free variables */ var freeExports = exports && !exports.nodeType && exports;
    var freeModule = module && !module.nodeType && module;
    var freeGlobal = typeof global == "object" && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) root = freeGlobal;
    /**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */ var punycode, /** Highest positive signed 32-bit float value */ maxInt = 2147483647, /** Bootstring parameters */ base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", /** Regular expressions */ regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, /** Error messages */ errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
    }, /** Convenience shortcuts */ baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, /** Temporary variable */ key;
    /*--------------------------------------------------------------------------*/ /**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */ function error(type) {
        throw RangeError(errors[type]);
    }
    /**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */ function map(array, fn) {
        var length = array.length;
        var result = [];
        while(length--)result[length] = fn(array[length]);
        return result;
    }
    /**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */ function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + "@";
            string = parts[1];
        }
        // Avoid `split(regex)` for IE8 compatibility. See #17.
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
    }
    /**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */ function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while(counter < length){
            value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                }
            } else output.push(value);
        }
        return output;
    }
    /**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */ function ucs2encode(array) {
        return map(array, function(value) {
            var output = "";
            if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
            }
            output += stringFromCharCode(value);
            return output;
        }).join("");
    }
    /**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */ function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) return codePoint - 22;
        if (codePoint - 65 < 26) return codePoint - 65;
        if (codePoint - 97 < 26) return codePoint - 97;
        return base;
    }
    /**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */ function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    /**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */ function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for(; delta > baseMinusTMin * tMax >> 1; k += base)delta = floor(delta / baseMinusTMin);
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    /**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */ function decode(input) {
        // Don't use UCS-2
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, /** Cached calculation results */ baseMinusT;
        // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) basic = 0;
        for(j = 0; j < basic; ++j){
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) error("not-basic");
            output.push(input.charCodeAt(j));
        }
        // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.
        for(index = basic > 0 ? basic + 1 : 0; index < inputLength;){
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for(oldi = i, w = 1, k = base;; k += base){
                if (index >= inputLength) error("invalid-input");
                digit = basicToDigit(input.charCodeAt(index++));
                if (digit >= base || digit > floor((maxInt - i) / w)) error("overflow");
                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (digit < t) break;
                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) error("overflow");
                w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) error("overflow");
            n += floor(i / out);
            i %= out;
            // Insert `n` at position `i` of the output
            output.splice(i++, 0, n);
        }
        return ucs2encode(output);
    }
    /**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */ function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], /** `inputLength` will hold the number of code points in `input`. */ inputLength, /** Cached calculation results */ handledCPCountPlusOne, baseMinusT, qMinusT;
        // Convert the input in UCS-2 to Unicode
        input = ucs2decode(input);
        // Cache the length
        inputLength = input.length;
        // Initialize the state
        n = initialN;
        delta = 0;
        bias = initialBias;
        // Handle the basic code points
        for(j = 0; j < inputLength; ++j){
            currentValue = input[j];
            if (currentValue < 0x80) output.push(stringFromCharCode(currentValue));
        }
        handledCPCount = basicLength = output.length;
        // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.
        // Finish the basic string - if it is not empty - with a delimiter
        if (basicLength) output.push(delimiter);
        // Main encoding loop:
        while(handledCPCount < inputLength){
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for(m = maxInt, j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) m = currentValue;
            }
            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) error("overflow");
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for(j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue < n && ++delta > maxInt) error("overflow");
                if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for(q = delta, k = base;; k += base){
                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                        if (q < t) break;
                        qMinusT = q - t;
                        baseMinusT = base - t;
                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                        q = floor(qMinusT / baseMinusT);
                    }
                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                }
            }
            ++delta;
            ++n;
        }
        return output.join("");
    }
    /**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */ function toUnicode(input) {
        return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    }
    /**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */ function toASCII(input) {
        return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
    }
    /*--------------------------------------------------------------------------*/ /** Define the public API */ punycode = {
        /**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */ "version": "1.3.2",
        /**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */ "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
    };
    /** Expose `punycode` */ // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) define("punycode", function() {
        return punycode;
    });
    else if (freeExports && freeModule) {
        if (module.exports == freeExports) freeModule.exports = punycode;
        else for(key in punycode)punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
    } else root.punycode = punycode;
})(this);

},{}],"8nk0t":[function(require,module,exports) {
"use strict";
module.exports = {
    isString: function(arg) {
        return typeof arg === "string";
    },
    isObject: function(arg) {
        return typeof arg === "object" && arg !== null;
    },
    isNull: function(arg) {
        return arg === null;
    },
    isNullOrUndefined: function(arg) {
        return arg == null;
    }
};

},{}],"7oCJH":[function(require,module,exports) {
"use strict";
exports.decode = exports.parse = require("./decode");
exports.encode = exports.stringify = require("./encode");

},{"./decode":"3WtwQ","./encode":"i5gNM"}],"3WtwQ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
module.exports = function(qs, sep, eq, options) {
    sep = sep || "&";
    eq = eq || "=";
    var obj = {};
    if (typeof qs !== "string" || qs.length === 0) return obj;
    var regexp = /\+/g;
    qs = qs.split(sep);
    var maxKeys = 1000;
    if (options && typeof options.maxKeys === "number") maxKeys = options.maxKeys;
    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) len = maxKeys;
    for(var i = 0; i < len; ++i){
        var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
        if (idx >= 0) {
            kstr = x.substr(0, idx);
            vstr = x.substr(idx + 1);
        } else {
            kstr = x;
            vstr = "";
        }
        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);
        if (!hasOwnProperty(obj, k)) obj[k] = v;
        else if (isArray(obj[k])) obj[k].push(v);
        else obj[k] = [
            obj[k],
            v
        ];
    }
    return obj;
};
var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
};

},{}],"i5gNM":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var stringifyPrimitive = function(v) {
    switch(typeof v){
        case "string":
            return v;
        case "boolean":
            return v ? "true" : "false";
        case "number":
            return isFinite(v) ? v : "";
        default:
            return "";
    }
};
module.exports = function(obj, sep, eq, name) {
    sep = sep || "&";
    eq = eq || "=";
    if (obj === null) obj = undefined;
    if (typeof obj === "object") return map(objectKeys(obj), function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (isArray(obj[k])) return map(obj[k], function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
        else return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
    }).join(sep);
    if (!name) return "";
    return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};
var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
};
function map(xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for(var i = 0; i < xs.length; i++)res.push(f(xs[i], i));
    return res;
}
var objectKeys = Object.keys || function(obj) {
    var res = [];
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    return res;
};

},{}],"djrPu":[function(require,module,exports) {
var http = require("http");
var url = require("url");
var https = module.exports;
for(var key in http)if (http.hasOwnProperty(key)) https[key] = http[key];
https.request = function(params, cb) {
    params = validateParams(params);
    return http.request.call(this, params, cb);
};
https.get = function(params, cb) {
    params = validateParams(params);
    return http.get.call(this, params, cb);
};
function validateParams(params) {
    if (typeof params === "string") params = url.parse(params);
    if (!params.protocol) params.protocol = "https:";
    if (params.protocol !== "https:") throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
    return params;
}

},{"http":"5y8Jo","url":"7qjc7"}],"btMYy":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ErrorContext = exports.TypedError = exports.ArgumentTypeError = exports.PositionalArgsError = void 0;
class PositionalArgsError extends Error {
    constructor(){
        super("Contract method calls expect named arguments wrapped in object, e.g. { argName1: argValue1, argName2: argValue2 }");
    }
}
exports.PositionalArgsError = PositionalArgsError;
class ArgumentTypeError extends Error {
    constructor(argName, argType, argValue){
        super(`Expected ${argType} for '${argName}' argument, but got '${JSON.stringify(argValue)}'`);
    }
}
exports.ArgumentTypeError = ArgumentTypeError;
class TypedError extends Error {
    constructor(message, type, context){
        super(message);
        this.type = type || "UntypedError";
        this.context = context;
    }
}
exports.TypedError = TypedError;
class ErrorContext {
    constructor(transactionHash){
        this.transactionHash = transactionHash;
    }
}
exports.ErrorContext = ErrorContext;

},{}],"1TB1L":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = this && this.__exportStar || function(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getErrorTypeFromErrorMessage = exports.formatError = exports.parseResultError = exports.parseRpcError = void 0;
const mustache_1 = __importDefault(require("mustache"));
const rpc_error_schema_json_1 = __importDefault(require("../generated/rpc_error_schema.json"));
const error_messages_json_1 = __importDefault(require("../res/error_messages.json"));
const CLASSMAP = __importStar(require("../generated/rpc_error_types"));
const rpc_error_types_1 = require("../generated/rpc_error_types");
__exportStar(require("../generated/rpc_error_types"), exports);
class ServerTransactionError extends rpc_error_types_1.ServerError {
}
function parseRpcError(errorObj) {
    const result = {};
    const errorClassName = walkSubtype(errorObj, rpc_error_schema_json_1.default.schema, result, "");
    // NOTE: This assumes that all errors extend TypedError
    const error = new CLASSMAP[errorClassName](formatError(errorClassName, result), errorClassName);
    Object.assign(error, result);
    return error;
}
exports.parseRpcError = parseRpcError;
function parseResultError(result) {
    const server_error = parseRpcError(result.status.Failure);
    const server_tx_error = new ServerTransactionError();
    Object.assign(server_tx_error, server_error);
    server_tx_error.type = server_error.type;
    server_tx_error.message = server_error.message;
    server_tx_error.transaction_outcome = result.transaction_outcome;
    return server_tx_error;
}
exports.parseResultError = parseResultError;
function formatError(errorClassName, errorData) {
    if (typeof error_messages_json_1.default[errorClassName] === "string") return mustache_1.default.render(error_messages_json_1.default[errorClassName], errorData);
    return JSON.stringify(errorData);
}
exports.formatError = formatError;
/**
 * Walks through defined schema returning error(s) recursively
 * @param errorObj The error to be parsed
 * @param schema A defined schema in JSON mapping to the RPC errors
 * @param result An object used in recursion or called directly
 * @param typeName The human-readable error type name as defined in the JSON mapping
 */ function walkSubtype(errorObj, schema, result, typeName) {
    let error;
    let type;
    let errorTypeName;
    for(const errorName in schema){
        if (isString(errorObj[errorName])) // Return early if error type is in a schema
        return errorObj[errorName];
        if (isObject(errorObj[errorName])) {
            error = errorObj[errorName];
            type = schema[errorName];
            errorTypeName = errorName;
        } else if (isObject(errorObj.kind) && isObject(errorObj.kind[errorName])) {
            error = errorObj.kind[errorName];
            type = schema[errorName];
            errorTypeName = errorName;
        } else continue;
    }
    if (error && type) {
        for (const prop of Object.keys(type.props))result[prop] = error[prop];
        return walkSubtype(error, schema, result, errorTypeName);
    } else {
        // TODO: is this the right thing to do?
        result.kind = errorObj;
        return typeName;
    }
}
function getErrorTypeFromErrorMessage(errorMessage) {
    // This function should be removed when JSON RPC starts returning typed errors.
    switch(true){
        case /^account .*? does not exist while viewing$/.test(errorMessage):
            return "AccountDoesNotExist";
        case /^Account .*? doesn't exist$/.test(errorMessage):
            return "AccountDoesNotExist";
        case /^access key .*? does not exist while viewing$/.test(errorMessage):
            return "AccessKeyDoesNotExist";
        case /wasm execution failed with error: FunctionCallError\(CompilationError\(CodeDoesNotExist/.test(errorMessage):
            return "CodeDoesNotExist";
        case /Transaction nonce \d+ must be larger than nonce of the used access key \d+/.test(errorMessage):
            return "InvalidNonce";
        default:
            return "UntypedError";
    }
}
exports.getErrorTypeFromErrorMessage = getErrorTypeFromErrorMessage;
/**
 * Helper function determining if the argument is an object
 * @param n Value to check
 */ function isObject(n) {
    return Object.prototype.toString.call(n) === "[object Object]";
}
/**
 * Helper function determining if the argument is a string
 * @param n Value to check
 */ function isString(n) {
    return Object.prototype.toString.call(n) === "[object String]";
}

},{"mustache":"izE6r","../generated/rpc_error_schema.json":"k81HS","../res/error_messages.json":"1Z5Hy","../generated/rpc_error_types":"hYY7T"}],"izE6r":[function(require,module,exports) {
(function(global, factory) {
    module.exports = factory();
})(this, function() {
    "use strict";
    /*!
   * mustache.js - Logic-less {{mustache}} templates with JavaScript
   * http://github.com/janl/mustache.js
   */ var objectToString = Object.prototype.toString;
    var isArray = Array.isArray || function isArrayPolyfill(object) {
        return objectToString.call(object) === "[object Array]";
    };
    function isFunction(object) {
        return typeof object === "function";
    }
    /**
   * More correct typeof string handling array
   * which normally returns typeof 'object'
   */ function typeStr(obj) {
        return isArray(obj) ? "array" : typeof obj;
    }
    function escapeRegExp(string) {
        return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    }
    /**
   * Null safe way of checking whether or not an object,
   * including its prototype, has a given property
   */ function hasProperty(obj, propName) {
        return obj != null && typeof obj === "object" && propName in obj;
    }
    /**
   * Safe way of detecting whether or not the given thing is a primitive and
   * whether it has the given property
   */ function primitiveHasOwnProperty(primitive, propName) {
        return primitive != null && typeof primitive !== "object" && primitive.hasOwnProperty && primitive.hasOwnProperty(propName);
    }
    // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
    // See https://github.com/janl/mustache.js/issues/189
    var regExpTest = RegExp.prototype.test;
    function testRegExp(re, string) {
        return regExpTest.call(re, string);
    }
    var nonSpaceRe = /\S/;
    function isWhitespace(string) {
        return !testRegExp(nonSpaceRe, string);
    }
    var entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "/": "&#x2F;",
        "`": "&#x60;",
        "=": "&#x3D;"
    };
    function escapeHtml(string) {
        return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap(s) {
            return entityMap[s];
        });
    }
    var whiteRe = /\s*/;
    var spaceRe = /\s+/;
    var equalsRe = /\s*=/;
    var curlyRe = /\s*\}/;
    var tagRe = /#|\^|\/|>|\{|&|=|!/;
    /**
   * Breaks up the given `template` string into a tree of tokens. If the `tags`
   * argument is given here it must be an array with two string values: the
   * opening and closing tags used in the template (e.g. [ "<%", "%>" ]). Of
   * course, the default is to use mustaches (i.e. mustache.tags).
   *
   * A token is an array with at least 4 elements. The first element is the
   * mustache symbol that was used inside the tag, e.g. "#" or "&". If the tag
   * did not contain a symbol (i.e. {{myValue}}) this element is "name". For
   * all text that appears outside a symbol this element is "text".
   *
   * The second element of a token is its "value". For mustache tags this is
   * whatever else was inside the tag besides the opening symbol. For text tokens
   * this is the text itself.
   *
   * The third and fourth elements of the token are the start and end indices,
   * respectively, of the token in the original template.
   *
   * Tokens that are the root node of a subtree contain two more elements: 1) an
   * array of tokens in the subtree and 2) the index in the original template at
   * which the closing tag for that section begins.
   *
   * Tokens for partials also contain two more elements: 1) a string value of
   * indendation prior to that tag and 2) the index of that tag on that line -
   * eg a value of 2 indicates the partial is the third tag on this line.
   */ function parseTemplate(template, tags) {
        if (!template) return [];
        var lineHasNonSpace = false;
        var sections = []; // Stack to hold section tokens
        var tokens = []; // Buffer to hold the tokens
        var spaces = []; // Indices of whitespace tokens on the current line
        var hasTag = false; // Is there a {{tag}} on the current line?
        var nonSpace = false; // Is there a non-space char on the current line?
        var indentation = ""; // Tracks indentation for tags that use it
        var tagIndex = 0; // Stores a count of number of tags encountered on a line
        // Strips all whitespace tokens array for the current line
        // if there was a {{#tag}} on it and otherwise only space.
        function stripSpace() {
            if (hasTag && !nonSpace) while(spaces.length)delete tokens[spaces.pop()];
            else spaces = [];
            hasTag = false;
            nonSpace = false;
        }
        var openingTagRe, closingTagRe, closingCurlyRe;
        function compileTags(tagsToCompile) {
            if (typeof tagsToCompile === "string") tagsToCompile = tagsToCompile.split(spaceRe, 2);
            if (!isArray(tagsToCompile) || tagsToCompile.length !== 2) throw new Error("Invalid tags: " + tagsToCompile);
            openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + "\\s*");
            closingTagRe = new RegExp("\\s*" + escapeRegExp(tagsToCompile[1]));
            closingCurlyRe = new RegExp("\\s*" + escapeRegExp("}" + tagsToCompile[1]));
        }
        compileTags(tags || mustache.tags);
        var scanner = new Scanner(template);
        var start, type, value, chr, token, openSection;
        while(!scanner.eos()){
            start = scanner.pos;
            // Match any text between tags.
            value = scanner.scanUntil(openingTagRe);
            if (value) for(var i = 0, valueLength = value.length; i < valueLength; ++i){
                chr = value.charAt(i);
                if (isWhitespace(chr)) {
                    spaces.push(tokens.length);
                    indentation += chr;
                } else {
                    nonSpace = true;
                    lineHasNonSpace = true;
                    indentation += " ";
                }
                tokens.push([
                    "text",
                    chr,
                    start,
                    start + 1
                ]);
                start += 1;
                // Check for whitespace on the current line.
                if (chr === "\n") {
                    stripSpace();
                    indentation = "";
                    tagIndex = 0;
                    lineHasNonSpace = false;
                }
            }
            // Match the opening tag.
            if (!scanner.scan(openingTagRe)) break;
            hasTag = true;
            // Get the tag type.
            type = scanner.scan(tagRe) || "name";
            scanner.scan(whiteRe);
            // Get the tag value.
            if (type === "=") {
                value = scanner.scanUntil(equalsRe);
                scanner.scan(equalsRe);
                scanner.scanUntil(closingTagRe);
            } else if (type === "{") {
                value = scanner.scanUntil(closingCurlyRe);
                scanner.scan(curlyRe);
                scanner.scanUntil(closingTagRe);
                type = "&";
            } else value = scanner.scanUntil(closingTagRe);
            // Match the closing tag.
            if (!scanner.scan(closingTagRe)) throw new Error("Unclosed tag at " + scanner.pos);
            if (type == ">") token = [
                type,
                value,
                start,
                scanner.pos,
                indentation,
                tagIndex,
                lineHasNonSpace
            ];
            else token = [
                type,
                value,
                start,
                scanner.pos
            ];
            tagIndex++;
            tokens.push(token);
            if (type === "#" || type === "^") sections.push(token);
            else if (type === "/") {
                // Check section nesting.
                openSection = sections.pop();
                if (!openSection) throw new Error('Unopened section "' + value + '" at ' + start);
                if (openSection[1] !== value) throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
            } else if (type === "name" || type === "{" || type === "&") nonSpace = true;
            else if (type === "=") // Set the tags for the next time around.
            compileTags(value);
        }
        stripSpace();
        // Make sure there are no open sections when we're done.
        openSection = sections.pop();
        if (openSection) throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);
        return nestTokens(squashTokens(tokens));
    }
    /**
   * Combines the values of consecutive text tokens in the given `tokens` array
   * to a single token.
   */ function squashTokens(tokens) {
        var squashedTokens = [];
        var token, lastToken;
        for(var i = 0, numTokens = tokens.length; i < numTokens; ++i){
            token = tokens[i];
            if (token) {
                if (token[0] === "text" && lastToken && lastToken[0] === "text") {
                    lastToken[1] += token[1];
                    lastToken[3] = token[3];
                } else {
                    squashedTokens.push(token);
                    lastToken = token;
                }
            }
        }
        return squashedTokens;
    }
    /**
   * Forms the given array of `tokens` into a nested tree structure where
   * tokens that represent a section have two additional items: 1) an array of
   * all tokens that appear in that section and 2) the index in the original
   * template that represents the end of that section.
   */ function nestTokens(tokens) {
        var nestedTokens = [];
        var collector = nestedTokens;
        var sections = [];
        var token, section;
        for(var i = 0, numTokens = tokens.length; i < numTokens; ++i){
            token = tokens[i];
            switch(token[0]){
                case "#":
                case "^":
                    collector.push(token);
                    sections.push(token);
                    collector = token[4] = [];
                    break;
                case "/":
                    section = sections.pop();
                    section[5] = token[2];
                    collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
                    break;
                default:
                    collector.push(token);
            }
        }
        return nestedTokens;
    }
    /**
   * A simple string scanner that is used by the template parser to find
   * tokens in template strings.
   */ function Scanner(string) {
        this.string = string;
        this.tail = string;
        this.pos = 0;
    }
    /**
   * Returns `true` if the tail is empty (end of string).
   */ Scanner.prototype.eos = function eos() {
        return this.tail === "";
    };
    /**
   * Tries to match the given regular expression at the current position.
   * Returns the matched text if it can match, the empty string otherwise.
   */ Scanner.prototype.scan = function scan(re) {
        var match = this.tail.match(re);
        if (!match || match.index !== 0) return "";
        var string = match[0];
        this.tail = this.tail.substring(string.length);
        this.pos += string.length;
        return string;
    };
    /**
   * Skips all text until the given regular expression can be matched. Returns
   * the skipped string, which is the entire tail if no match can be made.
   */ Scanner.prototype.scanUntil = function scanUntil(re) {
        var index = this.tail.search(re), match;
        switch(index){
            case -1:
                match = this.tail;
                this.tail = "";
                break;
            case 0:
                match = "";
                break;
            default:
                match = this.tail.substring(0, index);
                this.tail = this.tail.substring(index);
        }
        this.pos += match.length;
        return match;
    };
    /**
   * Represents a rendering context by wrapping a view object and
   * maintaining a reference to the parent context.
   */ function Context(view, parentContext) {
        this.view = view;
        this.cache = {
            ".": this.view
        };
        this.parent = parentContext;
    }
    /**
   * Creates a new context using the given view with this context
   * as the parent.
   */ Context.prototype.push = function push(view) {
        return new Context(view, this);
    };
    /**
   * Returns the value of the given name in this context, traversing
   * up the context hierarchy if the value is absent in this context's view.
   */ Context.prototype.lookup = function lookup(name) {
        var cache = this.cache;
        var value;
        if (cache.hasOwnProperty(name)) value = cache[name];
        else {
            var context = this, intermediateValue, names, index, lookupHit = false;
            while(context){
                if (name.indexOf(".") > 0) {
                    intermediateValue = context.view;
                    names = name.split(".");
                    index = 0;
                    /**
           * Using the dot notion path in `name`, we descend through the
           * nested objects.
           *
           * To be certain that the lookup has been successful, we have to
           * check if the last object in the path actually has the property
           * we are looking for. We store the result in `lookupHit`.
           *
           * This is specially necessary for when the value has been set to
           * `undefined` and we want to avoid looking up parent contexts.
           *
           * In the case where dot notation is used, we consider the lookup
           * to be successful even if the last "object" in the path is
           * not actually an object but a primitive (e.g., a string, or an
           * integer), because it is sometimes useful to access a property
           * of an autoboxed primitive, such as the length of a string.
           **/ while(intermediateValue != null && index < names.length){
                        if (index === names.length - 1) lookupHit = hasProperty(intermediateValue, names[index]) || primitiveHasOwnProperty(intermediateValue, names[index]);
                        intermediateValue = intermediateValue[names[index++]];
                    }
                } else {
                    intermediateValue = context.view[name];
                    /**
           * Only checking against `hasProperty`, which always returns `false` if
           * `context.view` is not an object. Deliberately omitting the check
           * against `primitiveHasOwnProperty` if dot notation is not used.
           *
           * Consider this example:
           * ```
           * Mustache.render("The length of a football field is {{#length}}{{length}}{{/length}}.", {length: "100 yards"})
           * ```
           *
           * If we were to check also against `primitiveHasOwnProperty`, as we do
           * in the dot notation case, then render call would return:
           *
           * "The length of a football field is 9."
           *
           * rather than the expected:
           *
           * "The length of a football field is 100 yards."
           **/ lookupHit = hasProperty(context.view, name);
                }
                if (lookupHit) {
                    value = intermediateValue;
                    break;
                }
                context = context.parent;
            }
            cache[name] = value;
        }
        if (isFunction(value)) value = value.call(this.view);
        return value;
    };
    /**
   * A Writer knows how to take a stream of tokens and render them to a
   * string, given a context. It also maintains a cache of templates to
   * avoid the need to parse the same template twice.
   */ function Writer() {
        this.templateCache = {
            _cache: {},
            set: function set(key, value) {
                this._cache[key] = value;
            },
            get: function get(key) {
                return this._cache[key];
            },
            clear: function clear() {
                this._cache = {};
            }
        };
    }
    /**
   * Clears all cached templates in this writer.
   */ Writer.prototype.clearCache = function clearCache() {
        if (typeof this.templateCache !== "undefined") this.templateCache.clear();
    };
    /**
   * Parses and caches the given `template` according to the given `tags` or
   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens
   * that is generated from the parse.
   */ Writer.prototype.parse = function parse(template, tags) {
        var cache = this.templateCache;
        var cacheKey = template + ":" + (tags || mustache.tags).join(":");
        var isCacheEnabled = typeof cache !== "undefined";
        var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;
        if (tokens == undefined) {
            tokens = parseTemplate(template, tags);
            isCacheEnabled && cache.set(cacheKey, tokens);
        }
        return tokens;
    };
    /**
   * High-level method that is used to render the given `template` with
   * the given `view`.
   *
   * The optional `partials` argument may be an object that contains the
   * names and templates of partials that are used in the template. It may
   * also be a function that is used to load partial templates on the fly
   * that takes a single argument: the name of the partial.
   *
   * If the optional `config` argument is given here, then it should be an
   * object with a `tags` attribute or an `escape` attribute or both.
   * If an array is passed, then it will be interpreted the same way as
   * a `tags` attribute on a `config` object.
   *
   * The `tags` attribute of a `config` object must be an array with two
   * string values: the opening and closing tags used in the template (e.g.
   * [ "<%", "%>" ]). The default is to mustache.tags.
   *
   * The `escape` attribute of a `config` object must be a function which
   * accepts a string as input and outputs a safely escaped string.
   * If an `escape` function is not provided, then an HTML-safe string
   * escaping function is used as the default.
   */ Writer.prototype.render = function render(template, view, partials, config) {
        var tags = this.getConfigTags(config);
        var tokens = this.parse(template, tags);
        var context = view instanceof Context ? view : new Context(view, undefined);
        return this.renderTokens(tokens, context, partials, template, config);
    };
    /**
   * Low-level method that renders the given array of `tokens` using
   * the given `context` and `partials`.
   *
   * Note: The `originalTemplate` is only ever used to extract the portion
   * of the original template that was contained in a higher-order section.
   * If the template doesn't use higher-order sections, this argument may
   * be omitted.
   */ Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate, config) {
        var buffer = "";
        var token, symbol, value;
        for(var i = 0, numTokens = tokens.length; i < numTokens; ++i){
            value = undefined;
            token = tokens[i];
            symbol = token[0];
            if (symbol === "#") value = this.renderSection(token, context, partials, originalTemplate, config);
            else if (symbol === "^") value = this.renderInverted(token, context, partials, originalTemplate, config);
            else if (symbol === ">") value = this.renderPartial(token, context, partials, config);
            else if (symbol === "&") value = this.unescapedValue(token, context);
            else if (symbol === "name") value = this.escapedValue(token, context, config);
            else if (symbol === "text") value = this.rawValue(token);
            if (value !== undefined) buffer += value;
        }
        return buffer;
    };
    Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate, config) {
        var self = this;
        var buffer = "";
        var value = context.lookup(token[1]);
        // This function is used to render an arbitrary template
        // in the current context by higher-order sections.
        function subRender(template) {
            return self.render(template, context, partials, config);
        }
        if (!value) return;
        if (isArray(value)) for(var j = 0, valueLength = value.length; j < valueLength; ++j)buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);
        else if (typeof value === "object" || typeof value === "string" || typeof value === "number") buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);
        else if (isFunction(value)) {
            if (typeof originalTemplate !== "string") throw new Error("Cannot use higher-order sections without the original template");
            // Extract the portion of the original template that the section contains.
            value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);
            if (value != null) buffer += value;
        } else buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);
        return buffer;
    };
    Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate, config) {
        var value = context.lookup(token[1]);
        // Use JavaScript's definition of falsy. Include empty arrays.
        // See https://github.com/janl/mustache.js/issues/186
        if (!value || isArray(value) && value.length === 0) return this.renderTokens(token[4], context, partials, originalTemplate, config);
    };
    Writer.prototype.indentPartial = function indentPartial(partial, indentation, lineHasNonSpace) {
        var filteredIndentation = indentation.replace(/[^ \t]/g, "");
        var partialByNl = partial.split("\n");
        for(var i = 0; i < partialByNl.length; i++)if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) partialByNl[i] = filteredIndentation + partialByNl[i];
        return partialByNl.join("\n");
    };
    Writer.prototype.renderPartial = function renderPartial(token, context, partials, config) {
        if (!partials) return;
        var tags = this.getConfigTags(config);
        var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
        if (value != null) {
            var lineHasNonSpace = token[6];
            var tagIndex = token[5];
            var indentation = token[4];
            var indentedValue = value;
            if (tagIndex == 0 && indentation) indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);
            var tokens = this.parse(indentedValue, tags);
            return this.renderTokens(tokens, context, partials, indentedValue, config);
        }
    };
    Writer.prototype.unescapedValue = function unescapedValue(token, context) {
        var value = context.lookup(token[1]);
        if (value != null) return value;
    };
    Writer.prototype.escapedValue = function escapedValue(token, context, config) {
        var escape = this.getConfigEscape(config) || mustache.escape;
        var value = context.lookup(token[1]);
        if (value != null) return typeof value === "number" && escape === mustache.escape ? String(value) : escape(value);
    };
    Writer.prototype.rawValue = function rawValue(token) {
        return token[1];
    };
    Writer.prototype.getConfigTags = function getConfigTags(config) {
        if (isArray(config)) return config;
        else if (config && typeof config === "object") return config.tags;
        else return undefined;
    };
    Writer.prototype.getConfigEscape = function getConfigEscape(config) {
        if (config && typeof config === "object" && !isArray(config)) return config.escape;
        else return undefined;
    };
    var mustache = {
        name: "mustache.js",
        version: "4.2.0",
        tags: [
            "{{",
            "}}"
        ],
        clearCache: undefined,
        escape: undefined,
        parse: undefined,
        render: undefined,
        Scanner: undefined,
        Context: undefined,
        Writer: undefined,
        /**
     * Allows a user to override the default caching strategy, by providing an
     * object with set, get and clear methods. This can also be used to disable
     * the cache by setting it to the literal `undefined`.
     */ set templateCache (cache){
            defaultWriter.templateCache = cache;
        },
        /**
     * Gets the default or overridden caching object from the default writer.
     */ get templateCache () {
            return defaultWriter.templateCache;
        }
    };
    // All high-level mustache.* functions use this writer.
    var defaultWriter = new Writer();
    /**
   * Clears all cached templates in the default writer.
   */ mustache.clearCache = function clearCache() {
        return defaultWriter.clearCache();
    };
    /**
   * Parses and caches the given template in the default writer and returns the
   * array of tokens it contains. Doing this ahead of time avoids the need to
   * parse templates on the fly as they are rendered.
   */ mustache.parse = function parse(template, tags) {
        return defaultWriter.parse(template, tags);
    };
    /**
   * Renders the `template` with the given `view`, `partials`, and `config`
   * using the default writer.
   */ mustache.render = function render(template, view, partials, config) {
        if (typeof template !== "string") throw new TypeError('Invalid template! Template should be a "string" but "' + typeStr(template) + '" was given as the first ' + "argument for mustache#render(template, view, partials)");
        return defaultWriter.render(template, view, partials, config);
    };
    // Export the escaping function so that the user may override it.
    // See https://github.com/janl/mustache.js/issues/244
    mustache.escape = escapeHtml;
    // Export these mainly for testing, but also for advanced usage.
    mustache.Scanner = Scanner;
    mustache.Context = Context;
    mustache.Writer = Writer;
    return mustache;
});

},{}],"k81HS":[function(require,module,exports) {
module.exports = JSON.parse('{"schema":{"BadUTF16":{"name":"BadUTF16","subtypes":[],"props":{}},"BadUTF8":{"name":"BadUTF8","subtypes":[],"props":{}},"BalanceExceeded":{"name":"BalanceExceeded","subtypes":[],"props":{}},"BreakpointTrap":{"name":"BreakpointTrap","subtypes":[],"props":{}},"CacheError":{"name":"CacheError","subtypes":["ReadError","WriteError","DeserializationError","SerializationError"],"props":{}},"CallIndirectOOB":{"name":"CallIndirectOOB","subtypes":[],"props":{}},"CannotAppendActionToJointPromise":{"name":"CannotAppendActionToJointPromise","subtypes":[],"props":{}},"CannotReturnJointPromise":{"name":"CannotReturnJointPromise","subtypes":[],"props":{}},"CodeDoesNotExist":{"name":"CodeDoesNotExist","subtypes":[],"props":{"account_id":""}},"CompilationError":{"name":"CompilationError","subtypes":["CodeDoesNotExist","PrepareError","WasmerCompileError"],"props":{}},"ContractSizeExceeded":{"name":"ContractSizeExceeded","subtypes":[],"props":{"limit":"","size":""}},"Deprecated":{"name":"Deprecated","subtypes":[],"props":{"method_name":""}},"Deserialization":{"name":"Deserialization","subtypes":[],"props":{}},"DeserializationError":{"name":"DeserializationError","subtypes":[],"props":{}},"EmptyMethodName":{"name":"EmptyMethodName","subtypes":[],"props":{}},"FunctionCallError":{"name":"FunctionCallError","subtypes":["CompilationError","LinkError","MethodResolveError","WasmTrap","WasmUnknownError","HostError","EvmError"],"props":{}},"GasExceeded":{"name":"GasExceeded","subtypes":[],"props":{}},"GasInstrumentation":{"name":"GasInstrumentation","subtypes":[],"props":{}},"GasLimitExceeded":{"name":"GasLimitExceeded","subtypes":[],"props":{}},"GenericTrap":{"name":"GenericTrap","subtypes":[],"props":{}},"GuestPanic":{"name":"GuestPanic","subtypes":[],"props":{"panic_msg":""}},"HostError":{"name":"HostError","subtypes":["BadUTF16","BadUTF8","GasExceeded","GasLimitExceeded","BalanceExceeded","EmptyMethodName","GuestPanic","IntegerOverflow","InvalidPromiseIndex","CannotAppendActionToJointPromise","CannotReturnJointPromise","InvalidPromiseResultIndex","InvalidRegisterId","IteratorWasInvalidated","MemoryAccessViolation","InvalidReceiptIndex","InvalidIteratorIndex","InvalidAccountId","InvalidMethodName","InvalidPublicKey","ProhibitedInView","NumberOfLogsExceeded","KeyLengthExceeded","ValueLengthExceeded","TotalLogLengthExceeded","NumberPromisesExceeded","NumberInputDataDependenciesExceeded","ReturnedValueLengthExceeded","ContractSizeExceeded","Deprecated"],"props":{}},"IllegalArithmetic":{"name":"IllegalArithmetic","subtypes":[],"props":{}},"IncorrectCallIndirectSignature":{"name":"IncorrectCallIndirectSignature","subtypes":[],"props":{}},"Instantiate":{"name":"Instantiate","subtypes":[],"props":{}},"IntegerOverflow":{"name":"IntegerOverflow","subtypes":[],"props":{}},"InternalMemoryDeclared":{"name":"InternalMemoryDeclared","subtypes":[],"props":{}},"InvalidAccountId":{"name":"InvalidAccountId","subtypes":[],"props":{"account_id":""}},"InvalidIteratorIndex":{"name":"InvalidIteratorIndex","subtypes":[],"props":{"iterator_index":""}},"InvalidMethodName":{"name":"InvalidMethodName","subtypes":[],"props":{}},"InvalidPromiseIndex":{"name":"InvalidPromiseIndex","subtypes":[],"props":{"promise_idx":""}},"InvalidPromiseResultIndex":{"name":"InvalidPromiseResultIndex","subtypes":[],"props":{"result_idx":""}},"InvalidPublicKey":{"name":"InvalidPublicKey","subtypes":[],"props":{}},"InvalidReceiptIndex":{"name":"InvalidReceiptIndex","subtypes":[],"props":{"receipt_index":""}},"InvalidRegisterId":{"name":"InvalidRegisterId","subtypes":[],"props":{"register_id":""}},"IteratorWasInvalidated":{"name":"IteratorWasInvalidated","subtypes":[],"props":{"iterator_index":""}},"KeyLengthExceeded":{"name":"KeyLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"LinkError":{"name":"LinkError","subtypes":[],"props":{"msg":""}},"Memory":{"name":"Memory","subtypes":[],"props":{}},"MemoryAccessViolation":{"name":"MemoryAccessViolation","subtypes":[],"props":{}},"MemoryOutOfBounds":{"name":"MemoryOutOfBounds","subtypes":[],"props":{}},"MethodEmptyName":{"name":"MethodEmptyName","subtypes":[],"props":{}},"MethodInvalidSignature":{"name":"MethodInvalidSignature","subtypes":[],"props":{}},"MethodNotFound":{"name":"MethodNotFound","subtypes":[],"props":{}},"MethodResolveError":{"name":"MethodResolveError","subtypes":["MethodEmptyName","MethodUTF8Error","MethodNotFound","MethodInvalidSignature"],"props":{}},"MethodUTF8Error":{"name":"MethodUTF8Error","subtypes":[],"props":{}},"MisalignedAtomicAccess":{"name":"MisalignedAtomicAccess","subtypes":[],"props":{}},"NumberInputDataDependenciesExceeded":{"name":"NumberInputDataDependenciesExceeded","subtypes":[],"props":{"limit":"","number_of_input_data_dependencies":""}},"NumberOfLogsExceeded":{"name":"NumberOfLogsExceeded","subtypes":[],"props":{"limit":""}},"NumberPromisesExceeded":{"name":"NumberPromisesExceeded","subtypes":[],"props":{"limit":"","number_of_promises":""}},"PrepareError":{"name":"PrepareError","subtypes":["Serialization","Deserialization","InternalMemoryDeclared","GasInstrumentation","StackHeightInstrumentation","Instantiate","Memory"],"props":{}},"ProhibitedInView":{"name":"ProhibitedInView","subtypes":[],"props":{"method_name":""}},"ReadError":{"name":"ReadError","subtypes":[],"props":{}},"ReturnedValueLengthExceeded":{"name":"ReturnedValueLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"Serialization":{"name":"Serialization","subtypes":[],"props":{}},"SerializationError":{"name":"SerializationError","subtypes":[],"props":{"hash":""}},"StackHeightInstrumentation":{"name":"StackHeightInstrumentation","subtypes":[],"props":{}},"StackOverflow":{"name":"StackOverflow","subtypes":[],"props":{}},"TotalLogLengthExceeded":{"name":"TotalLogLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"Unreachable":{"name":"Unreachable","subtypes":[],"props":{}},"ValueLengthExceeded":{"name":"ValueLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"WasmTrap":{"name":"WasmTrap","subtypes":["Unreachable","IncorrectCallIndirectSignature","MemoryOutOfBounds","CallIndirectOOB","IllegalArithmetic","MisalignedAtomicAccess","BreakpointTrap","StackOverflow","GenericTrap"],"props":{}},"WasmUnknownError":{"name":"WasmUnknownError","subtypes":[],"props":{}},"WasmerCompileError":{"name":"WasmerCompileError","subtypes":[],"props":{"msg":""}},"WriteError":{"name":"WriteError","subtypes":[],"props":{}},"AccessKeyNotFound":{"name":"AccessKeyNotFound","subtypes":[],"props":{"account_id":"","public_key":""}},"AccountAlreadyExists":{"name":"AccountAlreadyExists","subtypes":[],"props":{"account_id":""}},"AccountDoesNotExist":{"name":"AccountDoesNotExist","subtypes":[],"props":{"account_id":""}},"ActionError":{"name":"ActionError","subtypes":["AccountAlreadyExists","AccountDoesNotExist","CreateAccountOnlyByRegistrar","CreateAccountNotAllowed","ActorNoPermission","DeleteKeyDoesNotExist","AddKeyAlreadyExists","DeleteAccountStaking","LackBalanceForState","TriesToUnstake","TriesToStake","InsufficientStake","FunctionCallError","NewReceiptValidationError","OnlyImplicitAccountCreationAllowed"],"props":{"index":""}},"ActionsValidationError":{"name":"ActionsValidationError","subtypes":["DeleteActionMustBeFinal","TotalPrepaidGasExceeded","TotalNumberOfActionsExceeded","AddKeyMethodNamesNumberOfBytesExceeded","AddKeyMethodNameLengthExceeded","IntegerOverflow","InvalidAccountId","ContractSizeExceeded","FunctionCallMethodNameLengthExceeded","FunctionCallArgumentsLengthExceeded","UnsuitableStakingKey","FunctionCallZeroAttachedGas"],"props":{}},"ActorNoPermission":{"name":"ActorNoPermission","subtypes":[],"props":{"account_id":"","actor_id":""}},"AddKeyAlreadyExists":{"name":"AddKeyAlreadyExists","subtypes":[],"props":{"account_id":"","public_key":""}},"AddKeyMethodNameLengthExceeded":{"name":"AddKeyMethodNameLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"AddKeyMethodNamesNumberOfBytesExceeded":{"name":"AddKeyMethodNamesNumberOfBytesExceeded","subtypes":[],"props":{"limit":"","total_number_of_bytes":""}},"BalanceMismatchError":{"name":"BalanceMismatchError","subtypes":[],"props":{"final_accounts_balance":"","final_postponed_receipts_balance":"","incoming_receipts_balance":"","incoming_validator_rewards":"","initial_accounts_balance":"","initial_postponed_receipts_balance":"","new_delayed_receipts_balance":"","other_burnt_amount":"","outgoing_receipts_balance":"","processed_delayed_receipts_balance":"","slashed_burnt_amount":"","tx_burnt_amount":""}},"CostOverflow":{"name":"CostOverflow","subtypes":[],"props":{}},"CreateAccountNotAllowed":{"name":"CreateAccountNotAllowed","subtypes":[],"props":{"account_id":"","predecessor_id":""}},"CreateAccountOnlyByRegistrar":{"name":"CreateAccountOnlyByRegistrar","subtypes":[],"props":{"account_id":"","predecessor_id":"","registrar_account_id":""}},"DeleteAccountStaking":{"name":"DeleteAccountStaking","subtypes":[],"props":{"account_id":""}},"DeleteActionMustBeFinal":{"name":"DeleteActionMustBeFinal","subtypes":[],"props":{}},"DeleteKeyDoesNotExist":{"name":"DeleteKeyDoesNotExist","subtypes":[],"props":{"account_id":"","public_key":""}},"DepositWithFunctionCall":{"name":"DepositWithFunctionCall","subtypes":[],"props":{}},"Expired":{"name":"Expired","subtypes":[],"props":{}},"FunctionCallArgumentsLengthExceeded":{"name":"FunctionCallArgumentsLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"FunctionCallMethodNameLengthExceeded":{"name":"FunctionCallMethodNameLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"FunctionCallZeroAttachedGas":{"name":"FunctionCallZeroAttachedGas","subtypes":[],"props":{}},"InsufficientStake":{"name":"InsufficientStake","subtypes":[],"props":{"account_id":"","minimum_stake":"","stake":""}},"InvalidAccessKeyError":{"name":"InvalidAccessKeyError","subtypes":["AccessKeyNotFound","ReceiverMismatch","MethodNameMismatch","RequiresFullAccess","NotEnoughAllowance","DepositWithFunctionCall"],"props":{}},"InvalidChain":{"name":"InvalidChain","subtypes":[],"props":{}},"InvalidDataReceiverId":{"name":"InvalidDataReceiverId","subtypes":[],"props":{"account_id":""}},"InvalidNonce":{"name":"InvalidNonce","subtypes":[],"props":{"ak_nonce":"","tx_nonce":""}},"InvalidPredecessorId":{"name":"InvalidPredecessorId","subtypes":[],"props":{"account_id":""}},"InvalidReceiverId":{"name":"InvalidReceiverId","subtypes":[],"props":{"account_id":""}},"InvalidSignature":{"name":"InvalidSignature","subtypes":[],"props":{}},"InvalidSignerId":{"name":"InvalidSignerId","subtypes":[],"props":{"account_id":""}},"InvalidTxError":{"name":"InvalidTxError","subtypes":["InvalidAccessKeyError","InvalidSignerId","SignerDoesNotExist","InvalidNonce","InvalidReceiverId","InvalidSignature","NotEnoughBalance","LackBalanceForState","CostOverflow","InvalidChain","Expired","ActionsValidation"],"props":{}},"LackBalanceForState":{"name":"LackBalanceForState","subtypes":[],"props":{"account_id":"","amount":""}},"MethodNameMismatch":{"name":"MethodNameMismatch","subtypes":[],"props":{"method_name":""}},"NotEnoughAllowance":{"name":"NotEnoughAllowance","subtypes":[],"props":{"account_id":"","allowance":"","cost":"","public_key":""}},"NotEnoughBalance":{"name":"NotEnoughBalance","subtypes":[],"props":{"balance":"","cost":"","signer_id":""}},"OnlyImplicitAccountCreationAllowed":{"name":"OnlyImplicitAccountCreationAllowed","subtypes":[],"props":{"account_id":""}},"ReceiptValidationError":{"name":"ReceiptValidationError","subtypes":["InvalidPredecessorId","InvalidReceiverId","InvalidSignerId","InvalidDataReceiverId","ReturnedValueLengthExceeded","NumberInputDataDependenciesExceeded","ActionsValidation"],"props":{}},"ReceiverMismatch":{"name":"ReceiverMismatch","subtypes":[],"props":{"ak_receiver":"","tx_receiver":""}},"RequiresFullAccess":{"name":"RequiresFullAccess","subtypes":[],"props":{}},"SignerDoesNotExist":{"name":"SignerDoesNotExist","subtypes":[],"props":{"signer_id":""}},"TotalNumberOfActionsExceeded":{"name":"TotalNumberOfActionsExceeded","subtypes":[],"props":{"limit":"","total_number_of_actions":""}},"TotalPrepaidGasExceeded":{"name":"TotalPrepaidGasExceeded","subtypes":[],"props":{"limit":"","total_prepaid_gas":""}},"TriesToStake":{"name":"TriesToStake","subtypes":[],"props":{"account_id":"","balance":"","locked":"","stake":""}},"TriesToUnstake":{"name":"TriesToUnstake","subtypes":[],"props":{"account_id":""}},"TxExecutionError":{"name":"TxExecutionError","subtypes":["ActionError","InvalidTxError"],"props":{}},"UnsuitableStakingKey":{"name":"UnsuitableStakingKey","subtypes":[],"props":{"public_key":""}},"Closed":{"name":"Closed","subtypes":[],"props":{}},"InternalError":{"name":"InternalError","subtypes":[],"props":{}},"ServerError":{"name":"ServerError","subtypes":["TxExecutionError","Timeout","Closed","InternalError"],"props":{}},"Timeout":{"name":"Timeout","subtypes":[],"props":{}}}}');

},{}],"1Z5Hy":[function(require,module,exports) {
module.exports = JSON.parse('{"GasLimitExceeded":"Exceeded the maximum amount of gas allowed to burn per contract","MethodEmptyName":"Method name is empty","WasmerCompileError":"Wasmer compilation error: {{msg}}","GuestPanic":"Smart contract panicked: {{panic_msg}}","Memory":"Error creating Wasm memory","GasExceeded":"Exceeded the prepaid gas","MethodUTF8Error":"Method name is not valid UTF8 string","BadUTF16":"String encoding is bad UTF-16 sequence","WasmTrap":"WebAssembly trap: {{msg}}","GasInstrumentation":"Gas instrumentation failed or contract has denied instructions.","InvalidPromiseIndex":"{{promise_idx}} does not correspond to existing promises","InvalidPromiseResultIndex":"Accessed invalid promise result index: {{result_idx}}","Deserialization":"Error happened while deserializing the module","MethodNotFound":"Contract method is not found","InvalidRegisterId":"Accessed invalid register id: {{register_id}}","InvalidReceiptIndex":"VM Logic returned an invalid receipt index: {{receipt_index}}","EmptyMethodName":"Method name is empty in contract call","CannotReturnJointPromise":"Returning joint promise is currently prohibited","StackHeightInstrumentation":"Stack instrumentation failed","CodeDoesNotExist":"Cannot find contract code for account {{account_id}}","MethodInvalidSignature":"Invalid method signature","IntegerOverflow":"Integer overflow happened during contract execution","MemoryAccessViolation":"MemoryAccessViolation","InvalidIteratorIndex":"Iterator index {{iterator_index}} does not exist","IteratorWasInvalidated":"Iterator {{iterator_index}} was invalidated after its creation by performing a mutable operation on trie","InvalidAccountId":"VM Logic returned an invalid account id","Serialization":"Error happened while serializing the module","CannotAppendActionToJointPromise":"Actions can only be appended to non-joint promise.","InternalMemoryDeclared":"Internal memory declaration has been found in the module","Instantiate":"Error happened during instantiation","ProhibitedInView":"{{method_name}} is not allowed in view calls","InvalidMethodName":"VM Logic returned an invalid method name","BadUTF8":"String encoding is bad UTF-8 sequence","BalanceExceeded":"Exceeded the account balance","LinkError":"Wasm contract link error: {{msg}}","InvalidPublicKey":"VM Logic provided an invalid public key","ActorNoPermission":"Actor {{actor_id}} doesn\'t have permission to account {{account_id}} to complete the action","LackBalanceForState":"The account {{account_id}} wouldn\'t have enough balance to cover storage, required to have {{amount}} yoctoNEAR more","ReceiverMismatch":"Wrong AccessKey used for transaction: transaction is sent to receiver_id={{tx_receiver}}, but is signed with function call access key that restricted to only use with receiver_id={{ak_receiver}}. Either change receiver_id in your transaction or switch to use a FullAccessKey.","CostOverflow":"Transaction gas or balance cost is too high","InvalidSignature":"Transaction is not signed with the given public key","AccessKeyNotFound":"Signer \\"{{account_id}}\\" doesn\'t have access key with the given public_key {{public_key}}","NotEnoughBalance":"Sender {{signer_id}} does not have enough balance {{balance}} for operation costing {{cost}}","NotEnoughAllowance":"Access Key {account_id}:{public_key} does not have enough balance {{allowance}} for transaction costing {{cost}}","Expired":"Transaction has expired","DeleteAccountStaking":"Account {{account_id}} is staking and can not be deleted","SignerDoesNotExist":"Signer {{signer_id}} does not exist","TriesToStake":"Account {{account_id}} tries to stake {{stake}}, but has staked {{locked}} and only has {{balance}}","AddKeyAlreadyExists":"The public key {{public_key}} is already used for an existing access key","InvalidSigner":"Invalid signer account ID {{signer_id}} according to requirements","CreateAccountNotAllowed":"The new account_id {{account_id}} can\'t be created by {{predecessor_id}}","RequiresFullAccess":"The transaction contains more then one action, but it was signed with an access key which allows transaction to apply only one specific action. To apply more then one actions TX must be signed with a full access key","TriesToUnstake":"Account {{account_id}} is not yet staked, but tries to unstake","InvalidNonce":"Transaction nonce {{tx_nonce}} must be larger than nonce of the used access key {{ak_nonce}}","AccountAlreadyExists":"Can\'t create a new account {{account_id}}, because it already exists","InvalidChain":"Transaction parent block hash doesn\'t belong to the current chain","AccountDoesNotExist":"Can\'t complete the action because account {{account_id}} doesn\'t exist","MethodNameMismatch":"Transaction method name {{method_name}} isn\'t allowed by the access key","DeleteAccountHasRent":"Account {{account_id}} can\'t be deleted. It has {{balance}}, which is enough to cover the rent","DeleteAccountHasEnoughBalance":"Account {{account_id}} can\'t be deleted. It has {{balance}}, which is enough to cover it\'s storage","InvalidReceiver":"Invalid receiver account ID {{receiver_id}} according to requirements","DeleteKeyDoesNotExist":"Account {{account_id}} tries to remove an access key that doesn\'t exist","Timeout":"Timeout exceeded","Closed":"Connection closed"}');

},{}],"hYY7T":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Timeout = exports.InternalError = exports.Closed = exports.UnsuitableStakingKey = exports.TriesToUnstake = exports.TriesToStake = exports.TotalPrepaidGasExceeded = exports.TotalNumberOfActionsExceeded = exports.SignerDoesNotExist = exports.RequiresFullAccess = exports.ReceiverMismatch = exports.OnlyImplicitAccountCreationAllowed = exports.NotEnoughBalance = exports.NotEnoughAllowance = exports.MethodNameMismatch = exports.LackBalanceForState = exports.InvalidSignerId = exports.InvalidSignature = exports.InvalidReceiverId = exports.InvalidPredecessorId = exports.InvalidNonce = exports.InvalidDataReceiverId = exports.ReceiptValidationError = exports.InvalidChain = exports.InsufficientStake = exports.FunctionCallZeroAttachedGas = exports.FunctionCallMethodNameLengthExceeded = exports.FunctionCallArgumentsLengthExceeded = exports.Expired = exports.DepositWithFunctionCall = exports.DeleteKeyDoesNotExist = exports.DeleteActionMustBeFinal = exports.DeleteAccountStaking = exports.CreateAccountOnlyByRegistrar = exports.CreateAccountNotAllowed = exports.CostOverflow = exports.BalanceMismatchError = exports.AddKeyMethodNamesNumberOfBytesExceeded = exports.AddKeyMethodNameLengthExceeded = exports.AddKeyAlreadyExists = exports.ActorNoPermission = exports.ActionsValidationError = exports.AccountDoesNotExist = exports.AccountAlreadyExists = exports.AccessKeyNotFound = exports.InvalidAccessKeyError = exports.InvalidTxError = exports.WriteError = exports.WasmerCompileError = exports.WasmUnknownError = exports.ValueLengthExceeded = exports.Unreachable = exports.TotalLogLengthExceeded = exports.StackOverflow = exports.StackHeightInstrumentation = exports.SerializationError = exports.Serialization = exports.ReturnedValueLengthExceeded = exports.ReadError = exports.ProhibitedInView = exports.NumberPromisesExceeded = exports.NumberOfLogsExceeded = exports.NumberInputDataDependenciesExceeded = exports.MisalignedAtomicAccess = exports.MethodUTF8Error = exports.MethodNotFound = exports.MethodInvalidSignature = exports.MethodEmptyName = exports.MethodResolveError = exports.MemoryOutOfBounds = exports.MemoryAccessViolation = exports.Memory = exports.LinkError = exports.KeyLengthExceeded = exports.IteratorWasInvalidated = exports.InvalidRegisterId = exports.InvalidReceiptIndex = exports.InvalidPublicKey = exports.InvalidPromiseResultIndex = exports.InvalidPromiseIndex = exports.InvalidMethodName = exports.InvalidIteratorIndex = exports.InvalidAccountId = exports.InternalMemoryDeclared = exports.IntegerOverflow = exports.Instantiate = exports.IncorrectCallIndirectSignature = exports.IllegalArithmetic = exports.GuestPanic = exports.GenericTrap = exports.GasLimitExceeded = exports.GasInstrumentation = exports.GasExceeded = exports.EmptyMethodName = exports.DeserializationError = exports.Deserialization = exports.PrepareError = exports.Deprecated = exports.ContractSizeExceeded = exports.CodeDoesNotExist = exports.CompilationError = exports.CannotReturnJointPromise = exports.CannotAppendActionToJointPromise = exports.CallIndirectOOB = exports.CacheError = exports.BreakpointTrap = exports.WasmTrap = exports.BalanceExceeded = exports.BadUTF8 = exports.BadUTF16 = exports.HostError = exports.FunctionCallError = exports.ActionError = exports.TxExecutionError = exports.ServerError = void 0;
const errors_1 = require("../utils/errors");
class ServerError extends errors_1.TypedError {
}
exports.ServerError = ServerError;
class TxExecutionError extends ServerError {
}
exports.TxExecutionError = TxExecutionError;
class ActionError extends TxExecutionError {
}
exports.ActionError = ActionError;
class FunctionCallError extends ActionError {
}
exports.FunctionCallError = FunctionCallError;
class HostError extends FunctionCallError {
}
exports.HostError = HostError;
class BadUTF16 extends HostError {
}
exports.BadUTF16 = BadUTF16;
class BadUTF8 extends HostError {
}
exports.BadUTF8 = BadUTF8;
class BalanceExceeded extends HostError {
}
exports.BalanceExceeded = BalanceExceeded;
class WasmTrap extends FunctionCallError {
}
exports.WasmTrap = WasmTrap;
class BreakpointTrap extends WasmTrap {
}
exports.BreakpointTrap = BreakpointTrap;
class CacheError extends errors_1.TypedError {
}
exports.CacheError = CacheError;
class CallIndirectOOB extends WasmTrap {
}
exports.CallIndirectOOB = CallIndirectOOB;
class CannotAppendActionToJointPromise extends HostError {
}
exports.CannotAppendActionToJointPromise = CannotAppendActionToJointPromise;
class CannotReturnJointPromise extends HostError {
}
exports.CannotReturnJointPromise = CannotReturnJointPromise;
class CompilationError extends FunctionCallError {
}
exports.CompilationError = CompilationError;
class CodeDoesNotExist extends CompilationError {
}
exports.CodeDoesNotExist = CodeDoesNotExist;
class ContractSizeExceeded extends HostError {
}
exports.ContractSizeExceeded = ContractSizeExceeded;
class Deprecated extends HostError {
}
exports.Deprecated = Deprecated;
class PrepareError extends CompilationError {
}
exports.PrepareError = PrepareError;
class Deserialization extends PrepareError {
}
exports.Deserialization = Deserialization;
class DeserializationError extends CacheError {
}
exports.DeserializationError = DeserializationError;
class EmptyMethodName extends HostError {
}
exports.EmptyMethodName = EmptyMethodName;
class GasExceeded extends HostError {
}
exports.GasExceeded = GasExceeded;
class GasInstrumentation extends PrepareError {
}
exports.GasInstrumentation = GasInstrumentation;
class GasLimitExceeded extends HostError {
}
exports.GasLimitExceeded = GasLimitExceeded;
class GenericTrap extends WasmTrap {
}
exports.GenericTrap = GenericTrap;
class GuestPanic extends HostError {
}
exports.GuestPanic = GuestPanic;
class IllegalArithmetic extends WasmTrap {
}
exports.IllegalArithmetic = IllegalArithmetic;
class IncorrectCallIndirectSignature extends WasmTrap {
}
exports.IncorrectCallIndirectSignature = IncorrectCallIndirectSignature;
class Instantiate extends PrepareError {
}
exports.Instantiate = Instantiate;
class IntegerOverflow extends HostError {
}
exports.IntegerOverflow = IntegerOverflow;
class InternalMemoryDeclared extends PrepareError {
}
exports.InternalMemoryDeclared = InternalMemoryDeclared;
class InvalidAccountId extends HostError {
}
exports.InvalidAccountId = InvalidAccountId;
class InvalidIteratorIndex extends HostError {
}
exports.InvalidIteratorIndex = InvalidIteratorIndex;
class InvalidMethodName extends HostError {
}
exports.InvalidMethodName = InvalidMethodName;
class InvalidPromiseIndex extends HostError {
}
exports.InvalidPromiseIndex = InvalidPromiseIndex;
class InvalidPromiseResultIndex extends HostError {
}
exports.InvalidPromiseResultIndex = InvalidPromiseResultIndex;
class InvalidPublicKey extends HostError {
}
exports.InvalidPublicKey = InvalidPublicKey;
class InvalidReceiptIndex extends HostError {
}
exports.InvalidReceiptIndex = InvalidReceiptIndex;
class InvalidRegisterId extends HostError {
}
exports.InvalidRegisterId = InvalidRegisterId;
class IteratorWasInvalidated extends HostError {
}
exports.IteratorWasInvalidated = IteratorWasInvalidated;
class KeyLengthExceeded extends HostError {
}
exports.KeyLengthExceeded = KeyLengthExceeded;
class LinkError extends FunctionCallError {
}
exports.LinkError = LinkError;
class Memory extends PrepareError {
}
exports.Memory = Memory;
class MemoryAccessViolation extends HostError {
}
exports.MemoryAccessViolation = MemoryAccessViolation;
class MemoryOutOfBounds extends WasmTrap {
}
exports.MemoryOutOfBounds = MemoryOutOfBounds;
class MethodResolveError extends FunctionCallError {
}
exports.MethodResolveError = MethodResolveError;
class MethodEmptyName extends MethodResolveError {
}
exports.MethodEmptyName = MethodEmptyName;
class MethodInvalidSignature extends MethodResolveError {
}
exports.MethodInvalidSignature = MethodInvalidSignature;
class MethodNotFound extends MethodResolveError {
}
exports.MethodNotFound = MethodNotFound;
class MethodUTF8Error extends MethodResolveError {
}
exports.MethodUTF8Error = MethodUTF8Error;
class MisalignedAtomicAccess extends WasmTrap {
}
exports.MisalignedAtomicAccess = MisalignedAtomicAccess;
class NumberInputDataDependenciesExceeded extends HostError {
}
exports.NumberInputDataDependenciesExceeded = NumberInputDataDependenciesExceeded;
class NumberOfLogsExceeded extends HostError {
}
exports.NumberOfLogsExceeded = NumberOfLogsExceeded;
class NumberPromisesExceeded extends HostError {
}
exports.NumberPromisesExceeded = NumberPromisesExceeded;
class ProhibitedInView extends HostError {
}
exports.ProhibitedInView = ProhibitedInView;
class ReadError extends CacheError {
}
exports.ReadError = ReadError;
class ReturnedValueLengthExceeded extends HostError {
}
exports.ReturnedValueLengthExceeded = ReturnedValueLengthExceeded;
class Serialization extends PrepareError {
}
exports.Serialization = Serialization;
class SerializationError extends CacheError {
}
exports.SerializationError = SerializationError;
class StackHeightInstrumentation extends PrepareError {
}
exports.StackHeightInstrumentation = StackHeightInstrumentation;
class StackOverflow extends WasmTrap {
}
exports.StackOverflow = StackOverflow;
class TotalLogLengthExceeded extends HostError {
}
exports.TotalLogLengthExceeded = TotalLogLengthExceeded;
class Unreachable extends WasmTrap {
}
exports.Unreachable = Unreachable;
class ValueLengthExceeded extends HostError {
}
exports.ValueLengthExceeded = ValueLengthExceeded;
class WasmUnknownError extends FunctionCallError {
}
exports.WasmUnknownError = WasmUnknownError;
class WasmerCompileError extends CompilationError {
}
exports.WasmerCompileError = WasmerCompileError;
class WriteError extends CacheError {
}
exports.WriteError = WriteError;
class InvalidTxError extends TxExecutionError {
}
exports.InvalidTxError = InvalidTxError;
class InvalidAccessKeyError extends InvalidTxError {
}
exports.InvalidAccessKeyError = InvalidAccessKeyError;
class AccessKeyNotFound extends InvalidAccessKeyError {
}
exports.AccessKeyNotFound = AccessKeyNotFound;
class AccountAlreadyExists extends ActionError {
}
exports.AccountAlreadyExists = AccountAlreadyExists;
class AccountDoesNotExist extends ActionError {
}
exports.AccountDoesNotExist = AccountDoesNotExist;
class ActionsValidationError extends errors_1.TypedError {
}
exports.ActionsValidationError = ActionsValidationError;
class ActorNoPermission extends ActionError {
}
exports.ActorNoPermission = ActorNoPermission;
class AddKeyAlreadyExists extends ActionError {
}
exports.AddKeyAlreadyExists = AddKeyAlreadyExists;
class AddKeyMethodNameLengthExceeded extends ActionsValidationError {
}
exports.AddKeyMethodNameLengthExceeded = AddKeyMethodNameLengthExceeded;
class AddKeyMethodNamesNumberOfBytesExceeded extends ActionsValidationError {
}
exports.AddKeyMethodNamesNumberOfBytesExceeded = AddKeyMethodNamesNumberOfBytesExceeded;
class BalanceMismatchError extends errors_1.TypedError {
}
exports.BalanceMismatchError = BalanceMismatchError;
class CostOverflow extends InvalidTxError {
}
exports.CostOverflow = CostOverflow;
class CreateAccountNotAllowed extends ActionError {
}
exports.CreateAccountNotAllowed = CreateAccountNotAllowed;
class CreateAccountOnlyByRegistrar extends ActionError {
}
exports.CreateAccountOnlyByRegistrar = CreateAccountOnlyByRegistrar;
class DeleteAccountStaking extends ActionError {
}
exports.DeleteAccountStaking = DeleteAccountStaking;
class DeleteActionMustBeFinal extends ActionsValidationError {
}
exports.DeleteActionMustBeFinal = DeleteActionMustBeFinal;
class DeleteKeyDoesNotExist extends ActionError {
}
exports.DeleteKeyDoesNotExist = DeleteKeyDoesNotExist;
class DepositWithFunctionCall extends InvalidAccessKeyError {
}
exports.DepositWithFunctionCall = DepositWithFunctionCall;
class Expired extends InvalidTxError {
}
exports.Expired = Expired;
class FunctionCallArgumentsLengthExceeded extends ActionsValidationError {
}
exports.FunctionCallArgumentsLengthExceeded = FunctionCallArgumentsLengthExceeded;
class FunctionCallMethodNameLengthExceeded extends ActionsValidationError {
}
exports.FunctionCallMethodNameLengthExceeded = FunctionCallMethodNameLengthExceeded;
class FunctionCallZeroAttachedGas extends ActionsValidationError {
}
exports.FunctionCallZeroAttachedGas = FunctionCallZeroAttachedGas;
class InsufficientStake extends ActionError {
}
exports.InsufficientStake = InsufficientStake;
class InvalidChain extends InvalidTxError {
}
exports.InvalidChain = InvalidChain;
class ReceiptValidationError extends errors_1.TypedError {
}
exports.ReceiptValidationError = ReceiptValidationError;
class InvalidDataReceiverId extends ReceiptValidationError {
}
exports.InvalidDataReceiverId = InvalidDataReceiverId;
class InvalidNonce extends InvalidTxError {
}
exports.InvalidNonce = InvalidNonce;
class InvalidPredecessorId extends ReceiptValidationError {
}
exports.InvalidPredecessorId = InvalidPredecessorId;
class InvalidReceiverId extends InvalidTxError {
}
exports.InvalidReceiverId = InvalidReceiverId;
class InvalidSignature extends InvalidTxError {
}
exports.InvalidSignature = InvalidSignature;
class InvalidSignerId extends InvalidTxError {
}
exports.InvalidSignerId = InvalidSignerId;
class LackBalanceForState extends ActionError {
}
exports.LackBalanceForState = LackBalanceForState;
class MethodNameMismatch extends InvalidAccessKeyError {
}
exports.MethodNameMismatch = MethodNameMismatch;
class NotEnoughAllowance extends InvalidAccessKeyError {
}
exports.NotEnoughAllowance = NotEnoughAllowance;
class NotEnoughBalance extends InvalidTxError {
}
exports.NotEnoughBalance = NotEnoughBalance;
class OnlyImplicitAccountCreationAllowed extends ActionError {
}
exports.OnlyImplicitAccountCreationAllowed = OnlyImplicitAccountCreationAllowed;
class ReceiverMismatch extends InvalidAccessKeyError {
}
exports.ReceiverMismatch = ReceiverMismatch;
class RequiresFullAccess extends InvalidAccessKeyError {
}
exports.RequiresFullAccess = RequiresFullAccess;
class SignerDoesNotExist extends InvalidTxError {
}
exports.SignerDoesNotExist = SignerDoesNotExist;
class TotalNumberOfActionsExceeded extends ActionsValidationError {
}
exports.TotalNumberOfActionsExceeded = TotalNumberOfActionsExceeded;
class TotalPrepaidGasExceeded extends ActionsValidationError {
}
exports.TotalPrepaidGasExceeded = TotalPrepaidGasExceeded;
class TriesToStake extends ActionError {
}
exports.TriesToStake = TriesToStake;
class TriesToUnstake extends ActionError {
}
exports.TriesToUnstake = TriesToUnstake;
class UnsuitableStakingKey extends ActionsValidationError {
}
exports.UnsuitableStakingKey = UnsuitableStakingKey;
class Closed extends ServerError {
}
exports.Closed = Closed;
class InternalError extends ServerError {
}
exports.InternalError = InternalError;
class Timeout extends ServerError {
}
exports.Timeout = Timeout;

},{"../utils/errors":"btMYy"}],"jOCMH":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rpc_errors = exports.KeyPairEd25519 = exports.KeyPair = exports.PublicKey = exports.format = exports.enums = exports.web = exports.serialize = exports.network = exports.key_pair = void 0;
const key_pair = __importStar(require("./key_pair"));
exports.key_pair = key_pair;
const network = __importStar(require("./network"));
exports.network = network;
const serialize = __importStar(require("./serialize"));
exports.serialize = serialize;
const web = __importStar(require("./web"));
exports.web = web;
const enums = __importStar(require("./enums"));
exports.enums = enums;
const format = __importStar(require("./format"));
exports.format = format;
const rpc_errors = __importStar(require("./rpc_errors"));
exports.rpc_errors = rpc_errors;
const key_pair_1 = require("./key_pair");
Object.defineProperty(exports, "PublicKey", {
    enumerable: true,
    get: function() {
        return key_pair_1.PublicKey;
    }
});
Object.defineProperty(exports, "KeyPair", {
    enumerable: true,
    get: function() {
        return key_pair_1.KeyPair;
    }
});
Object.defineProperty(exports, "KeyPairEd25519", {
    enumerable: true,
    get: function() {
        return key_pair_1.KeyPairEd25519;
    }
});

},{"./key_pair":"kBQFP","./network":"hH7sc","./serialize":"dUoM9","./web":"iSqiB","./enums":"kjmPo","./format":"16c5X","./rpc_errors":"1TB1L"}],"hH7sc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"16c5X":[function(require,module,exports) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseNearAmount = exports.formatNearAmount = exports.NEAR_NOMINATION = exports.NEAR_NOMINATION_EXP = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
/**
 * Exponent for calculating how many indivisible units are there in one NEAR. See {@link NEAR_NOMINATION}.
 */ exports.NEAR_NOMINATION_EXP = 24;
/**
 * Number of indivisible units in one NEAR. Derived from {@link NEAR_NOMINATION_EXP}.
 */ exports.NEAR_NOMINATION = new bn_js_1.default("10", 10).pow(new bn_js_1.default(exports.NEAR_NOMINATION_EXP, 10));
// Pre-calculate offests used for rounding to different number of digits
const ROUNDING_OFFSETS = [];
const BN10 = new bn_js_1.default(10);
for(let i = 0, offset = new bn_js_1.default(5); i < exports.NEAR_NOMINATION_EXP; i++, offset = offset.mul(BN10))ROUNDING_OFFSETS[i] = offset;
/**
 * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.
 * Effectively this divides given amount by {@link NEAR_NOMINATION}.
 *
 * @param balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})
 * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.
 * @returns Value in Ⓝ
 */ function formatNearAmount(balance, fracDigits = exports.NEAR_NOMINATION_EXP) {
    const balanceBN = new bn_js_1.default(balance, 10);
    if (fracDigits !== exports.NEAR_NOMINATION_EXP) {
        // Adjust balance for rounding at given number of digits
        const roundingExp = exports.NEAR_NOMINATION_EXP - fracDigits - 1;
        if (roundingExp > 0) balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);
    }
    balance = balanceBN.toString();
    const wholeStr = balance.substring(0, balance.length - exports.NEAR_NOMINATION_EXP) || "0";
    const fractionStr = balance.substring(balance.length - exports.NEAR_NOMINATION_EXP).padStart(exports.NEAR_NOMINATION_EXP, "0").substring(0, fracDigits);
    return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);
}
exports.formatNearAmount = formatNearAmount;
/**
 * Convert human readable NEAR amount to internal indivisible units.
 * Effectively this multiplies given amount by {@link NEAR_NOMINATION}.
 *
 * @param amt decimal string (potentially fractional) denominated in NEAR.
 * @returns The parsed yoctoⓃ amount or null if no amount was passed in
 */ function parseNearAmount(amt) {
    if (!amt) return null;
    amt = cleanupAmount(amt);
    const split = amt.split(".");
    const wholePart = split[0];
    const fracPart = split[1] || "";
    if (split.length > 2 || fracPart.length > exports.NEAR_NOMINATION_EXP) throw new Error(`Cannot parse '${amt}' as NEAR amount`);
    return trimLeadingZeroes(wholePart + fracPart.padEnd(exports.NEAR_NOMINATION_EXP, "0"));
}
exports.parseNearAmount = parseNearAmount;
/**
 * Removes commas from the input
 * @param amount A value or amount that may contain commas
 * @returns string The cleaned value
 */ function cleanupAmount(amount) {
    return amount.replace(/,/g, "").trim();
}
/**
 * Removes .000… from an input
 * @param value A value that may contain trailing zeroes in the decimals place
 * @returns string The value without the trailing zeros
 */ function trimTrailingZeroes(value) {
    return value.replace(/\.?0*$/, "");
}
/**
 * Removes leading zeroes from an input
 * @param value A value that may contain leading zeroes
 * @returns string The value without the leading zeroes
 */ function trimLeadingZeroes(value) {
    value = value.replace(/^0+/, "");
    if (value === "") return "0";
    return value;
}
/**
 * Returns a human-readable value with commas
 * @param value A value that may not contain commas
 * @returns string A value with commas
 */ function formatWithCommas(value) {
    const pattern = /(-?\d+)(\d{3})/;
    while(pattern.test(value))value = value.replace(pattern, "$1,$2");
    return value;
}

},{"bn.js":"VopIn"}],"jJQ5a":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.signTransaction = exports.createTransaction = exports.SCHEMA = exports.Action = exports.SignedTransaction = exports.Transaction = exports.Signature = exports.deleteAccount = exports.deleteKey = exports.addKey = exports.stake = exports.transfer = exports.functionCall = exports.deployContract = exports.createAccount = exports.DeleteAccount = exports.DeleteKey = exports.AddKey = exports.Stake = exports.Transfer = exports.FunctionCall = exports.DeployContract = exports.CreateAccount = exports.IAction = exports.functionCallAccessKey = exports.fullAccessKey = exports.AccessKey = exports.AccessKeyPermission = exports.FullAccessPermission = exports.FunctionCallPermission = void 0;
const js_sha256_1 = __importDefault(require("js-sha256"));
const enums_1 = require("./utils/enums");
const borsh_1 = require("borsh");
const key_pair_1 = require("./utils/key_pair");
class FunctionCallPermission extends enums_1.Assignable {
}
exports.FunctionCallPermission = FunctionCallPermission;
class FullAccessPermission extends enums_1.Assignable {
}
exports.FullAccessPermission = FullAccessPermission;
class AccessKeyPermission extends enums_1.Enum {
}
exports.AccessKeyPermission = AccessKeyPermission;
class AccessKey extends enums_1.Assignable {
}
exports.AccessKey = AccessKey;
function fullAccessKey() {
    return new AccessKey({
        nonce: 0,
        permission: new AccessKeyPermission({
            fullAccess: new FullAccessPermission({})
        })
    });
}
exports.fullAccessKey = fullAccessKey;
function functionCallAccessKey(receiverId, methodNames, allowance) {
    return new AccessKey({
        nonce: 0,
        permission: new AccessKeyPermission({
            functionCall: new FunctionCallPermission({
                receiverId,
                allowance,
                methodNames
            })
        })
    });
}
exports.functionCallAccessKey = functionCallAccessKey;
class IAction extends enums_1.Assignable {
}
exports.IAction = IAction;
class CreateAccount extends IAction {
}
exports.CreateAccount = CreateAccount;
class DeployContract extends IAction {
}
exports.DeployContract = DeployContract;
class FunctionCall extends IAction {
}
exports.FunctionCall = FunctionCall;
class Transfer extends IAction {
}
exports.Transfer = Transfer;
class Stake extends IAction {
}
exports.Stake = Stake;
class AddKey extends IAction {
}
exports.AddKey = AddKey;
class DeleteKey extends IAction {
}
exports.DeleteKey = DeleteKey;
class DeleteAccount extends IAction {
}
exports.DeleteAccount = DeleteAccount;
function createAccount() {
    return new Action({
        createAccount: new CreateAccount({})
    });
}
exports.createAccount = createAccount;
function deployContract(code) {
    return new Action({
        deployContract: new DeployContract({
            code
        })
    });
}
exports.deployContract = deployContract;
/**
 * Constructs {@link Action} instance representing contract method call.
 *
 * @param methodName the name of the method to call
 * @param args arguments to pass to method. Can be either plain JS object which gets serialized as JSON automatically
 *  or `Uint8Array` instance which represents bytes passed as is.
 * @param gas max amount of gas that method call can use
 * @param deposit amount of NEAR (in yoctoNEAR) to send together with the call
 */ function functionCall(methodName, args, gas, deposit) {
    const anyArgs = args;
    const isUint8Array = anyArgs.byteLength !== undefined && anyArgs.byteLength === anyArgs.length;
    const serializedArgs = isUint8Array ? args : Buffer.from(JSON.stringify(args));
    return new Action({
        functionCall: new FunctionCall({
            methodName,
            args: serializedArgs,
            gas,
            deposit
        })
    });
}
exports.functionCall = functionCall;
function transfer(deposit) {
    return new Action({
        transfer: new Transfer({
            deposit
        })
    });
}
exports.transfer = transfer;
function stake(stake1, publicKey) {
    return new Action({
        stake: new Stake({
            stake: stake1,
            publicKey
        })
    });
}
exports.stake = stake;
function addKey(publicKey, accessKey) {
    return new Action({
        addKey: new AddKey({
            publicKey,
            accessKey
        })
    });
}
exports.addKey = addKey;
function deleteKey(publicKey) {
    return new Action({
        deleteKey: new DeleteKey({
            publicKey
        })
    });
}
exports.deleteKey = deleteKey;
function deleteAccount(beneficiaryId) {
    return new Action({
        deleteAccount: new DeleteAccount({
            beneficiaryId
        })
    });
}
exports.deleteAccount = deleteAccount;
class Signature extends enums_1.Assignable {
}
exports.Signature = Signature;
class Transaction extends enums_1.Assignable {
    encode() {
        return borsh_1.serialize(exports.SCHEMA, this);
    }
    static decode(bytes) {
        return borsh_1.deserialize(exports.SCHEMA, Transaction, bytes);
    }
}
exports.Transaction = Transaction;
class SignedTransaction extends enums_1.Assignable {
    encode() {
        return borsh_1.serialize(exports.SCHEMA, this);
    }
    static decode(bytes) {
        return borsh_1.deserialize(exports.SCHEMA, SignedTransaction, bytes);
    }
}
exports.SignedTransaction = SignedTransaction;
/**
 * Contains a list of the valid transaction Actions available with this API
 */ class Action extends enums_1.Enum {
}
exports.Action = Action;
exports.SCHEMA = new Map([
    [
        Signature,
        {
            kind: "struct",
            fields: [
                [
                    "keyType",
                    "u8"
                ],
                [
                    "data",
                    [
                        64
                    ]
                ]
            ]
        }
    ],
    [
        SignedTransaction,
        {
            kind: "struct",
            fields: [
                [
                    "transaction",
                    Transaction
                ],
                [
                    "signature",
                    Signature
                ]
            ]
        }
    ],
    [
        Transaction,
        {
            kind: "struct",
            fields: [
                [
                    "signerId",
                    "string"
                ],
                [
                    "publicKey",
                    key_pair_1.PublicKey
                ],
                [
                    "nonce",
                    "u64"
                ],
                [
                    "receiverId",
                    "string"
                ],
                [
                    "blockHash",
                    [
                        32
                    ]
                ],
                [
                    "actions",
                    [
                        Action
                    ]
                ]
            ]
        }
    ],
    [
        key_pair_1.PublicKey,
        {
            kind: "struct",
            fields: [
                [
                    "keyType",
                    "u8"
                ],
                [
                    "data",
                    [
                        32
                    ]
                ]
            ]
        }
    ],
    [
        AccessKey,
        {
            kind: "struct",
            fields: [
                [
                    "nonce",
                    "u64"
                ],
                [
                    "permission",
                    AccessKeyPermission
                ], 
            ]
        }
    ],
    [
        AccessKeyPermission,
        {
            kind: "enum",
            field: "enum",
            values: [
                [
                    "functionCall",
                    FunctionCallPermission
                ],
                [
                    "fullAccess",
                    FullAccessPermission
                ], 
            ]
        }
    ],
    [
        FunctionCallPermission,
        {
            kind: "struct",
            fields: [
                [
                    "allowance",
                    {
                        kind: "option",
                        type: "u128"
                    }
                ],
                [
                    "receiverId",
                    "string"
                ],
                [
                    "methodNames",
                    [
                        "string"
                    ]
                ], 
            ]
        }
    ],
    [
        FullAccessPermission,
        {
            kind: "struct",
            fields: []
        }
    ],
    [
        Action,
        {
            kind: "enum",
            field: "enum",
            values: [
                [
                    "createAccount",
                    CreateAccount
                ],
                [
                    "deployContract",
                    DeployContract
                ],
                [
                    "functionCall",
                    FunctionCall
                ],
                [
                    "transfer",
                    Transfer
                ],
                [
                    "stake",
                    Stake
                ],
                [
                    "addKey",
                    AddKey
                ],
                [
                    "deleteKey",
                    DeleteKey
                ],
                [
                    "deleteAccount",
                    DeleteAccount
                ], 
            ]
        }
    ],
    [
        CreateAccount,
        {
            kind: "struct",
            fields: []
        }
    ],
    [
        DeployContract,
        {
            kind: "struct",
            fields: [
                [
                    "code",
                    [
                        "u8"
                    ]
                ]
            ]
        }
    ],
    [
        FunctionCall,
        {
            kind: "struct",
            fields: [
                [
                    "methodName",
                    "string"
                ],
                [
                    "args",
                    [
                        "u8"
                    ]
                ],
                [
                    "gas",
                    "u64"
                ],
                [
                    "deposit",
                    "u128"
                ]
            ]
        }
    ],
    [
        Transfer,
        {
            kind: "struct",
            fields: [
                [
                    "deposit",
                    "u128"
                ]
            ]
        }
    ],
    [
        Stake,
        {
            kind: "struct",
            fields: [
                [
                    "stake",
                    "u128"
                ],
                [
                    "publicKey",
                    key_pair_1.PublicKey
                ]
            ]
        }
    ],
    [
        AddKey,
        {
            kind: "struct",
            fields: [
                [
                    "publicKey",
                    key_pair_1.PublicKey
                ],
                [
                    "accessKey",
                    AccessKey
                ]
            ]
        }
    ],
    [
        DeleteKey,
        {
            kind: "struct",
            fields: [
                [
                    "publicKey",
                    key_pair_1.PublicKey
                ]
            ]
        }
    ],
    [
        DeleteAccount,
        {
            kind: "struct",
            fields: [
                [
                    "beneficiaryId",
                    "string"
                ]
            ]
        }
    ], 
]);
function createTransaction(signerId, publicKey, receiverId, nonce, actions, blockHash) {
    return new Transaction({
        signerId,
        publicKey,
        nonce,
        receiverId,
        actions,
        blockHash
    });
}
exports.createTransaction = createTransaction;
/**
 * Signs a given transaction from an account with given keys, applied to the given network
 * @param transaction The Transaction object to sign
 * @param signer The {Signer} object that assists with signing keys
 * @param accountId The human-readable NEAR account name
 * @param networkId The targeted network. (ex. default, betanet, etc…)
 */ async function signTransactionObject(transaction, signer, accountId, networkId) {
    const message = borsh_1.serialize(exports.SCHEMA, transaction);
    const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));
    const signature = await signer.signMessage(message, accountId, networkId);
    const signedTx = new SignedTransaction({
        transaction,
        signature: new Signature({
            keyType: transaction.publicKey.keyType,
            data: signature.signature
        })
    });
    return [
        hash,
        signedTx
    ];
}
async function signTransaction(...args) {
    if (args[0].constructor === Transaction) {
        const [transaction, signer, accountId, networkId] = args;
        return signTransactionObject(transaction, signer, accountId, networkId);
    } else {
        const [receiverId, nonce, actions, blockHash, signer, accountId, networkId] = args;
        const publicKey = await signer.getPublicKey(accountId, networkId);
        const transaction = createTransaction(accountId, publicKey, receiverId, nonce, actions, blockHash);
        return signTransactionObject(transaction, signer, accountId, networkId);
    }
}
exports.signTransaction = signTransaction;

},{"buffer":"fCgem","js-sha256":"ahVaM","./utils/enums":"kjmPo","borsh":"4JCmN","./utils/key_pair":"kBQFP"}],"ahVaM":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */ /*jslint bitwise: true */ (function() {
    "use strict";
    var ERROR = "input is invalid type";
    var WINDOW = typeof window === "object";
    var root = WINDOW ? window : {};
    if (root.JS_SHA256_NO_WINDOW) WINDOW = false;
    var WEB_WORKER = !WINDOW && typeof self === "object";
    var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
    if (NODE_JS) root = global;
    else if (WEB_WORKER) root = self;
    var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && true && module.exports;
    var AMD = typeof define === "function" && define.amd;
    var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
    var HEX_CHARS = "0123456789abcdef".split("");
    var EXTRA = [
        -2147483648,
        8388608,
        32768,
        128
    ];
    var SHIFT = [
        24,
        16,
        8,
        0
    ];
    var K = [
        0x428a2f98,
        0x71374491,
        0xb5c0fbcf,
        0xe9b5dba5,
        0x3956c25b,
        0x59f111f1,
        0x923f82a4,
        0xab1c5ed5,
        0xd807aa98,
        0x12835b01,
        0x243185be,
        0x550c7dc3,
        0x72be5d74,
        0x80deb1fe,
        0x9bdc06a7,
        0xc19bf174,
        0xe49b69c1,
        0xefbe4786,
        0x0fc19dc6,
        0x240ca1cc,
        0x2de92c6f,
        0x4a7484aa,
        0x5cb0a9dc,
        0x76f988da,
        0x983e5152,
        0xa831c66d,
        0xb00327c8,
        0xbf597fc7,
        0xc6e00bf3,
        0xd5a79147,
        0x06ca6351,
        0x14292967,
        0x27b70a85,
        0x2e1b2138,
        0x4d2c6dfc,
        0x53380d13,
        0x650a7354,
        0x766a0abb,
        0x81c2c92e,
        0x92722c85,
        0xa2bfe8a1,
        0xa81a664b,
        0xc24b8b70,
        0xc76c51a3,
        0xd192e819,
        0xd6990624,
        0xf40e3585,
        0x106aa070,
        0x19a4c116,
        0x1e376c08,
        0x2748774c,
        0x34b0bcb5,
        0x391c0cb3,
        0x4ed8aa4a,
        0x5b9cca4f,
        0x682e6ff3,
        0x748f82ee,
        0x78a5636f,
        0x84c87814,
        0x8cc70208,
        0x90befffa,
        0xa4506ceb,
        0xbef9a3f7,
        0xc67178f2
    ];
    var OUTPUT_TYPES = [
        "hex",
        "array",
        "digest",
        "arrayBuffer"
    ];
    var blocks1 = [];
    if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) Array.isArray = function(obj) {
        return Object.prototype.toString.call(obj) === "[object Array]";
    };
    if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) ArrayBuffer.isView = function(obj) {
        return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
    var createOutputMethod = function(outputType, is224) {
        return function(message) {
            return new Sha256(is224, true).update(message)[outputType]();
        };
    };
    var createMethod = function(is224) {
        var method = createOutputMethod("hex", is224);
        if (NODE_JS) method = nodeWrap(method, is224);
        method.create = function() {
            return new Sha256(is224);
        };
        method.update = function(message) {
            return method.create().update(message);
        };
        for(var i = 0; i < OUTPUT_TYPES.length; ++i){
            var type = OUTPUT_TYPES[i];
            method[type] = createOutputMethod(type, is224);
        }
        return method;
    };
    var nodeWrap = function(method, is224) {
        var crypto = eval("require('crypto')");
        var Buffer = eval("require('buffer').Buffer");
        var algorithm = is224 ? "sha224" : "sha256";
        var nodeMethod = function(message) {
            if (typeof message === "string") return crypto.createHash(algorithm).update(message, "utf8").digest("hex");
            else {
                if (message === null || message === undefined) throw new Error(ERROR);
                else if (message.constructor === ArrayBuffer) message = new Uint8Array(message);
            }
            if (Array.isArray(message) || ArrayBuffer.isView(message) || message.constructor === Buffer) return crypto.createHash(algorithm).update(new Buffer(message)).digest("hex");
            else return method(message);
        };
        return nodeMethod;
    };
    var createHmacOutputMethod = function(outputType, is224) {
        return function(key, message) {
            return new HmacSha256(key, is224, true).update(message)[outputType]();
        };
    };
    var createHmacMethod = function(is224) {
        var method = createHmacOutputMethod("hex", is224);
        method.create = function(key) {
            return new HmacSha256(key, is224);
        };
        method.update = function(key, message) {
            return method.create(key).update(message);
        };
        for(var i = 0; i < OUTPUT_TYPES.length; ++i){
            var type = OUTPUT_TYPES[i];
            method[type] = createHmacOutputMethod(type, is224);
        }
        return method;
    };
    function Sha256(is224, sharedMemory) {
        if (sharedMemory) {
            blocks1[0] = blocks1[16] = blocks1[1] = blocks1[2] = blocks1[3] = blocks1[4] = blocks1[5] = blocks1[6] = blocks1[7] = blocks1[8] = blocks1[9] = blocks1[10] = blocks1[11] = blocks1[12] = blocks1[13] = blocks1[14] = blocks1[15] = 0;
            this.blocks = blocks1;
        } else this.blocks = [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ];
        if (is224) {
            this.h0 = 0xc1059ed8;
            this.h1 = 0x367cd507;
            this.h2 = 0x3070dd17;
            this.h3 = 0xf70e5939;
            this.h4 = 0xffc00b31;
            this.h5 = 0x68581511;
            this.h6 = 0x64f98fa7;
            this.h7 = 0xbefa4fa4;
        } else {
            this.h0 = 0x6a09e667;
            this.h1 = 0xbb67ae85;
            this.h2 = 0x3c6ef372;
            this.h3 = 0xa54ff53a;
            this.h4 = 0x510e527f;
            this.h5 = 0x9b05688c;
            this.h6 = 0x1f83d9ab;
            this.h7 = 0x5be0cd19;
        }
        this.block = this.start = this.bytes = this.hBytes = 0;
        this.finalized = this.hashed = false;
        this.first = true;
        this.is224 = is224;
    }
    Sha256.prototype.update = function(message) {
        if (this.finalized) return;
        var notString, type = typeof message;
        if (type !== "string") {
            if (type === "object") {
                if (message === null) throw new Error(ERROR);
                else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) message = new Uint8Array(message);
                else if (!Array.isArray(message)) {
                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) throw new Error(ERROR);
                }
            } else throw new Error(ERROR);
            notString = true;
        }
        var code, index = 0, i, length = message.length, blocks = this.blocks;
        while(index < length){
            if (this.hashed) {
                this.hashed = false;
                blocks[0] = this.block;
                blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
            }
            if (notString) for(i = this.start; index < length && i < 64; ++index)blocks[i >> 2] |= message[index] << SHIFT[(i++) & 3];
            else for(i = this.start; index < length && i < 64; ++index){
                code = message.charCodeAt(index);
                if (code < 0x80) blocks[i >> 2] |= code << SHIFT[(i++) & 3];
                else if (code < 0x800) {
                    blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[(i++) & 3];
                } else if (code < 0xd800 || code >= 0xe000) {
                    blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[(i++) & 3];
                } else {
                    code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
                    blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[(i++) & 3];
                }
            }
            this.lastByteIndex = i;
            this.bytes += i - this.start;
            if (i >= 64) {
                this.block = blocks[16];
                this.start = i - 64;
                this.hash();
                this.hashed = true;
            } else this.start = i;
        }
        if (this.bytes > 4294967295) {
            this.hBytes += this.bytes / 4294967296 << 0;
            this.bytes = this.bytes % 4294967296;
        }
        return this;
    };
    Sha256.prototype.finalize = function() {
        if (this.finalized) return;
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex;
        blocks[16] = this.block;
        blocks[i >> 2] |= EXTRA[i & 3];
        this.block = blocks[16];
        if (i >= 56) {
            if (!this.hashed) this.hash();
            blocks[0] = this.block;
            blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
        }
        blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
        blocks[15] = this.bytes << 3;
        this.hash();
    };
    Sha256.prototype.hash = function() {
        var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6, h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;
        for(j = 16; j < 64; ++j){
            // rightrotate
            t1 = blocks[j - 15];
            s0 = (t1 >>> 7 | t1 << 25) ^ (t1 >>> 18 | t1 << 14) ^ t1 >>> 3;
            t1 = blocks[j - 2];
            s1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10;
            blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
        }
        bc = b & c;
        for(j = 0; j < 64; j += 4){
            if (this.first) {
                if (this.is224) {
                    ab = 300032;
                    t1 = blocks[0] - 1413257819;
                    h = t1 - 150054599 << 0;
                    d = t1 + 24177077 << 0;
                } else {
                    ab = 704751109;
                    t1 = blocks[0] - 210244248;
                    h = t1 - 1521486534 << 0;
                    d = t1 + 143694565 << 0;
                }
                this.first = false;
            } else {
                s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);
                s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
                ab = a & b;
                maj = ab ^ a & c ^ bc;
                ch = e & f ^ ~e & g;
                t1 = h + s1 + ch + K[j] + blocks[j];
                t2 = s0 + maj;
                h = d + t1 << 0;
                d = t1 + t2 << 0;
            }
            s0 = (d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10);
            s1 = (h >>> 6 | h << 26) ^ (h >>> 11 | h << 21) ^ (h >>> 25 | h << 7);
            da = d & a;
            maj = da ^ d & b ^ ab;
            ch = h & e ^ ~h & f;
            t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
            t2 = s0 + maj;
            g = c + t1 << 0;
            c = t1 + t2 << 0;
            s0 = (c >>> 2 | c << 30) ^ (c >>> 13 | c << 19) ^ (c >>> 22 | c << 10);
            s1 = (g >>> 6 | g << 26) ^ (g >>> 11 | g << 21) ^ (g >>> 25 | g << 7);
            cd = c & d;
            maj = cd ^ c & a ^ da;
            ch = g & h ^ ~g & e;
            t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
            t2 = s0 + maj;
            f = b + t1 << 0;
            b = t1 + t2 << 0;
            s0 = (b >>> 2 | b << 30) ^ (b >>> 13 | b << 19) ^ (b >>> 22 | b << 10);
            s1 = (f >>> 6 | f << 26) ^ (f >>> 11 | f << 21) ^ (f >>> 25 | f << 7);
            bc = b & c;
            maj = bc ^ b & d ^ cd;
            ch = f & g ^ ~f & h;
            t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
            t2 = s0 + maj;
            e = a + t1 << 0;
            a = t1 + t2 << 0;
        }
        this.h0 = this.h0 + a << 0;
        this.h1 = this.h1 + b << 0;
        this.h2 = this.h2 + c << 0;
        this.h3 = this.h3 + d << 0;
        this.h4 = this.h4 + e << 0;
        this.h5 = this.h5 + f << 0;
        this.h6 = this.h6 + g << 0;
        this.h7 = this.h7 + h << 0;
    };
    Sha256.prototype.hex = function() {
        this.finalize();
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;
        var hex = HEX_CHARS[h0 >> 28 & 0x0F] + HEX_CHARS[h0 >> 24 & 0x0F] + HEX_CHARS[h0 >> 20 & 0x0F] + HEX_CHARS[h0 >> 16 & 0x0F] + HEX_CHARS[h0 >> 12 & 0x0F] + HEX_CHARS[h0 >> 8 & 0x0F] + HEX_CHARS[h0 >> 4 & 0x0F] + HEX_CHARS[h0 & 0x0F] + HEX_CHARS[h1 >> 28 & 0x0F] + HEX_CHARS[h1 >> 24 & 0x0F] + HEX_CHARS[h1 >> 20 & 0x0F] + HEX_CHARS[h1 >> 16 & 0x0F] + HEX_CHARS[h1 >> 12 & 0x0F] + HEX_CHARS[h1 >> 8 & 0x0F] + HEX_CHARS[h1 >> 4 & 0x0F] + HEX_CHARS[h1 & 0x0F] + HEX_CHARS[h2 >> 28 & 0x0F] + HEX_CHARS[h2 >> 24 & 0x0F] + HEX_CHARS[h2 >> 20 & 0x0F] + HEX_CHARS[h2 >> 16 & 0x0F] + HEX_CHARS[h2 >> 12 & 0x0F] + HEX_CHARS[h2 >> 8 & 0x0F] + HEX_CHARS[h2 >> 4 & 0x0F] + HEX_CHARS[h2 & 0x0F] + HEX_CHARS[h3 >> 28 & 0x0F] + HEX_CHARS[h3 >> 24 & 0x0F] + HEX_CHARS[h3 >> 20 & 0x0F] + HEX_CHARS[h3 >> 16 & 0x0F] + HEX_CHARS[h3 >> 12 & 0x0F] + HEX_CHARS[h3 >> 8 & 0x0F] + HEX_CHARS[h3 >> 4 & 0x0F] + HEX_CHARS[h3 & 0x0F] + HEX_CHARS[h4 >> 28 & 0x0F] + HEX_CHARS[h4 >> 24 & 0x0F] + HEX_CHARS[h4 >> 20 & 0x0F] + HEX_CHARS[h4 >> 16 & 0x0F] + HEX_CHARS[h4 >> 12 & 0x0F] + HEX_CHARS[h4 >> 8 & 0x0F] + HEX_CHARS[h4 >> 4 & 0x0F] + HEX_CHARS[h4 & 0x0F] + HEX_CHARS[h5 >> 28 & 0x0F] + HEX_CHARS[h5 >> 24 & 0x0F] + HEX_CHARS[h5 >> 20 & 0x0F] + HEX_CHARS[h5 >> 16 & 0x0F] + HEX_CHARS[h5 >> 12 & 0x0F] + HEX_CHARS[h5 >> 8 & 0x0F] + HEX_CHARS[h5 >> 4 & 0x0F] + HEX_CHARS[h5 & 0x0F] + HEX_CHARS[h6 >> 28 & 0x0F] + HEX_CHARS[h6 >> 24 & 0x0F] + HEX_CHARS[h6 >> 20 & 0x0F] + HEX_CHARS[h6 >> 16 & 0x0F] + HEX_CHARS[h6 >> 12 & 0x0F] + HEX_CHARS[h6 >> 8 & 0x0F] + HEX_CHARS[h6 >> 4 & 0x0F] + HEX_CHARS[h6 & 0x0F];
        if (!this.is224) hex += HEX_CHARS[h7 >> 28 & 0x0F] + HEX_CHARS[h7 >> 24 & 0x0F] + HEX_CHARS[h7 >> 20 & 0x0F] + HEX_CHARS[h7 >> 16 & 0x0F] + HEX_CHARS[h7 >> 12 & 0x0F] + HEX_CHARS[h7 >> 8 & 0x0F] + HEX_CHARS[h7 >> 4 & 0x0F] + HEX_CHARS[h7 & 0x0F];
        return hex;
    };
    Sha256.prototype.toString = Sha256.prototype.hex;
    Sha256.prototype.digest = function() {
        this.finalize();
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;
        var arr = [
            h0 >> 24 & 0xFF,
            h0 >> 16 & 0xFF,
            h0 >> 8 & 0xFF,
            h0 & 0xFF,
            h1 >> 24 & 0xFF,
            h1 >> 16 & 0xFF,
            h1 >> 8 & 0xFF,
            h1 & 0xFF,
            h2 >> 24 & 0xFF,
            h2 >> 16 & 0xFF,
            h2 >> 8 & 0xFF,
            h2 & 0xFF,
            h3 >> 24 & 0xFF,
            h3 >> 16 & 0xFF,
            h3 >> 8 & 0xFF,
            h3 & 0xFF,
            h4 >> 24 & 0xFF,
            h4 >> 16 & 0xFF,
            h4 >> 8 & 0xFF,
            h4 & 0xFF,
            h5 >> 24 & 0xFF,
            h5 >> 16 & 0xFF,
            h5 >> 8 & 0xFF,
            h5 & 0xFF,
            h6 >> 24 & 0xFF,
            h6 >> 16 & 0xFF,
            h6 >> 8 & 0xFF,
            h6 & 0xFF
        ];
        if (!this.is224) arr.push(h7 >> 24 & 0xFF, h7 >> 16 & 0xFF, h7 >> 8 & 0xFF, h7 & 0xFF);
        return arr;
    };
    Sha256.prototype.array = Sha256.prototype.digest;
    Sha256.prototype.arrayBuffer = function() {
        this.finalize();
        var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
        var dataView = new DataView(buffer);
        dataView.setUint32(0, this.h0);
        dataView.setUint32(4, this.h1);
        dataView.setUint32(8, this.h2);
        dataView.setUint32(12, this.h3);
        dataView.setUint32(16, this.h4);
        dataView.setUint32(20, this.h5);
        dataView.setUint32(24, this.h6);
        if (!this.is224) dataView.setUint32(28, this.h7);
        return buffer;
    };
    function HmacSha256(key, is224, sharedMemory) {
        var i, type = typeof key;
        if (type === "string") {
            var bytes = [], length = key.length, index = 0, code;
            for(i = 0; i < length; ++i){
                code = key.charCodeAt(i);
                if (code < 0x80) bytes[index++] = code;
                else if (code < 0x800) {
                    bytes[index++] = 0xc0 | code >> 6;
                    bytes[index++] = 0x80 | code & 0x3f;
                } else if (code < 0xd800 || code >= 0xe000) {
                    bytes[index++] = 0xe0 | code >> 12;
                    bytes[index++] = 0x80 | code >> 6 & 0x3f;
                    bytes[index++] = 0x80 | code & 0x3f;
                } else {
                    code = 0x10000 + ((code & 0x3ff) << 10 | key.charCodeAt(++i) & 0x3ff);
                    bytes[index++] = 0xf0 | code >> 18;
                    bytes[index++] = 0x80 | code >> 12 & 0x3f;
                    bytes[index++] = 0x80 | code >> 6 & 0x3f;
                    bytes[index++] = 0x80 | code & 0x3f;
                }
            }
            key = bytes;
        } else {
            if (type === "object") {
                if (key === null) throw new Error(ERROR);
                else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) key = new Uint8Array(key);
                else if (!Array.isArray(key)) {
                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) throw new Error(ERROR);
                }
            } else throw new Error(ERROR);
        }
        if (key.length > 64) key = new Sha256(is224, true).update(key).array();
        var oKeyPad = [], iKeyPad = [];
        for(i = 0; i < 64; ++i){
            var b = key[i] || 0;
            oKeyPad[i] = 0x5c ^ b;
            iKeyPad[i] = 0x36 ^ b;
        }
        Sha256.call(this, is224, sharedMemory);
        this.update(iKeyPad);
        this.oKeyPad = oKeyPad;
        this.inner = true;
        this.sharedMemory = sharedMemory;
    }
    HmacSha256.prototype = new Sha256();
    HmacSha256.prototype.finalize = function() {
        Sha256.prototype.finalize.call(this);
        if (this.inner) {
            this.inner = false;
            var innerHash = this.array();
            Sha256.call(this, this.is224, this.sharedMemory);
            this.update(this.oKeyPad);
            this.update(innerHash);
            Sha256.prototype.finalize.call(this);
        }
    };
    var exports = createMethod();
    exports.sha256 = exports;
    exports.sha224 = createMethod(true);
    exports.sha256.hmac = createHmacMethod();
    exports.sha224.hmac = createHmacMethod(true);
    if (COMMON_JS) module.exports = exports;
    else {
        root.sha256 = exports.sha256;
        root.sha224 = exports.sha224;
        if (AMD) define(function() {
            return exports;
        });
    }
})();

},{"process":"d5jf4"}],"6CFD9":[function(require,module,exports) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.diffEpochValidators = exports.findSeatPrice = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
/** Finds seat price given validators stakes and number of seats.
 *  Calculation follow the spec: https://nomicon.io/Economics/README.html#validator-selection
 * @params validators: current or next epoch validators.
 * @params numSeats: number of seats.
 */ function findSeatPrice(validators, numSeats) {
    const stakes = validators.map((v)=>new bn_js_1.default(v.stake, 10)).sort((a, b)=>a.cmp(b));
    const num = new bn_js_1.default(numSeats);
    const stakesSum = stakes.reduce((a, b)=>a.add(b));
    if (stakesSum.lt(num)) throw new Error("Stakes are below seats");
    // assert stakesSum >= numSeats
    let left = new bn_js_1.default(1), right = stakesSum.add(new bn_js_1.default(1));
    while(!left.eq(right.sub(new bn_js_1.default(1)))){
        const mid = left.add(right).div(new bn_js_1.default(2));
        let found = false;
        let currentSum = new bn_js_1.default(0);
        for(let i = 0; i < stakes.length; ++i){
            currentSum = currentSum.add(stakes[i].div(mid));
            if (currentSum.gte(num)) {
                left = mid;
                found = true;
                break;
            }
        }
        if (!found) right = mid;
    }
    return left;
}
exports.findSeatPrice = findSeatPrice;
/** Diff validators between current and next epoch.
 * Returns additions, subtractions and changes to validator set.
 * @params currentValidators: list of current validators.
 * @params nextValidators: list of next validators.
 */ function diffEpochValidators(currentValidators, nextValidators) {
    const validatorsMap = new Map();
    currentValidators.forEach((v)=>validatorsMap.set(v.account_id, v));
    const nextValidatorsSet = new Set(nextValidators.map((v)=>v.account_id));
    return {
        newValidators: nextValidators.filter((v)=>!validatorsMap.has(v.account_id)),
        removedValidators: currentValidators.filter((v)=>!nextValidatorsSet.has(v.account_id)),
        changedValidators: nextValidators.filter((v)=>validatorsMap.has(v.account_id) && validatorsMap.get(v.account_id).stake != v.stake).map((v)=>({
                current: validatorsMap.get(v.account_id),
                next: v
            }))
    };
}
exports.diffEpochValidators = diffEpochValidators;

},{"bn.js":"VopIn"}],"hxSQV":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Account = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const depd_1 = __importDefault(require("depd"));
const transaction_1 = require("./transaction");
const providers_1 = require("./providers");
const borsh_1 = require("borsh");
const key_pair_1 = require("./utils/key_pair");
const errors_1 = require("./utils/errors");
const rpc_errors_1 = require("./utils/rpc_errors");
const exponential_backoff_1 = __importDefault(require("./utils/exponential-backoff"));
// Default amount of gas to be sent with the function calls. Used to pay for the fees
// incurred while running the contract execution. The unused amount will be refunded back to
// the originator.
// Due to protocol changes that charge upfront for the maximum possible gas price inflation due to
// full blocks, the price of max_prepaid_gas is decreased to `300 * 10**12`.
// For discussion see https://github.com/nearprotocol/NEPs/issues/67
const DEFAULT_FUNC_CALL_GAS = new bn_js_1.default("30000000000000");
// Default number of retries with different nonce before giving up on a transaction.
const TX_NONCE_RETRY_NUMBER = 12;
// Default wait until next retry in millis.
const TX_NONCE_RETRY_WAIT = 500;
// Exponential back off for waiting to retry.
const TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;
function parseJsonFromRawResponse(response) {
    return JSON.parse(Buffer.from(response).toString());
}
/**
 * More information on [the Account spec](https://nomicon.io/DataStructures/Account.html)
 */ class Account {
    constructor(connection, accountId){
        this.accessKeyByPublicKeyCache = {};
        this.connection = connection;
        this.accountId = accountId;
    }
    get ready() {
        const deprecate = depd_1.default("Account.ready()");
        deprecate("not needed anymore, always ready");
        return Promise.resolve();
    }
    async fetchState() {
        const deprecate = depd_1.default("Account.fetchState()");
        deprecate("use `Account.state()` instead");
    }
    /**
     * Returns the state of a NEAR account
     * @returns {Promise<AccountState>}
     */ async state() {
        return await this.connection.provider.query(`account/${this.accountId}`, "");
    }
    printLogsAndFailures(contractId, results) {
        for (const result of results){
            console.log(`Receipt${result.receiptIds.length > 1 ? "s" : ""}: ${result.receiptIds.join(", ")}`);
            this.printLogs(contractId, result.logs, "	");
            if (result.failure) console.warn(`\tFailure [${contractId}]: ${result.failure}`);
        }
    }
    printLogs(contractId, logs, prefix = "") {
        for (const log of logs)console.log(`${prefix}Log [${contractId}]: ${log}`);
    }
    async signTransaction(receiverId, actions) {
        const accessKeyInfo = await this.findAccessKey(receiverId, actions);
        if (!accessKeyInfo) throw new providers_1.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair found in ${this.connection.signer}.`, "KeyNotFound");
        const { accessKey  } = accessKeyInfo;
        const block = await this.connection.provider.block({
            finality: "final"
        });
        const blockHash = block.header.hash;
        const nonce = ++accessKey.nonce;
        return await transaction_1.signTransaction(receiverId, nonce, actions, borsh_1.baseDecode(blockHash), this.connection.signer, this.accountId, this.connection.networkId);
    }
    /**
     * @param receiverId NEAR account receiving the transaction
     * @param actions The transaction [Action as described in the spec](https://nomicon.io/RuntimeSpec/Actions.html).
     * @returns {Promise<FinalExecutionOutcome>}
     */ async signAndSendTransaction(receiverId, actions) {
        let txHash, signedTx;
        // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)
        const result = await exponential_backoff_1.default(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, async ()=>{
            [txHash, signedTx] = await this.signTransaction(receiverId, actions);
            const publicKey = signedTx.transaction.publicKey;
            try {
                return await this.connection.provider.sendTransaction(signedTx);
            } catch (error) {
                if (error.type === "InvalidNonce") {
                    console.warn(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} with new nonce.`);
                    delete this.accessKeyByPublicKeyCache[publicKey.toString()];
                    return null;
                }
                error.context = new providers_1.ErrorContext(borsh_1.baseEncode(txHash));
                throw error;
            }
        });
        if (!result) // TODO: This should have different code actually, as means "transaction not submitted for sure"
        throw new providers_1.TypedError("nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.", "RetriesExceeded");
        const flatLogs = [
            result.transaction_outcome,
            ...result.receipts_outcome
        ].reduce((acc, it)=>{
            if (it.outcome.logs.length || typeof it.outcome.status === "object" && typeof it.outcome.status.Failure === "object") return acc.concat({
                "receiptIds": it.outcome.receipt_ids,
                "logs": it.outcome.logs,
                "failure": typeof it.outcome.status.Failure != "undefined" ? rpc_errors_1.parseRpcError(it.outcome.status.Failure) : null
            });
            else return acc;
        }, []);
        this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);
        if (typeof result.status === "object" && typeof result.status.Failure === "object") {
            // if error data has error_message and error_type properties, we consider that node returned an error in the old format
            if (result.status.Failure.error_message && result.status.Failure.error_type) throw new providers_1.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);
            else throw rpc_errors_1.parseResultError(result);
        }
        // TODO: if Tx is Unknown or Started.
        return result;
    }
    async findAccessKey(receiverId, actions) {
        // TODO: Find matching access key based on transaction (i.e. receiverId and actions)
        const publicKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);
        if (!publicKey) return null;
        const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];
        if (cachedAccessKey !== undefined) return {
            publicKey,
            accessKey: cachedAccessKey
        };
        try {
            const accessKey = await this.connection.provider.query(`access_key/${this.accountId}/${publicKey.toString()}`, "");
            this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;
            return {
                publicKey,
                accessKey
            };
        } catch (e) {
            if (e.type == "AccessKeyDoesNotExist") return null;
            throw e;
        }
    }
    /**
     * @param contractId NEAR account where the contract is deployed
     * @param publicKey The public key to add while signing and sending the transaction
     * @param data The compiled contract code
     * @returns {Promise<Account>}
     */ async createAndDeployContract(contractId, publicKey, data, amount) {
        const accessKey = transaction_1.fullAccessKey();
        await this.signAndSendTransaction(contractId, [
            transaction_1.createAccount(),
            transaction_1.transfer(amount),
            transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey),
            transaction_1.deployContract(data)
        ]);
        const contractAccount = new Account(this.connection, contractId);
        return contractAccount;
    }
    /**
     * @param receiverId NEAR account receiving Ⓝ
     * @param amount Amount to send in yoctoⓃ
     * @returns {Promise<FinalExecutionOutcome>}
     */ async sendMoney(receiverId, amount) {
        return this.signAndSendTransaction(receiverId, [
            transaction_1.transfer(amount)
        ]);
    }
    /**
     * @param newAccountId NEAR account name to be created
     * @param publicKey A public key created from the masterAccount
     * @returns {Promise<FinalExecutionOutcome>}
     */ async createAccount(newAccountId, publicKey, amount) {
        const accessKey = transaction_1.fullAccessKey();
        return this.signAndSendTransaction(newAccountId, [
            transaction_1.createAccount(),
            transaction_1.transfer(amount),
            transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)
        ]);
    }
    /**
     * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted
     * @returns void
     */ async deleteAccount(beneficiaryId) {
        return this.signAndSendTransaction(this.accountId, [
            transaction_1.deleteAccount(beneficiaryId)
        ]);
    }
    /**
     * @param data The compiled contract code
     * @returns {Promise<FinalExecutionOutcome>}
     */ async deployContract(data) {
        return this.signAndSendTransaction(this.accountId, [
            transaction_1.deployContract(data)
        ]);
    }
    /**
     * @param contractId NEAR account where the contract is deployed
     * @param methodName The method name on the contract as it is written in the contract code
     * @param args arguments to pass to method. Can be either plain JS object which gets serialized as JSON automatically
     *  or `Uint8Array` instance which represents bytes passed as is.
     * @param gas max amount of gas that method call can use
      * @param deposit amount of NEAR (in yoctoNEAR) to send together with the call
     * @returns {Promise<FinalExecutionOutcome>}
     */ async functionCall(contractId, methodName, args, gas, amount) {
        args = args || {};
        this.validateArgs(args);
        return this.signAndSendTransaction(contractId, [
            transaction_1.functionCall(methodName, args, gas || DEFAULT_FUNC_CALL_GAS, amount)
        ]);
    }
    /**
     * @param publicKey A public key to be associated with the contract
     * @param contractId NEAR account where the contract is deployed
     * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.
     * @param amount Payment in yoctoⓃ that is sent to the contract during this function call
     * @returns {Promise<FinalExecutionOutcome>}
     * TODO: expand this API to support more options.
     */ async addKey(publicKey, contractId, methodNames, amount) {
        if (!methodNames) methodNames = [];
        if (!Array.isArray(methodNames)) methodNames = [
            methodNames
        ];
        let accessKey;
        if (!contractId) accessKey = transaction_1.fullAccessKey();
        else accessKey = transaction_1.functionCallAccessKey(contractId, methodNames, amount);
        return this.signAndSendTransaction(this.accountId, [
            transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)
        ]);
    }
    /**
     * @param publicKey The public key to be deleted
     * @returns {Promise<FinalExecutionOutcome>}
     */ async deleteKey(publicKey) {
        return this.signAndSendTransaction(this.accountId, [
            transaction_1.deleteKey(key_pair_1.PublicKey.from(publicKey))
        ]);
    }
    /**
     * @param publicKey The public key for the account that's staking
     * @param amount The account to stake in yoctoⓃ
     * @returns {Promise<FinalExecutionOutcome>}
     */ async stake(publicKey, amount) {
        return this.signAndSendTransaction(this.accountId, [
            transaction_1.stake(amount, key_pair_1.PublicKey.from(publicKey))
        ]);
    }
    validateArgs(args) {
        const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;
        if (isUint8Array) return;
        if (Array.isArray(args) || typeof args !== "object") throw new errors_1.PositionalArgsError();
    }
    /**
     * @param contractId NEAR account where the contract is deployed
     * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code
     * @param args Any arguments to the view contract method, wrapped in JSON
     * @returns {Promise<any>}
     */ async viewFunction(contractId, methodName, args, { parse =parseJsonFromRawResponse  } = {}) {
        args = args || {};
        this.validateArgs(args);
        const result = await this.connection.provider.query(`call/${contractId}/${methodName}`, borsh_1.baseEncode(JSON.stringify(args)));
        if (result.logs) this.printLogs(contractId, result.logs);
        return result.result && result.result.length > 0 && parse(Buffer.from(result.result));
    }
    /**
     * See https://docs.near.org/docs/develop/front-end/rpc#view-contract-state
     *
     * Returns the state (key value pairs) of this account's contract based on the key prefix.
     * Pass an empty string for prefix if you would like to return the entire state.
     *
     * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.
     * @param blockQuery specifies which block to query state at. By default returns last "optimistic" block (i.e. not necessarily finalized).
     */ async viewState(prefix, blockQuery) {
        const { blockId , finality  } = blockQuery || {};
        const { values  } = await this.connection.provider.query({
            request_type: "view_state",
            block_id: blockId,
            finality: blockId ? undefined : finality || "optimistic",
            account_id: this.accountId,
            prefix_base64: Buffer.from(prefix).toString("base64")
        });
        return values.map(({ key , value  })=>({
                key: Buffer.from(key, "base64"),
                value: Buffer.from(value, "base64")
            }));
    }
    /**
     * @returns array of {access_key: AccessKey, public_key: PublicKey} items.
     */ async getAccessKeys() {
        const response = await this.connection.provider.query(`access_key/${this.accountId}`, "");
        // A breaking API change introduced extra information into the
        // response, so it now returns an object with a `keys` field instead
        // of an array: https://github.com/nearprotocol/nearcore/pull/1789
        if (Array.isArray(response)) return response;
        return response.keys;
    }
    /**
     * Returns account details in terms of authorized apps and transactions
     * @returns {Promise<any>}
     */ async getAccountDetails() {
        // TODO: update the response value to return all the different keys, not just app keys.
        // Also if we need this function, or getAccessKeys is good enough.
        const accessKeys = await this.getAccessKeys();
        const result = {
            authorizedApps: [],
            transactions: []
        };
        accessKeys.map((item)=>{
            if (item.access_key.permission.FunctionCall !== undefined) {
                const perm = item.access_key.permission.FunctionCall;
                result.authorizedApps.push({
                    contractId: perm.receiver_id,
                    amount: perm.allowance,
                    publicKey: item.public_key
                });
            }
        });
        return result;
    }
    /**
     * Returns calculated account balance
     * @returns {Promise<AccountBalance>}
     */ async getAccountBalance() {
        const protocolConfig = await this.connection.provider.experimental_protocolConfig({
            finality: "final"
        });
        const state = await this.state();
        const costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);
        const stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);
        const staked = new bn_js_1.default(state.locked);
        const totalBalance = new bn_js_1.default(state.amount).add(staked);
        const availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));
        return {
            total: totalBalance.toString(),
            stateStaked: stateStaked.toString(),
            staked: staked.toString(),
            available: availableBalance.toString()
        };
    }
}
exports.Account = Account;

},{"buffer":"fCgem","bn.js":"VopIn","depd":"2jGeI","./transaction":"jJQ5a","./providers":"gtL2a","borsh":"4JCmN","./utils/key_pair":"kBQFP","./utils/errors":"btMYy","./utils/rpc_errors":"1TB1L","./utils/exponential-backoff":"51I5X"}],"7q1du":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Account2FA = exports.AccountMultisig = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_VIEW_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const account_1 = require("./account");
const contract_1 = require("./contract");
const format_1 = require("./utils/format");
const key_pair_1 = require("./utils/key_pair");
const transaction_1 = require("./transaction");
const web_1 = require("./utils/web");
exports.MULTISIG_STORAGE_KEY = "__multisigRequest";
exports.MULTISIG_ALLOWANCE = new bn_js_1.default(format_1.parseNearAmount("1"));
exports.MULTISIG_GAS = new bn_js_1.default("100000000000000");
exports.MULTISIG_DEPOSIT = new bn_js_1.default("0");
exports.MULTISIG_CHANGE_METHODS = [
    "add_request",
    "add_request_and_confirm",
    "delete_request",
    "confirm"
];
exports.MULTISIG_VIEW_METHODS = [
    "get_request_nonce",
    "list_request_ids"
];
exports.MULTISIG_CONFIRM_METHODS = [
    "confirm"
];
// in memory request cache for node w/o localStorage
let storageFallback = {
    [exports.MULTISIG_STORAGE_KEY]: null
};
class AccountMultisig extends account_1.Account {
    constructor(connection, accountId, options){
        super(connection, accountId);
        this.storage = options.storage;
        this.onAddRequestResult = options.onAddRequestResult;
        this.contract = getContract(this);
    }
    async signAndSendTransactionWithAccount(receiverId, actions) {
        return super.signAndSendTransaction(receiverId, actions);
    }
    async signAndSendTransaction(receiverId, actions) {
        const { accountId  } = this;
        if (this.isDeleteAction(actions)) return await super.signAndSendTransaction(accountId, actions);
        await this.deleteUnconfirmedRequests();
        const requestId = await this.getRequestNonce();
        this.setRequest({
            accountId,
            requestId,
            actions
        });
        const args = Buffer.from(JSON.stringify({
            request: {
                receiver_id: receiverId,
                actions: convertActions(actions, accountId, receiverId)
            }
        }));
        const result = await super.signAndSendTransaction(accountId, [
            transaction_1.functionCall("add_request_and_confirm", args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)
        ]);
        if (this.onAddRequestResult) await this.onAddRequestResult(result);
        return result;
    }
    async deleteUnconfirmedRequests() {
        const { contract  } = this;
        const request_ids = await this.getRequestIds();
        for (const request_id of request_ids)try {
            await contract.delete_request({
                request_id
            });
        } catch (e) {
            console.warn("Attempt to delete an earlier request before 15 minutes failed. Will try again.");
        }
    }
    // helpers
    async getRequestNonce() {
        return this.contract.get_request_nonce();
    }
    async getRequestIds() {
        return this.contract.list_request_ids();
    }
    isDeleteAction(actions) {
        return actions && actions[0] && actions[0].functionCall && actions[0].functionCall.methodName === "delete_request";
    }
    getRequest() {
        if (this.storage) return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || `{}`);
        return storageFallback[exports.MULTISIG_STORAGE_KEY];
    }
    setRequest(data) {
        if (this.storage) return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));
        storageFallback[exports.MULTISIG_STORAGE_KEY] = data;
    }
}
exports.AccountMultisig = AccountMultisig;
class Account2FA extends AccountMultisig {
    constructor(connection, accountId, options){
        super(connection, accountId, options);
        this.helperUrl = "https://helper.testnet.near.org";
        this.helperUrl = options.helperUrl || this.helperUrl;
        this.storage = options.storage;
        this.sendCode = options.sendCode || this.sendCodeDefault;
        this.getCode = options.getCode || this.getCodeDefault;
        this.verifyCode = options.verifyCode || this.verifyCodeDefault;
        this.onConfirmResult = options.onConfirmResult;
        this.contract = getContract(this);
    }
    async signAndSendTransaction(receiverId, actions) {
        await super.signAndSendTransaction(receiverId, actions);
        // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?
        await this.sendCode();
        const result = await this.promptAndVerify();
        if (this.onConfirmResult) await this.onConfirmResult(result);
        return result;
    }
    // default helpers for CH deployments of multisig
    async deployMultisig(contractBytes) {
        const { accountId  } = this;
        const seedOrLedgerKey = (await this.getRecoveryMethods()).data.filter(({ kind , publicKey  })=>(kind === "phrase" || kind === "ledger") && publicKey !== null).map((rm)=>rm.publicKey);
        const fak2lak = (await this.getAccessKeys()).filter(({ public_key , access_key: { permission  }  })=>permission === "FullAccess" && !seedOrLedgerKey.includes(public_key)).map((ak)=>ak.public_key).map(toPK);
        const confirmOnlyKey = toPK((await this.postSignedJson("/2fa/getAccessKey", {
            accountId
        })).publicKey);
        const newArgs = Buffer.from(JSON.stringify({
            "num_confirmations": 2
        }));
        const actions = [
            ...fak2lak.map((pk)=>transaction_1.deleteKey(pk)),
            ...fak2lak.map((pk)=>transaction_1.addKey(pk, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CHANGE_METHODS, null))),
            transaction_1.addKey(confirmOnlyKey, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CONFIRM_METHODS, null)),
            transaction_1.deployContract(contractBytes), 
        ];
        if ((await this.state()).code_hash === "11111111111111111111111111111111") actions.push(transaction_1.functionCall("new", newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));
        console.log("deploying multisig contract for", accountId);
        return await super.signAndSendTransactionWithAccount(accountId, actions);
    }
    async disable(contractBytes) {
        const { accountId  } = this;
        const accessKeys = await this.getAccessKeys();
        const lak2fak = accessKeys.filter(({ access_key  })=>access_key && access_key.permission && access_key.permission.FunctionCall && access_key.permission.FunctionCall.receiver_id === accountId && access_key.permission.FunctionCall.method_names && access_key.permission.FunctionCall.method_names.length === 4 && access_key.permission.FunctionCall.method_names.includes("add_request_and_confirm"));
        const confirmOnlyKey = key_pair_1.PublicKey.from((await this.postSignedJson("/2fa/getAccessKey", {
            accountId
        })).publicKey);
        const actions = [
            transaction_1.deleteKey(confirmOnlyKey),
            ...lak2fak.map(({ public_key  })=>transaction_1.deleteKey(public_key)),
            ...lak2fak.map(({ public_key  })=>transaction_1.addKey(public_key, null)),
            transaction_1.deployContract(contractBytes), 
        ];
        console.log("disabling 2fa for", accountId);
        return await this.signAndSendTransaction(accountId, actions);
    }
    async sendCodeDefault() {
        const { accountId  } = this;
        const { requestId , actions  } = this.getRequest();
        if (this.isDeleteAction(actions)) return;
        const method = await this.get2faMethod();
        await this.postSignedJson("/2fa/send", {
            accountId,
            method,
            requestId
        });
        return requestId;
    }
    async getCodeDefault(method) {
        throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is "email" or "phone".');
    }
    async promptAndVerify() {
        const method = await this.get2faMethod();
        const securityCode = await this.getCode(method);
        try {
            const result = await this.verifyCode(securityCode);
            // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)
            return result;
        } catch (e) {
            console.warn("Error validating security code:", e);
            if (e.toString().includes("invalid 2fa code provided") || e.toString().includes("2fa code not valid")) return await this.promptAndVerify();
            throw e;
        }
    }
    async verifyCodeDefault(securityCode) {
        const { accountId  } = this;
        const request = this.getRequest();
        if (!request) throw new Error("no request pending");
        const { requestId  } = request;
        return await this.postSignedJson("/2fa/verify", {
            accountId,
            securityCode,
            requestId
        });
    }
    async getRecoveryMethods() {
        const { accountId  } = this;
        return {
            accountId,
            data: await this.postSignedJson("/account/recoveryMethods", {
                accountId
            })
        };
    }
    async get2faMethod() {
        let { data  } = await this.getRecoveryMethods();
        if (data && data.length) data = data.find((m)=>m.kind.indexOf("2fa-") === 0);
        if (!data) return null;
        const { kind , detail  } = data;
        return {
            kind,
            detail
        };
    }
    async signatureFor() {
        const { accountId  } = this;
        const block = await this.connection.provider.block({
            finality: "final"
        });
        const blockNumber = block.header.height.toString();
        const signed = await this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);
        const blockNumberSignature = Buffer.from(signed.signature).toString("base64");
        return {
            blockNumber,
            blockNumberSignature
        };
    }
    async postSignedJson(path, body) {
        return await web_1.fetchJson(this.helperUrl + path, JSON.stringify({
            ...body,
            ...await this.signatureFor()
        }));
    }
}
exports.Account2FA = Account2FA;
// helpers
const toPK = (pk)=>key_pair_1.PublicKey.from(pk);
const convertPKForContract = (pk)=>pk.toString().replace("ed25519:", "");
const getContract = (account)=>{
    return new contract_1.Contract(account, account.accountId, {
        viewMethods: exports.MULTISIG_VIEW_METHODS,
        changeMethods: exports.MULTISIG_CHANGE_METHODS
    });
};
const convertActions = (actions, accountId, receiverId)=>actions.map((a)=>{
        const type = a.enum;
        const { gas , publicKey , methodName , args , deposit , accessKey , code  } = a[type];
        const action = {
            type: type[0].toUpperCase() + type.substr(1),
            gas: gas && gas.toString() || undefined,
            public_key: publicKey && convertPKForContract(publicKey) || undefined,
            method_name: methodName,
            args: args && Buffer.from(args).toString("base64") || undefined,
            code: code && Buffer.from(code).toString("base64") || undefined,
            amount: deposit && deposit.toString() || undefined,
            deposit: deposit && deposit.toString() || "0",
            permission: undefined
        };
        if (accessKey) {
            if (receiverId === accountId && accessKey.permission.enum !== "fullAccess") action.permission = {
                receiver_id: accountId,
                allowance: exports.MULTISIG_ALLOWANCE.toString(),
                method_names: exports.MULTISIG_CHANGE_METHODS
            };
            if (accessKey.permission.enum === "functionCall") {
                const { receiverId: receiver_id , methodNames: method_names , allowance  } = accessKey.permission.functionCall;
                action.permission = {
                    receiver_id,
                    allowance: allowance && allowance.toString() || undefined,
                    method_names
                };
            }
        }
        return action;
    });

},{"buffer":"fCgem","bn.js":"VopIn","./account":"hxSQV","./contract":"guo0T","./utils/format":"16c5X","./utils/key_pair":"kBQFP","./transaction":"jJQ5a","./utils/web":"iSqiB"}],"guo0T":[function(require,module,exports) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Contract = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const providers_1 = require("./providers");
const errors_1 = require("./utils/errors");
// Makes `function.name` return given name
function nameFunction(name, body) {
    return ({
        [name] (...args) {
            return body(...args);
        }
    })[name];
}
const isUint8Array = (x)=>x && x.byteLength !== undefined && x.byteLength === x.length;
const isObject = (x)=>Object.prototype.toString.call(x) === "[object Object]";
/**
 * Defines a smart contract on NEAR including the mutable and non-mutable methods
 */ class Contract {
    constructor(account, contractId, options1){
        this.account = account;
        this.contractId = contractId;
        const { viewMethods =[] , changeMethods =[]  } = options1;
        viewMethods.forEach((methodName)=>{
            Object.defineProperty(this, methodName, {
                writable: false,
                enumerable: true,
                value: nameFunction(methodName, async (args = {}, options = {}, ...ignored)=>{
                    if (ignored.length || !(isObject(args) || isUint8Array(args)) || !isObject(options)) throw new errors_1.PositionalArgsError();
                    return this.account.viewFunction(this.contractId, methodName, args, options);
                })
            });
        });
        changeMethods.forEach((methodName)=>{
            Object.defineProperty(this, methodName, {
                writable: false,
                enumerable: true,
                value: nameFunction(methodName, async (args = {}, gas, amount, ...ignored)=>{
                    if (ignored.length || !(isObject(args) || isUint8Array(args))) throw new errors_1.PositionalArgsError();
                    validateBNLike({
                        gas,
                        amount
                    });
                    const rawResult = await this.account.functionCall(this.contractId, methodName, args, gas, amount);
                    return providers_1.getTransactionLastResult(rawResult);
                })
            });
        });
    }
}
exports.Contract = Contract;
/**
 * Validation on arguments being a big number from bn.js
 * Throws if an argument is not in BN format or otherwise invalid
 * @param argMap
 */ function validateBNLike(argMap) {
    const bnLike = "number, decimal string or BN";
    for (const argName of Object.keys(argMap)){
        const argValue = argMap[argName];
        if (argValue && !bn_js_1.default.isBN(argValue) && isNaN(argValue)) throw new errors_1.ArgumentTypeError(argName, bnLike, argValue);
    }
}

},{"bn.js":"VopIn","./providers":"gtL2a","./utils/errors":"btMYy"}],"aQbxV":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UrlAccountCreator = exports.LocalAccountCreator = exports.AccountCreator = void 0;
const web_1 = require("./utils/web");
/**
 * Account creator provides an interface for implementations to actually create accounts
 */ class AccountCreator {
}
exports.AccountCreator = AccountCreator;
class LocalAccountCreator extends AccountCreator {
    constructor(masterAccount, initialBalance){
        super();
        this.masterAccount = masterAccount;
        this.initialBalance = initialBalance;
    }
    /**
     * Creates an account using a masterAccount, meaning the new account is created from an existing account
     * @param newAccountId The name of the NEAR account to be created
     * @param publicKey The public key from the masterAccount used to create this account
     * @returns {Promise<void>}
     */ async createAccount(newAccountId, publicKey) {
        await this.masterAccount.createAccount(newAccountId, publicKey, this.initialBalance);
    }
}
exports.LocalAccountCreator = LocalAccountCreator;
class UrlAccountCreator extends AccountCreator {
    constructor(connection, helperUrl){
        super();
        this.connection = connection;
        this.helperUrl = helperUrl;
    }
    /**
     * Creates an account using a helperUrl
     * This is [hosted here](https://helper.nearprotocol.com) or set up locally with the [near-contract-helper](https://github.com/nearprotocol/near-contract-helper) repository
     * @param newAccountId The name of the NEAR account to be created
     * @param publicKey The public key from the masterAccount used to create this account
     * @returns {Promise<void>}
     */ async createAccount(newAccountId, publicKey) {
        await web_1.fetchJson(`${this.helperUrl}/account`, JSON.stringify({
            newAccountId,
            newAccountPublicKey: publicKey.toString()
        }));
    }
}
exports.UrlAccountCreator = UrlAccountCreator;

},{"./utils/web":"iSqiB"}],"3ThJM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Connection = void 0;
const providers_1 = require("./providers");
const signer_1 = require("./signer");
/**
 * @param config Contains connection info details
 * @returns {Provider}
 */ function getProvider(config) {
    switch(config.type){
        case undefined:
            return config;
        case "JsonRpcProvider":
            return new providers_1.JsonRpcProvider(config.args.url);
        default:
            throw new Error(`Unknown provider type ${config.type}`);
    }
}
/**
 * @param config Contains connection info details
 * @returns {Signer}
 */ function getSigner(config) {
    switch(config.type){
        case undefined:
            return config;
        case "InMemorySigner":
            return new signer_1.InMemorySigner(config.keyStore);
        default:
            throw new Error(`Unknown signer type ${config.type}`);
    }
}
/**
 * Connects an account to a given network via a given provider
 */ class Connection {
    constructor(networkId, provider, signer){
        this.networkId = networkId;
        this.provider = provider;
        this.signer = signer;
    }
    /**
     * @param config Contains connection info details
     */ static fromConfig(config) {
        const provider = getProvider(config.provider);
        const signer = getSigner(config.signer);
        return new Connection(config.networkId, provider, signer);
    }
}
exports.Connection = Connection;

},{"./providers":"gtL2a","./signer":"a6bzI"}],"a6bzI":[function(require,module,exports) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InMemorySigner = exports.Signer = void 0;
const js_sha256_1 = __importDefault(require("js-sha256"));
const key_pair_1 = require("./utils/key_pair");
const in_memory_key_store_1 = require("./key_stores/in_memory_key_store");
/**
 * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.
 */ class Signer {
}
exports.Signer = Signer;
/**
 * Signs using in memory key store.
 */ class InMemorySigner extends Signer {
    constructor(keyStore){
        super();
        this.keyStore = keyStore;
    }
    /**
     * Creates a single account Signer instance with account, network and keyPair provided.
     *
     * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).
     *
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @param accountId The NEAR account to assign the key pair to
     * @param keyPair The keyPair to use for signing
     */ static async fromKeyPair(networkId, accountId, keyPair) {
        const keyStore = new in_memory_key_store_1.InMemoryKeyStore();
        await keyStore.setKey(networkId, accountId, keyPair);
        return new InMemorySigner(keyStore);
    }
    /**
     * Creates a public key for the account given
     * @param accountId The NEAR account to assign a public key to
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @returns {Promise<PublicKey>}
     */ async createKey(accountId, networkId) {
        const keyPair = key_pair_1.KeyPair.fromRandom("ed25519");
        await this.keyStore.setKey(networkId, accountId, keyPair);
        return keyPair.getPublicKey();
    }
    /**
     * Gets the existing public key for a given account
     * @param accountId The NEAR account to assign a public key to
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @returns {Promise<PublicKey>} Returns the public key or null if not found
     */ async getPublicKey(accountId, networkId) {
        const keyPair = await this.keyStore.getKey(networkId, accountId);
        if (keyPair === null) return null;
        return keyPair.getPublicKey();
    }
    /**
     * @param message A message to be signed, typically a serialized transaction
     * @param accountId the NEAR account signing the message
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     * @returns {Promise<Signature>}
     */ async signMessage(message, accountId, networkId) {
        const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));
        if (!accountId) throw new Error("InMemorySigner requires provided account id");
        const keyPair = await this.keyStore.getKey(networkId, accountId);
        if (keyPair === null) throw new Error(`Key for ${accountId} not found in ${networkId}`);
        return keyPair.sign(hash);
    }
    toString() {
        return `InMemorySigner(${this.keyStore})`;
    }
}
exports.InMemorySigner = InMemorySigner;

},{"js-sha256":"ahVaM","./utils/key_pair":"kBQFP","./key_stores/in_memory_key_store":"fTfs7"}],"9Ying":[function(require,module,exports) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Near = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const account_1 = require("./account");
const connection_1 = require("./connection");
const contract_1 = require("./contract");
const account_creator_1 = require("./account_creator");
class Near {
    constructor(config){
        this.config = config;
        this.connection = connection_1.Connection.fromConfig({
            networkId: config.networkId,
            provider: {
                type: "JsonRpcProvider",
                args: {
                    url: config.nodeUrl
                }
            },
            signer: config.signer || {
                type: "InMemorySigner",
                keyStore: config.keyStore || config.deps.keyStore
            }
        });
        if (config.masterAccount) {
            // TODO: figure out better way of specifiying initial balance.
            // Hardcoded number below must be enough to pay the gas cost to dev-deploy with near-shell for multiple times
            const initialBalance = config.initialBalance ? new bn_js_1.default(config.initialBalance) : new bn_js_1.default("500000000000000000000000000");
            this.accountCreator = new account_creator_1.LocalAccountCreator(new account_1.Account(this.connection, config.masterAccount), initialBalance);
        } else if (config.helperUrl) this.accountCreator = new account_creator_1.UrlAccountCreator(this.connection, config.helperUrl);
        else this.accountCreator = null;
    }
    /**
     *
     * @param accountId near accountId used to interact with the network.
     */ async account(accountId) {
        const account = new account_1.Account(this.connection, accountId);
        return account;
    }
    /**
     *
     * @param accountId
     * @param publicKey
     */ async createAccount(accountId, publicKey) {
        if (!this.accountCreator) throw new Error("Must specify account creator, either via masterAccount or helperUrl configuration settings.");
        await this.accountCreator.createAccount(accountId, publicKey);
        return new account_1.Account(this.connection, accountId);
    }
    /**
     * @deprecated Use `new nearApi.Contract(yourAccount, contractId, { viewMethods, changeMethods })` instead.
     * @param contractId
     * @param options
     */ async loadContract(contractId, options) {
        const account = new account_1.Account(this.connection, options.sender);
        return new contract_1.Contract(account, contractId, options);
    }
    /**
     * @deprecated Use `yourAccount.sendMoney` instead.
     * @param amount
     * @param originator
     * @param receiver
     */ async sendTokens(amount, originator, receiver) {
        console.warn("near.sendTokens is deprecated. Use `yourAccount.sendMoney` instead.");
        const account = new account_1.Account(this.connection, originator);
        const result = await account.sendMoney(receiver, amount);
        return result.transaction_outcome.id;
    }
}
exports.Near = Near;

},{"bn.js":"VopIn","./account":"hxSQV","./connection":"3ThJM","./contract":"guo0T","./account_creator":"aQbxV"}],"dHM3Z":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConnectedWalletAccount = exports.WalletAccount = exports.WalletConnection = void 0;
const depd_1 = __importDefault(require("depd"));
const account_1 = require("./account");
const transaction_1 = require("./transaction");
const utils_1 = require("./utils");
const borsh_1 = require("borsh");
const borsh_2 = require("borsh");
const LOGIN_WALLET_URL_SUFFIX = "/login/";
const MULTISIG_HAS_METHOD = "add_request_and_confirm";
const LOCAL_STORAGE_KEY_SUFFIX = "_wallet_auth_key";
const PENDING_ACCESS_KEY_PREFIX = "pending_key"; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)
class WalletConnection {
    constructor(near, appKeyPrefix){
        this._near = near;
        const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;
        const authData = JSON.parse(window.localStorage.getItem(authDataKey));
        this._networkId = near.config.networkId;
        this._walletBaseUrl = near.config.walletUrl;
        appKeyPrefix = appKeyPrefix || near.config.contractName || "default";
        this._keyStore = near.connection.signer.keyStore;
        this._authData = authData || {
            allKeys: []
        };
        this._authDataKey = authDataKey;
        if (!this.isSignedIn()) this._completeSignInWithAccessKey();
    }
    /**
     * Returns true, if this WalletAccount is authorized with the wallet.
     * @example
     * walletAccount.isSignedIn();
     */ isSignedIn() {
        return !!this._authData.accountId;
    }
    /**
     * Returns authorized Account ID.
     * @example
     * walletAccount.getAccountId();
     */ getAccountId() {
        return this._authData.accountId || "";
    }
    /**
     * Redirects current page to the wallet authentication page.
     * @param options An optional options object
     * @param options.contractId The NEAR account where the contract is deployed
     * @param options.successUrl URL to redirect upon success. Default: current url
     * @param options.failureUrl URL to redirect upon failure. Default: current url
     *
     * @example
     *   walletAccount.requestSignIn('account-with-deploy-contract.near', {
     *     successUrl: "https://example.com/success.html",
     *     failureUrl: "https://example.com/error.html"
     *   });
     */ async requestSignIn(contractIdOrOptions = {}, title, successUrl, failureUrl) {
        let options;
        if (typeof contractIdOrOptions === "string") {
            const deprecate = depd_1.default("requestSignIn(contractId, title)");
            deprecate("`title` ignored; use `requestSignIn({ contractId, successUrl, failureUrl })` instead");
            options = {
                contractId: contractIdOrOptions,
                successUrl,
                failureUrl
            };
        } else options = contractIdOrOptions;
        const currentUrl = new URL(window.location.href);
        const newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);
        newUrl.searchParams.set("success_url", options.successUrl || currentUrl.href);
        newUrl.searchParams.set("failure_url", options.failureUrl || currentUrl.href);
        if (options.contractId) {
            newUrl.searchParams.set("contract_id", options.contractId);
            const accessKey = utils_1.KeyPair.fromRandom("ed25519");
            newUrl.searchParams.set("public_key", accessKey.getPublicKey().toString());
            await this._keyStore.setKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + accessKey.getPublicKey(), accessKey);
        }
        window.location.assign(newUrl.toString());
    }
    /**
     * Requests the user to quickly sign for a transaction or batch of transactions
     * @param transactions Array of Transaction objects that will be requested to sign
     * @param callbackUrl The url to navigate to after the user is prompted to sign
     */ async requestSignTransactions(transactions, callbackUrl) {
        const currentUrl = new URL(window.location.href);
        const newUrl = new URL("sign", this._walletBaseUrl);
        newUrl.searchParams.set("transactions", transactions.map((transaction)=>borsh_2.serialize(transaction_1.SCHEMA, transaction)).map((serialized)=>Buffer.from(serialized).toString("base64")).join(","));
        newUrl.searchParams.set("callbackUrl", callbackUrl || currentUrl.href);
        window.location.assign(newUrl.toString());
    }
    /**
     * Complete sign in for a given account id and public key. To be invoked by the app when getting a callback from the wallet.
     */ async _completeSignInWithAccessKey() {
        const currentUrl = new URL(window.location.href);
        const publicKey = currentUrl.searchParams.get("public_key") || "";
        const allKeys = (currentUrl.searchParams.get("all_keys") || "").split(",");
        const accountId = currentUrl.searchParams.get("account_id") || "";
        // TODO: Handle errors during login
        if (accountId) {
            this._authData = {
                accountId,
                allKeys
            };
            window.localStorage.setItem(this._authDataKey, JSON.stringify(this._authData));
            if (publicKey) await this._moveKeyFromTempToPermanent(accountId, publicKey);
        }
        currentUrl.searchParams.delete("public_key");
        currentUrl.searchParams.delete("all_keys");
        currentUrl.searchParams.delete("account_id");
        window.history.replaceState({}, document.title, currentUrl.toString());
    }
    /**
     *
     * @param accountId The NEAR account owning the given public key
     * @param publicKey The public key being set to the key store
     */ async _moveKeyFromTempToPermanent(accountId, publicKey) {
        const keyPair = await this._keyStore.getKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);
        await this._keyStore.setKey(this._networkId, accountId, keyPair);
        await this._keyStore.removeKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);
    }
    /**
     * Sign out from the current account
     * @example
     * walletAccount.signOut();
     */ signOut() {
        this._authData = {};
        window.localStorage.removeItem(this._authDataKey);
    }
    /**
     * Returns the current connected wallet account
     */ account() {
        if (!this._connectedAccount) this._connectedAccount = new ConnectedWalletAccount(this, this._near.connection, this._authData.accountId);
        return this._connectedAccount;
    }
}
exports.WalletConnection = WalletConnection;
exports.WalletAccount = WalletConnection;
/**
 * {@link Account} implementation which redirects to wallet using (@link WalletConnection) when no local key is available.
 */ class ConnectedWalletAccount extends account_1.Account {
    constructor(walletConnection, connection, accountId){
        super(connection, accountId);
        this.walletConnection = walletConnection;
    }
    // Overriding Account methods
    async signAndSendTransaction(receiverId, actions) {
        const localKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);
        let accessKey = await this.accessKeyForTransaction(receiverId, actions, localKey);
        if (!accessKey) throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);
        if (localKey && localKey.toString() === accessKey.public_key) try {
            return await super.signAndSendTransaction(receiverId, actions);
        } catch (e) {
            if (e.type === "NotEnoughBalance") accessKey = await this.accessKeyForTransaction(receiverId, actions);
            else throw e;
        }
        const block = await this.connection.provider.block({
            finality: "final"
        });
        const blockHash = borsh_1.baseDecode(block.header.hash);
        const publicKey = utils_1.PublicKey.from(accessKey.public_key);
        // TODO: Cache & listen for nonce updates for given access key
        const nonce = accessKey.access_key.nonce + 1;
        const transaction = transaction_1.createTransaction(this.accountId, publicKey, receiverId, nonce, actions, blockHash);
        await this.walletConnection.requestSignTransactions([
            transaction
        ], window.location.href);
        return new Promise((resolve, reject)=>{
            setTimeout(()=>{
                reject(new Error("Failed to redirect to sign transaction"));
            }, 1000);
        });
    // TODO: Aggregate multiple transaction request with "debounce".
    // TODO: Introduce TrasactionQueue which also can be used to watch for status?
    }
    /**
     * Check if given access key allows the function call or method attempted in transaction
     * @param accessKey Array of {access_key: AccessKey, public_key: PublicKey} items
     * @param receiverId The NEAR account attempting to have access
     * @param actions The action(s) needed to be checked for access
     */ async accessKeyMatchesTransaction(accessKey, receiverId, actions) {
        const { access_key: { permission  }  } = accessKey;
        if (permission === "FullAccess") return true;
        if (permission.FunctionCall) {
            const { receiver_id: allowedReceiverId , method_names: allowedMethods  } = permission.FunctionCall;
            /********************************
            Accept multisig access keys and let wallets attempt to signAndSendTransaction
            If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153
            ********************************/ if (allowedReceiverId === this.accountId && allowedMethods.includes(MULTISIG_HAS_METHOD)) return true;
            if (allowedReceiverId === receiverId) {
                if (actions.length !== 1) return false;
                const [{ functionCall  }] = actions;
                return functionCall && (!functionCall.deposit || functionCall.deposit.toString() === "0") && (allowedMethods.length === 0 || allowedMethods.includes(functionCall.methodName));
            // TODO: Handle cases when allowance doesn't have enough to pay for gas
            }
        }
        // TODO: Support other permissions than FunctionCall
        return false;
    }
    /**
     * Helper function returning the access key (if it exists) to the receiver that grants the designated permission
     * @param receiverId The NEAR account seeking the access key for a transaction
     * @param actions The action(s) sought to gain access to
     * @param localKey A local public key provided to check for access
     * @returns Promise<any>
     */ async accessKeyForTransaction(receiverId, actions, localKey) {
        const accessKeys = await this.getAccessKeys();
        if (localKey) {
            const accessKey = accessKeys.find((key)=>key.public_key === localKey.toString());
            if (accessKey && await this.accessKeyMatchesTransaction(accessKey, receiverId, actions)) return accessKey;
        }
        const walletKeys = this.walletConnection._authData.allKeys;
        for (const accessKey of accessKeys){
            if (walletKeys.indexOf(accessKey.public_key) !== -1 && await this.accessKeyMatchesTransaction(accessKey, receiverId, actions)) return accessKey;
        }
        return null;
    }
}
exports.ConnectedWalletAccount = ConnectedWalletAccount;

},{"buffer":"fCgem","depd":"2jGeI","./account":"hxSQV","./transaction":"jJQ5a","./utils":"jOCMH","borsh":"4JCmN"}],"7yTE6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.connect = void 0;
const near_1 = require("./near");
/**
 * Initialize connection to Near network.
 */ async function connect(config) {
    return new near_1.Near(config);
}
exports.connect = connect;

},{"./near":"9Ying"}],"2YFhR":[function(require,module,exports) {
module.exports = require("./lib");

},{"./lib":"hDD9L"}],"hDD9L":[function(require,module,exports) {
require("capability/es5");
var capability = require("capability");
var polyfill;
if (capability("Error.captureStackTrace")) polyfill = require("./v8");
else if (capability("Error.prototype.stack")) polyfill = require("./non-v8/index");
else polyfill = require("./unsupported");
module.exports = polyfill();

},{"capability/es5":"5bger","capability":"45xjX","./v8":"a0VmX","./non-v8/index":"dx0bf","./unsupported":"75e5c"}],"5bger":[function(require,module,exports) {
require(".").check("es5");

},{".":"45xjX"}],"45xjX":[function(require,module,exports) {
require("./lib/definitions");
module.exports = require("./lib");

},{"./lib/definitions":"k0u9C","./lib":"4EqFb"}],"k0u9C":[function(require,module,exports) {
var capability = require("."), define = capability.define, test = capability.test;
define("strict mode", function() {
    return this === undefined;
});
define("arguments.callee.caller", function() {
    try {
        return function() {
            return arguments.callee.caller;
        }() === arguments.callee;
    } catch (strictModeIsEnforced) {
        return false;
    }
});
define("es5", function() {
    return test("Array.prototype.forEach") && test("Array.prototype.map") && test("Function.prototype.bind") && test("Object.create") && test("Object.defineProperties") && test("Object.defineProperty") && test("Object.prototype.hasOwnProperty");
});
define("Array.prototype.forEach", function() {
    return Array.prototype.forEach;
});
define("Array.prototype.map", function() {
    return Array.prototype.map;
});
define("Function.prototype.bind", function() {
    return Function.prototype.bind;
});
define("Object.create", function() {
    return Object.create;
});
define("Object.defineProperties", function() {
    return Object.defineProperties;
});
define("Object.defineProperty", function() {
    return Object.defineProperty;
});
define("Object.prototype.hasOwnProperty", function() {
    return Object.prototype.hasOwnProperty;
});
define("Error.captureStackTrace", function() {
    return Error.captureStackTrace;
});
define("Error.prototype.stack", function() {
    try {
        throw new Error();
    } catch (e) {
        return e.stack || e.stacktrace;
    }
});

},{".":"4EqFb"}],"4EqFb":[function(require,module,exports) {
var CapabilityDetector = require("./CapabilityDetector");
var detector = new CapabilityDetector();
var capability = function(name) {
    return detector.test(name);
};
capability.define = function(name, test) {
    detector.define(name, test);
};
capability.check = function(name) {
    detector.check(name);
};
capability.test = capability;
module.exports = capability;

},{"./CapabilityDetector":"csHRg"}],"csHRg":[function(require,module,exports) {
var CapabilityDetector = function() {
    this.tests = {};
    this.cache = {};
};
CapabilityDetector.prototype = {
    constructor: CapabilityDetector,
    define: function(name, test) {
        if (typeof name != "string" || !(test instanceof Function)) throw new Error("Invalid capability definition.");
        if (this.tests[name]) throw new Error('Duplicated capability definition by "' + name + '".');
        this.tests[name] = test;
    },
    check: function(name) {
        if (!this.test(name)) throw new Error('The current environment does not support "' + name + '", therefore we cannot continue.');
    },
    test: function(name) {
        if (this.cache[name] !== undefined) return this.cache[name];
        if (!this.tests[name]) throw new Error('Unknown capability with name "' + name + '".');
        var test = this.tests[name];
        this.cache[name] = !!test();
        return this.cache[name];
    }
};
module.exports = CapabilityDetector;

},{}],"a0VmX":[function(require,module,exports) {
var prepareStackTrace = require("./prepareStackTrace");
module.exports = function() {
    Error.getStackTrace = function(throwable) {
        return throwable.stack;
    };
    return {
        prepareStackTrace: prepareStackTrace
    };
};

},{"./prepareStackTrace":"85RZD"}],"85RZD":[function(require,module,exports) {
var prepareStackTrace = function(throwable, frames, warnings) {
    var string = "";
    string += throwable.name || "Error";
    string += ": " + (throwable.message || "");
    if (warnings instanceof Array) for(var warningIndex in warnings){
        var warning = warnings[warningIndex];
        string += "\n   # " + warning;
    }
    for(var frameIndex in frames){
        var frame = frames[frameIndex];
        string += "\n   at " + frame.toString();
    }
    return string;
};
module.exports = prepareStackTrace;

},{}],"dx0bf":[function(require,module,exports) {
var FrameStringSource = require("./FrameStringSource"), FrameStringParser = require("./FrameStringParser"), cache = require("u3").cache, prepareStackTrace = require("../prepareStackTrace");
module.exports = function() {
    Error.captureStackTrace = function captureStackTrace(throwable, terminator) {
        var warnings;
        var frameShifts = [
            captureStackTrace
        ];
        if (terminator) // additional frames can come here if arguments.callee.caller is supported
        // otherwise it is hard to identify the terminator
        frameShifts.push(terminator);
        var captured = FrameStringSource.getInstance().captureFrameStrings(frameShifts);
        Object.defineProperties(throwable, {
            stack: {
                configurable: true,
                get: cache(function() {
                    var frames = FrameStringParser.getInstance().getFrames(captured.frameStrings, captured.functionValues);
                    return (Error.prepareStackTrace || prepareStackTrace)(throwable, frames, warnings);
                })
            },
            cachedStack: {
                configurable: true,
                writable: true,
                enumerable: false,
                value: true
            }
        });
    };
    Error.getStackTrace = function(throwable) {
        if (throwable.cachedStack) return throwable.stack;
        var frameStrings = FrameStringSource.getInstance().getFrameStrings(throwable), frames = [], warnings;
        if (frameStrings) frames = FrameStringParser.getInstance().getFrames(frameStrings, []);
        else warnings = [
            "The stack is not readable by unthrown errors in this environment."
        ];
        var stack = (Error.prepareStackTrace || prepareStackTrace)(throwable, frames, warnings);
        if (frameStrings) try {
            Object.defineProperties(throwable, {
                stack: {
                    configurable: true,
                    writable: true,
                    enumerable: false,
                    value: stack
                },
                cachedStack: {
                    configurable: true,
                    writable: true,
                    enumerable: false,
                    value: true
                }
            });
        } catch (nonConfigurableError) {}
        return stack;
    };
    return {
        prepareStackTrace: prepareStackTrace
    };
};

},{"./FrameStringSource":"8enMo","./FrameStringParser":"kqj4M","u3":"dIyaj","../prepareStackTrace":"85RZD"}],"8enMo":[function(require,module,exports) {
var Class = require("o3").Class, abstractMethod = require("o3").abstractMethod, eachCombination = require("u3").eachCombination, cache = require("u3").cache, capability = require("capability");
var AbstractFrameStringSource = Class(Object, {
    prototype: {
        captureFrameStrings: function(frameShifts) {
            var error = this.createError();
            frameShifts.unshift(this.captureFrameStrings);
            frameShifts.unshift(this.createError);
            var capturedFrameStrings = this.getFrameStrings(error);
            var frameStrings = capturedFrameStrings.slice(frameShifts.length), functionValues = [];
            if (capability("arguments.callee.caller")) {
                var capturedFunctionValues = [
                    this.createError,
                    this.captureFrameStrings
                ];
                try {
                    var aCaller = arguments.callee;
                    while(aCaller = aCaller.caller)capturedFunctionValues.push(aCaller);
                } catch (useStrictError) {}
                functionValues = capturedFunctionValues.slice(frameShifts.length);
            }
            return {
                frameStrings: frameStrings,
                functionValues: functionValues
            };
        },
        getFrameStrings: function(error) {
            var message = error.message || "";
            var name = error.name || "";
            var stackString = this.getStackString(error);
            if (stackString === undefined) return;
            var stackStringChunks = stackString.split("\n");
            var fromPosition = 0;
            var toPosition = stackStringChunks.length;
            if (this.hasHeader) fromPosition += name.split("\n").length + message.split("\n").length - 1;
            if (this.hasFooter) toPosition -= 1;
            return stackStringChunks.slice(fromPosition, toPosition);
        },
        createError: abstractMethod,
        getStackString: abstractMethod,
        hasHeader: undefined,
        hasFooter: undefined
    }
});
var FrameStringSourceCalibrator = Class(Object, {
    prototype: {
        calibrateClass: function(FrameStringSource) {
            return this.calibrateMethods(FrameStringSource) && this.calibrateEnvelope(FrameStringSource);
        },
        calibrateMethods: function(FrameStringSource) {
            try {
                eachCombination([
                    [
                        function(message) {
                            return new Error(message);
                        },
                        function(message) {
                            try {
                                throw new Error(message);
                            } catch (error) {
                                return error;
                            }
                        }
                    ],
                    [
                        function(error) {
                            return error.stack;
                        },
                        function(error) {
                            return error.stacktrace;
                        }
                    ]
                ], function(createError, getStackString) {
                    if (getStackString(createError())) throw {
                        getStackString: getStackString,
                        createError: createError
                    };
                });
            } catch (workingImplementation) {
                Class.merge.call(FrameStringSource, {
                    prototype: workingImplementation
                });
                return true;
            }
            return false;
        },
        calibrateEnvelope: function(FrameStringSource) {
            var getStackString = FrameStringSource.prototype.getStackString;
            var createError = FrameStringSource.prototype.createError;
            var calibratorStackString = getStackString(createError("marker"));
            var calibratorFrameStrings = calibratorStackString.split("\n");
            Class.merge.call(FrameStringSource, {
                prototype: {
                    hasHeader: /marker/.test(calibratorFrameStrings[0]),
                    hasFooter: calibratorFrameStrings[calibratorFrameStrings.length - 1] === ""
                }
            });
            return true;
        }
    }
});
module.exports = {
    getClass: cache(function() {
        var FrameStringSource;
        if (FrameStringSource) return FrameStringSource;
        FrameStringSource = Class(AbstractFrameStringSource, {});
        var calibrator = new FrameStringSourceCalibrator();
        if (!calibrator.calibrateClass(FrameStringSource)) throw new Error("Cannot read Error.prototype.stack in this environment.");
        return FrameStringSource;
    }),
    getInstance: cache(function() {
        var FrameStringSource = this.getClass();
        var instance = new FrameStringSource();
        return instance;
    })
};

},{"o3":"gP4B7","u3":"dIyaj","capability":"45xjX"}],"gP4B7":[function(require,module,exports) {
require("capability/es5");
module.exports = require("./lib");

},{"capability/es5":"5bger","./lib":"eoeZx"}],"eoeZx":[function(require,module,exports) {
module.exports = {
    Class: require("./Class"),
    abstractMethod: require("./abstractMethod")
};

},{"./Class":"k4Z0U","./abstractMethod":"d1LMy"}],"k4Z0U":[function(require,module,exports) {
var Class = function() {
    var options = Object.create({
        Source: Object,
        config: {},
        buildArgs: []
    });
    function checkOption(option) {
        var key = "config";
        if (option instanceof Function) key = "Source";
        else if (option instanceof Array) key = "buildArgs";
        else if (option instanceof Object) key = "config";
        else throw new Error("Invalid configuration option.");
        if (options.hasOwnProperty(key)) throw new Error("Duplicated configuration option: " + key + ".");
        options[key] = option;
    }
    for(var index = 0, length = arguments.length; index < length; ++index)checkOption(arguments[index]);
    var Source = options.Source, config = options.config, buildArgs = options.buildArgs;
    return (Source.extend || Class.extend).call(Source, config, buildArgs);
};
Class.factory = function() {
    var Source = this;
    return function() {
        var instance = this;
        if (instance.build instanceof Function) instance.build.apply(instance, arguments);
        if (instance.init instanceof Function) instance.init.apply(instance, arguments);
    };
};
Class.extend = function(config, buildArgs) {
    var Source = this;
    if (!config) config = {};
    var Subject;
    if (config.prototype instanceof Object && config.prototype.constructor !== Object) Subject = config.prototype.constructor;
    else if (config.factory instanceof Function) Subject = config.factory.call(Source);
    Subject = (Source.clone || Class.clone).call(Source, Subject, buildArgs);
    (Subject.merge || Class.merge).call(Subject, config);
    return Subject;
};
Class.prototype.extend = function(config, buildArgs) {
    var subject = this;
    var instance = (subject.clone || Class.prototype.clone).apply(subject, buildArgs);
    (instance.merge || Class.prototype.merge).call(instance, config);
    return instance;
};
Class.clone = function(Subject, buildArgs) {
    var Source = this;
    if (!(Subject instanceof Function)) Subject = (Source.factory || Class.factory).call(Source);
    Subject.prototype = (Source.prototype.clone || Class.prototype.clone).apply(Source.prototype, buildArgs || []);
    Subject.prototype.constructor = Subject;
    for(var staticProperty in Source)if (staticProperty !== "prototype") Subject[staticProperty] = Source[staticProperty];
    return Subject;
};
Class.prototype.clone = function() {
    var subject = this;
    var instance = Object.create(subject);
    if (instance.build instanceof Function) instance.build.apply(instance, arguments);
    return instance;
};
Class.merge = function(config) {
    var Subject = this;
    for(var staticProperty in config)if (staticProperty !== "prototype") Subject[staticProperty] = config[staticProperty];
    if (config.prototype instanceof Object) (Subject.prototype.merge || Class.prototype.merge).call(Subject.prototype, config.prototype);
    return Subject;
};
Class.prototype.merge = function(config) {
    var subject = this;
    for(var property in config)if (property !== "constructor") subject[property] = config[property];
    return subject;
};
Class.absorb = function(config) {
    var Subject = this;
    for(var staticProperty in config)if (staticProperty !== "prototype" && (Subject[staticProperty] === undefined || Subject[staticProperty] === Function.prototype[staticProperty])) Subject[staticProperty] = config[staticProperty];
    if (config.prototype instanceof Object) (Subject.prototype.absorb || Class.prototype.absorb).call(Subject.prototype, config.prototype);
    return Subject;
};
Class.prototype.absorb = function(config) {
    var subject = this;
    for(var property in config)if (property !== "constructor" && (subject[property] === undefined || subject[property] === Object.prototype[property])) subject[property] = config[property];
    return subject;
};
Class.getAncestor = function() {
    var Source = this;
    if (Source !== Source.prototype.constructor) return Source.prototype.constructor;
};
Class.newInstance = function() {
    var Subject = this;
    var instance = Object.create(this.prototype);
    Subject.apply(instance, arguments);
    return instance;
};
module.exports = Class;

},{}],"d1LMy":[function(require,module,exports) {
module.exports = function() {
    throw new Error("Not implemented.");
};

},{}],"dIyaj":[function(require,module,exports) {
module.exports = require("./lib");

},{"./lib":"9JH8M"}],"9JH8M":[function(require,module,exports) {
module.exports = {
    cache: require("./cache"),
    eachCombination: require("./eachCombination")
};

},{"./cache":"3mu2N","./eachCombination":"i1liH"}],"3mu2N":[function(require,module,exports) {
var cache = function(fn) {
    var called = false, store;
    if (!(fn instanceof Function)) {
        called = true;
        store = fn;
        fn = null;
    }
    return function() {
        if (!called) {
            called = true;
            store = fn.apply(this, arguments);
            fn = null;
        }
        return store;
    };
};
module.exports = cache;

},{}],"i1liH":[function(require,module,exports) {
module.exports = function eachCombination(alternativesByDimension, callback, combination) {
    if (!combination) combination = [];
    if (combination.length < alternativesByDimension.length) {
        var alternatives = alternativesByDimension[combination.length];
        for(var index in alternatives){
            combination[combination.length] = alternatives[index];
            eachCombination(alternativesByDimension, callback, combination);
            --combination.length;
        }
    } else callback.apply(null, combination);
};

},{}],"kqj4M":[function(require,module,exports) {
var Class = require("o3").Class, Frame = require("./Frame"), cache = require("u3").cache;
var FrameStringParser = Class(Object, {
    prototype: {
        stackParser: null,
        frameParser: null,
        locationParsers: null,
        constructor: function(options) {
            Class.prototype.merge.call(this, options);
        },
        getFrames: function(frameStrings, functionValues) {
            var frames = [];
            for(var index = 0, length = frameStrings.length; index < length; ++index)frames[index] = this.getFrame(frameStrings[index], functionValues[index]);
            return frames;
        },
        getFrame: function(frameString, functionValue) {
            var config = {
                frameString: frameString,
                functionValue: functionValue
            };
            return new Frame(config);
        }
    }
});
module.exports = {
    getClass: cache(function() {
        return FrameStringParser;
    }),
    getInstance: cache(function() {
        var FrameStringParser1 = this.getClass();
        var instance = new FrameStringParser1();
        return instance;
    })
};

},{"o3":"gP4B7","./Frame":"gHN0E","u3":"dIyaj"}],"gHN0E":[function(require,module,exports) {
var Class = require("o3").Class, abstractMethod = require("o3").abstractMethod;
var Frame = Class(Object, {
    prototype: {
        init: Class.prototype.merge,
        frameString: undefined,
        toString: function() {
            return this.frameString;
        },
        functionValue: undefined,
        getThis: abstractMethod,
        getTypeName: abstractMethod,
        getFunction: function() {
            return this.functionValue;
        },
        getFunctionName: abstractMethod,
        getMethodName: abstractMethod,
        getFileName: abstractMethod,
        getLineNumber: abstractMethod,
        getColumnNumber: abstractMethod,
        getEvalOrigin: abstractMethod,
        isTopLevel: abstractMethod,
        isEval: abstractMethod,
        isNative: abstractMethod,
        isConstructor: abstractMethod
    }
});
module.exports = Frame;

},{"o3":"gP4B7"}],"75e5c":[function(require,module,exports) {
var cache = require("u3").cache, prepareStackTrace = require("./prepareStackTrace");
module.exports = function() {
    Error.captureStackTrace = function(throwable, terminator) {
        Object.defineProperties(throwable, {
            stack: {
                configurable: true,
                get: cache(function() {
                    return (Error.prepareStackTrace || prepareStackTrace)(throwable, []);
                })
            },
            cachedStack: {
                configurable: true,
                writable: true,
                enumerable: false,
                value: true
            }
        });
    };
    Error.getStackTrace = function(throwable) {
        if (throwable.cachedStack) return throwable.stack;
        var stack = (Error.prepareStackTrace || prepareStackTrace)(throwable, []);
        try {
            Object.defineProperties(throwable, {
                stack: {
                    configurable: true,
                    writable: true,
                    enumerable: false,
                    value: stack
                },
                cachedStack: {
                    configurable: true,
                    writable: true,
                    enumerable: false,
                    value: true
                }
            });
        } catch (nonConfigurableError) {}
        return stack;
    };
    return {
        prepareStackTrace: prepareStackTrace
    };
};

},{"u3":"dIyaj","./prepareStackTrace":"85RZD"}],"gTux2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CHEDDAR_CONTRACT_NAME", ()=>CHEDDAR_CONTRACT_NAME);
parcelHelpers.export(exports, "CHEDDAR_NFT_CONTRACT_NAME", ()=>CHEDDAR_NFT_CONTRACT_NAME);
parcelHelpers.export(exports, "TESTNET_CHEDDAR_CONTRACT_NAME", ()=>TESTNET_CHEDDAR_CONTRACT_NAME);
parcelHelpers.export(exports, "TESTNET_CHEDDAR_NFT_CONTRACT_NAME", ()=>TESTNET_CHEDDAR_NFT_CONTRACT_NAME);
parcelHelpers.export(exports, "NO_CONTRACT_DEPOSIT_NEAR", ()=>NO_CONTRACT_DEPOSIT_NEAR);
parcelHelpers.export(exports, "ENV", ()=>ENV);
parcelHelpers.export(exports, "getConfig", ()=>getConfig);
const CHEDDAR_CONTRACT_NAME = "token.cheddar.near";
const CHEDDAR_NFT_CONTRACT_NAME = "nft.cheddar.near";
const TESTNET_CHEDDAR_CONTRACT_NAME = "token-v3.cheddar.testnet";
const TESTNET_CHEDDAR_NFT_CONTRACT_NAME = "nft.cheddar.testnet";
const NO_CONTRACT_DEPOSIT_NEAR = "no-contract-deposit-near";
const MAINNET_NETWORKID = "mainnet";
const MAINNET_NODEURL = "https://rpc.mainnet.near.org";
const MAINNET_WALLETURL = "https://wallet.near.org";
const MAINNET_HELPERURL = "https://helper.mainnet.near.org";
const MAINNET_EXPLORERURL = "https://explorer.mainnet.near.org";
const TESTNET_NETWORKID = "testnet";
const TESTNET_NODEURL = "https://rpc.testnet.near.org";
const TESTNET_WALLETURL = "https://wallet.testnet.near.org";
const TESTNET_HELPERURL = "https://helper.testnet.near.org";
const TESTNET_EXPLORERURL = "https://explorer.testnet.near.org";
const ENV = MAINNET_NETWORKID;
function getConfig(env) {
    switch(env){
        case "production":
        case "mainnet":
            return {
                nftContractAddress: "nft.cheddar.near",
                cheddarNFTBaseUrl: "https://bafybeicoln5rvccttgypzo26irjlskslnfynkzig6bowpsj6ay45geeice.ipfs.nftstorage.link/",
                networkId: MAINNET_NETWORKID,
                nodeUrl: MAINNET_NODEURL,
                cheddarContractName: CHEDDAR_CONTRACT_NAME,
                cheddarNFTContractName: CHEDDAR_NFT_CONTRACT_NAME,
                walletUrl: MAINNET_WALLETURL,
                helperUrl: MAINNET_HELPERURL,
                explorerUrl: MAINNET_EXPLORERURL,
                keyPath: undefined,
                masterAccount: undefined,
                "farms": [
                    {
                        index: 0,
                        poolType: "single",
                        poolName: "pulse",
                        // networkId: MAINNET_NETWORKID,
                        // nodeUrl: MAINNET_NODEURL,
                        contractName: "p2-pulse.cheddar.near",
                        // cheddarContractName: CHEDDAR_CONTRACT_NAME,
                        tokenContractName: "52a047ee205701895ee06a375492490ec9c597ce.factory.bridge.near"
                    },
                    {
                        index: 1,
                        poolType: "single",
                        poolName: "nUSDO",
                        // networkId: MAINNET_NETWORKID,
                        // nodeUrl: MAINNET_NODEURL,
                        contractName: "p2-nusd.cheddar.near",
                        // cheddarContractName: CHEDDAR_CONTRACT_NAME,
                        tokenContractName: "v3.oin_finance.near"
                    },
                    {
                        index: 2,
                        poolType: "single",
                        poolName: "ref",
                        // networkId: MAINNET_NETWORKID,
                        // nodeUrl: MAINNET_NODEURL,
                        contractName: "p2-ref.cheddar.near",
                        // cheddarContractName: CHEDDAR_CONTRACT_NAME,
                        tokenContractName: "token.v2.ref-finance.near"
                    },
                    {
                        index: 3,
                        poolType: "single",
                        poolName: "stNEAR",
                        // networkId: MAINNET_NETWORKID,
                        // nodeUrl: MAINNET_NODEURL,
                        contractName: "p2-meta.cheddar.near",
                        // cheddarContractName: CHEDDAR_CONTRACT_NAME,
                        tokenContractName: "meta-pool.near"
                    },
                    {
                        index: 4,
                        poolType: "single",
                        poolName: "banana",
                        // networkId: MAINNET_NETWORKID,
                        // nodeUrl: MAINNET_NODEURL,
                        contractName: "p2-bananas.cheddar.near",
                        // cheddarContractName: CHEDDAR_CONTRACT_NAME,
                        tokenContractName: "berryclub.ek.near"
                    },
                    {
                        index: 5,
                        poolType: "single",
                        poolName: "Near",
                        // networkId: MAINNET_NETWORKID,
                        // nodeUrl: MAINNET_NODEURL,
                        contractName: "p1-farm.cheddar.near",
                        // cheddarContractName: CHEDDAR_CONTRACT_NAME,
                        tokenContractName: NO_CONTRACT_DEPOSIT_NEAR
                    },
                    {
                        index: 6,
                        poolType: "single",
                        poolName: "cheddar",
                        // networkId: MAINNET_NETWORKID,
                        // nodeUrl: MAINNET_NODEURL,
                        contractName: "p2-cheddar.cheddar.near",
                        // cheddarContractName: CHEDDAR_CONTRACT_NAME,
                        tokenContractName: CHEDDAR_CONTRACT_NAME
                    },
                    {
                        index: 7,
                        poolType: "single",
                        poolName: "Nearcon",
                        // networkId: MAINNET_NETWORKID,
                        // nodeUrl: MAINNET_NODEURL,
                        contractName: "farm-nearcon.cheddar.near",
                        // cheddarContractName: CHEDDAR_CONTRACT_NAME,
                        tokenContractName: NO_CONTRACT_DEPOSIT_NEAR
                    },
                    {
                        index: 8,
                        poolType: "multiple",
                        poolName: "cheddar-ref-burrow",
                        contractName: "p3-ref-bbr.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME
                    },
                    {
                        index: 9,
                        poolType: "multiple",
                        poolName: "cheddar-meta",
                        contractName: "p3-meta.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME
                    },
                    {
                        index: 10,
                        poolType: "multiple",
                        poolName: "cheddar-neko",
                        contractName: "p3-neko1.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME
                    },
                    {
                        index: 11,
                        poolType: "multiple",
                        poolName: "cheddar-neko",
                        contractName: "p3-meta1.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME
                    },
                    {
                        index: 12,
                        poolType: "single",
                        poolName: "_Cheddar B-Day! \uD83C\uDF89",
                        contractName: "p2-birthday1.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME
                    },
                    {
                        index: 13,
                        poolType: "multiple",
                        poolName: "REF+Cheddar",
                        contractName: "p3-ref.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME
                    },
                    {
                        index: 14,
                        poolType: "multiple",
                        poolName: "MarmaJ+Cheddar",
                        contractName: "p3-marmaj.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME
                    },
                    {
                        index: 15,
                        poolType: "nft",
                        poolName: "Holistic",
                        nftBaseUrl: [
                            "https://cloudflare-ipfs.com/ipfs/bafybeicx2okilwtljyac2b5prutqodxkouyvfgysuav6pspoznn2n2qs2i"
                        ],
                        contractName: "p4-holistic.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME
                    },
                    {
                        index: 15,
                        poolType: "nft",
                        poolName: "Near Nauts",
                        nftBaseUrl: [
                            "https://nearnaut.mypinata.cloud/ipfs"
                        ],
                        contractName: "p4-nearnauts.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME
                    },
                    {
                        index: 16,
                        poolType: "nft",
                        poolName: "Near Nauts Mutants",
                        nftBaseUrl: [
                            "https://nearnaut.mypinata.cloud/ipfs"
                        ],
                        contractName: "p4-nautmutants.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME,
                        config: {
                            logo: "https://media.discordapp.net/attachments/955124480043262012/1045098073929551952/IMG_2695.jpg"
                        }
                    },
                    {
                        index: 17,
                        poolType: "nft",
                        poolName: "Cheddy",
                        nftBaseUrl: [
                            "https://bafybeicoln5rvccttgypzo26irjlskslnfynkzig6bowpsj6ay45geeice.ipfs.nftstorage.link"
                        ],
                        contractName: "p4-cheddy.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME,
                        config: {
                            noBoost: true
                        }
                    },
                    {
                        index: 18,
                        poolType: "nft",
                        poolName: "Astropups",
                        nftBaseUrl: [
                            "https://nearnaut.mypinata.cloud/ipfs"
                        ],
                        contractName: "p4-astropups.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME,
                        config: {
                            noBoost: false
                        }
                    },
                    {
                        index: 19,
                        poolType: "nft",
                        poolName: "Cheddy",
                        nftBaseUrl: [
                            "https://bafybeicoln5rvccttgypzo26irjlskslnfynkzig6bowpsj6ay45geeice.ipfs.nftstorage.link"
                        ],
                        contractName: "p4-cheddy1.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME,
                        config: {
                            noBoost: true
                        }
                    },
                    {
                        index: 20,
                        poolType: "nft",
                        poolName: "Cheddar-Cafe",
                        nftBaseUrl: [
                            "https://nearnaut.mypinata.cloud/ipfs"
                        ],
                        contractName: "p4-citizencafe.cheddar.near",
                        tokenContractName: CHEDDAR_CONTRACT_NAME
                    }, 
                ]
            };
        case "development":
        case "testnet":
            return {
                nftContractAddress: "nft.cheddar.testnet",
                cheddarNFTBaseUrl: "https://bafybeibghcllcmurku7lxyg4wgxn2zsu5qqk7h4r6bmyhpztmyd564cx54.ipfs.nftstorage.link/",
                networkId: TESTNET_NETWORKID,
                nodeUrl: TESTNET_NODEURL,
                cheddarContractName: TESTNET_CHEDDAR_CONTRACT_NAME,
                cheddarNFTContractName: TESTNET_CHEDDAR_NFT_CONTRACT_NAME,
                walletUrl: TESTNET_WALLETURL,
                helperUrl: TESTNET_HELPERURL,
                explorerUrl: TESTNET_EXPLORERURL,
                keyPath: undefined,
                masterAccount: undefined,
                "farms": [
                    {
                        index: 0,
                        poolType: "multiple",
                        poolName: "tt",
                        contractName: "p3-tt.cheddar.testnet",
                        tokenContractName: "test-token.cheddar.testnet"
                    },
                    {
                        index: 1,
                        poolType: "single",
                        poolName: "stNear",
                        contractName: "p2-meta.cheddar.testnet",
                        tokenContractName: "meta-v2.pool.testnet"
                    },
                    {
                        index: 2,
                        poolType: "single",
                        poolName: "banana",
                        contractName: "p2-bananas.cheddar.testnet",
                        tokenContractName: "berryclub.testnet"
                    },
                    {
                        index: 3,
                        poolType: "single",
                        poolName: "ref",
                        contractName: "p2-ref.cheddar.testnet",
                        tokenContractName: "ref.fakes.testnet"
                    },
                    {
                        index: 4,
                        poolType: "nft",
                        poolName: "Holistic Pilgrims",
                        contractName: "cheddy-nft.cheddar.testnet",
                        tokenContractName: "token-v3.cheddar.testnet",
                        nftBaseUrl: [
                            "https://cloudflare-ipfs.com/ipfs/bafybeicx2okilwtljyac2b5prutqodxkouyvfgysuav6pspoznn2n2qs2i"
                        ]
                    }, 
                ]
            };
        default:
            throw Error(`Unknown environment '${env}'. Can be configured in src/config.js.`);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"1aCpf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// -----------------------------
// Default disconnected wallet
// SmartContract proxies start with this dummy wallet until the user chooses a wallet
// -----------------------------
parcelHelpers.export(exports, "DisconnectedWallet", ()=>DisconnectedWallet);
parcelHelpers.export(exports, "disconnectedWallet", ()=>disconnectedWallet);
const NOT_CONNECTED = "Connect to NEAR";
class DisconnectedWallet {
    requestSignTransactions(transactions, callbackUrl, meta) {
        return Promise.resolve();
    }
    getAccountId() {
        return NOT_CONNECTED;
    }
    getDisplayableAccountId() {
        return this.getAccountId();
    }
    async getAccountBalance(accountId) {
        return "0";
    }
    getNetwork() {
        return NOT_CONNECTED;
    }
    setNetwork(value) {
        throw Error("can't change network");
    }
    // Note: Connection is started from the chrome-extension, so web pages don't get any info before the user decides to "connect"
    // Also pages don't need to create buttons/options to connect to different wallets, as long all wallets connect with Dapp-pages by using this API
    // potentially, a single DApp can be used to operate on multiple chains, since all requests are high-level and go thru the chrome-extension
    isConnected() {
        return false;
    }
    disconnect() {}
    connectionHelp() {
        window.open("https://wallet.near.org/");
    }
    /**
     * isConnected or throws "wallet not connected"
     */ checkConnected() {
        throw Error(NOT_CONNECTED);
    }
    /**
     * Just a single contract "view" call
     */ async view(contract, method, args) {
        throw Error(NOT_CONNECTED);
    }
    /**
     * A single contract "payable" fn call
     */ async call(contract, method, args, gas, attachedYoctos) {
        throw Error(NOT_CONNECTED);
    }
    /**
     * ASYNC. sends a BatchTransaction to the blockchain
     */ async apply(bt) {
        throw Error(NOT_CONNECTED);
    }
    /**
     * ASYNC, low level generic access
     */ queryChain(method, args) {
        throw Error(NOT_CONNECTED);
    }
}
const disconnectedWallet = new DisconnectedWallet();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"knXiI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//-----------------------------
// WalletInterface implementation
// for the NEAR Web Wallet
//-----------------------------
parcelHelpers.export(exports, "NearWebWallet", ()=>NearWebWallet);
var _util = require("../util");
var _providers = require("near-api-js/lib/providers");
var _bnJs = require("bn.js"); //WARN: It has to be the same bn.js version as near-api-js
var _bnJsDefault = parcelHelpers.interopDefault(_bnJs);
class NearWebWallet {
    constructor(walletConnection){
        this.walletConnection = walletConnection;
    }
    getAccountId() {
        return this.walletConnection.getAccountId();
    }
    getDisplayableAccountId() {
        const accName = this.getAccountId();
        return accName.length > 22 ? accName.slice(0, 10) + ".." + accName.slice(-10) : accName;
    }
    async getAccountBalance(accountId) {
        const data = await this.walletConnection.account().getAccountBalance();
        return data.total;
    }
    getNetwork() {
        return this.walletConnection._near.connection.networkId;
    }
    setNetwork(value) {
        throw Error("can't change networkId");
    }
    isConnected() {
        return this.walletConnection.isSignedIn();
    }
    disconnect() {
        this.walletConnection.signOut();
    }
    connectionHelp() {
        window.open("https://wallet.near.org/");
    }
    /**
     * isConnected or throws "wallet not connected"
     */ checkConnected() {
        if (!this.walletConnection.isSignedIn()) throw Error("Wallet is not connected");
    }
    /**
     * Just a single contract "view" call
     */ async view(contract, method, args) {
        return this.walletConnection.account().viewFunction(contract, method, args);
    }
    /**
     * A single contract "payable" fn call
     */ async call(contract, method, args, gas, attachedYoctos) {
        //clear SearchURL before calling to not mix old results with new ones
        window.history.replaceState({}, "", location.pathname);
        const finalExecOutcome = await this.walletConnection.account().functionCall(contract, method, args, new (0, _bnJsDefault.default)(gas || (0, _util.DEFAULT_GAS)), new (0, _bnJsDefault.default)(attachedYoctos || "0"));
        return (0, _providers.getTransactionLastResult)(finalExecOutcome);
    }
    /**
     * ASYNC. sends a BatchTransaction to the blockchain
     */ async apply(bt) {
        //TODO - implement BatchTransactions
        throw Error("Not implemented");
    }
    /**
     * ASYNC, low level generic access
     */ async queryChain(method, args) {
        const provider = this.walletConnection._connectedAccount.connection.provider;
        return provider.sendJsonRpc(method, args);
    }
}

},{"../util":"dG3AT","near-api-js/lib/providers":"gtL2a","bn.js":"VopIn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dG3AT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_GAS", ()=>DEFAULT_GAS);
//helper to check wallet version
parcelHelpers.export(exports, "SemVer", ()=>SemVer);
const DEFAULT_GAS = "200" + "0".repeat(12);
class SemVer {
    constructor(major, minor, version){
        this.major = major;
        this.minor = minor;
        this.version = version;
    }
    static fromNumber(num) {
        const str = num.toString().padStart(9, "0");
        return new SemVer(Number(str.slice(0, 3)), Number(str.slice(3, 3)), Number(str.slice(6, 3)));
    }
    toNumber() {
        return this.major * 1e6 + this.minor * 1e3 + this.version;
    }
    toString() {
        return `${this.major}.${this.minor}.${this.version}`;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2aflt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//-------------------------------
// WalletInterface implementation
// for Narwallet-chrome-extension
//-------------------------------
//-----------------------------
//-- SINGLETON WALLET class  --
//-----------------------------
parcelHelpers.export(exports, "Narwallet", ()=>Narwallet);
parcelHelpers.export(exports, "narwallets", ()=>narwallets);
//----------------------------------------
//-- Init, add all listeners
//----------------------------------------
parcelHelpers.export(exports, "addNarwalletsListeners", ()=>addNarwalletsListeners);
//----------------------------------------------------
//-- LISTEN to "message" from injected content script
//-- msg path is ext-> content-script-> here-> dispatchEvent("wallet-connected"|"wallet-disconnected"|"wallet-event")
//-- process by raising 'wallet-event'  
//----------------------------------------------------
parcelHelpers.export(exports, "addGeneralListener", ()=>addGeneralListener);
//to add connect event listener
parcelHelpers.export(exports, "addOnConnectListener", ()=>addOnConnectListener);
//to add disconnect event listener
parcelHelpers.export(exports, "addOnDisconnectListener", ()=>addOnDisconnectListener);
//queue a request, send to the extension via window.postMessage, return a Promise
parcelHelpers.export(exports, "backgroundRequest", ()=>backgroundRequest);
var _batchTransaction = require("../batch-transaction");
var _util = require("../util");
class Narwallet {
    _isConnected = false;
    _accountId = "";
    _network = "mainnet";
    _requiredVersion = new (0, _util.SemVer)(2, 0, 0);
    version = new (0, _util.SemVer)(0, 0, 0);
    getAccountId() {
        return this._accountId;
    }
    getDisplayableAccountId() {
        const accName = this.getAccountId();
        return accName.length > 22 ? accName.slice(0, 10) + ".." + accName.slice(-10) : accName;
    }
    async getAccountBalance(accountId) {
        const requestPayload = {
            dest: "ext",
            code: "get-account-balance",
            accountId: accountId || this._accountId
        };
        return backgroundRequest(requestPayload);
    }
    getNetwork() {
        return this._network;
    }
    setNetwork(value) {
        this._network = value;
    }
    setRequiredVersion(semver) {
        this._requiredVersion = semver;
    }
    // Note: Connection is started from the chrome-extension, so web pages don't get any info before the user decides to "connect"
    // Also pages don't need to create buttons/options to connect to different wallets, as long all wallets connect with Dapp-pages by using this API
    // potentially, a single DApp can be used to operate on multiple chains, since all requests are high-level and go thru the chrome-extension
    isConnected() {
        return this._isConnected;
    }
    disconnect() {
        //console.log("wallet.disconnect") 
        document.dispatchEvent(new CustomEvent("wallet-disconnected"));
        if (this._isConnected) window.postMessage({
            dest: "ext",
            code: "disconnect"
        }, "*"); //inform the extension
        this._isConnected = false;
        this._accountId = "";
        this.version = new (0, _util.SemVer)(0, 0, 0);
    }
    connectionHelp() {
        window.open("http://www.narwallets.com/help/connect-to-web-app");
    }
    /**
     * isConnected or throws "wallet not connected"
     */ checkConnected() {
        if (!this._isConnected) throw Error("Wallet is not connected. Open the wallet extension and click 'Connect to Web Page'");
    }
    /**
     * Just a single contract "view" call
     */ async view(contract, method, args) {
        //ask the extension to make the view-call
        const requestPayload = {
            dest: "ext",
            code: "view",
            contract: contract,
            method: method,
            args: args
        };
        return backgroundRequest(requestPayload);
    }
    /**
     * A single contract "payable" fn call
     */ async call(contract, method, args, gas, attachedYoctos) {
        const bt = new (0, _batchTransaction.BatchTransaction)(contract);
        bt.addItem(new (0, _batchTransaction.FunctionCall)(method, args, gas, attachedYoctos));
        return this.apply(bt);
    }
    /**
     * ASYNC. sends a BatchTransaction to the blockchain
     */ async apply(bt) {
        //ask the extension to broadcast the transaction
        //register request. Promise will be resolved when the response arrives
        const requestPayload = {
            dest: "ext",
            code: "apply",
            tx: bt
        };
        return backgroundRequest(requestPayload);
    }
    /**
     * ASYNC, low level generic access
     */ async queryChain(method, args) {
        const requestPayload = {
            dest: "ext",
            code: "json-rpc",
            method: method,
            args: args
        };
        return backgroundRequest(requestPayload);
    }
}
let narwallets = new Narwallet();
function addNarwalletsListeners(onConnect, OnDisconnect) {
    addGeneralListener();
    addOnConnectListener(onConnect);
    addOnDisconnectListener(OnDisconnect);
}
function addGeneralListener() {
    window.addEventListener("message", function(event) {
        //console.log("wallet-ts message-listener",event.data.dest, event.data);
        if (event.source != window) return; //only internal messages (from the injected content script)
        if (event.data.dest != "page") return; //only messages destined to this web page (DApp) 
        msgReceivedFromContentScript(event.data);
    }, false);
}
function addOnConnectListener(handler) {
    document.addEventListener("wallet-connected", handler);
}
function addOnDisconnectListener(handler) {
    document.addEventListener("wallet-disconnected", handler);
}
//process message from ext/page
function msgReceivedFromContentScript(msg) {
    //console.log("msg ext->page: " + JSON.stringify(msg));
    //handle connect and disconnect
    if (msg.code == "connect") {
        //prepare response
        const walletNetwork = narwallets.getNetwork();
        const response = {
            dest: "ext",
            code: "connected",
            relayer: "wallet-api",
            version: "0.1",
            network: walletNetwork,
            err: ""
        };
        //capture wallet version, default 1.0.2
        if (msg.data?.version) narwallets.version = (0, _util.SemVer).fromNumber(msg.data?.version);
        else narwallets.version = new (0, _util.SemVer)(1, 0, 2);
        //check required version
        if (narwallets.version.toNumber() < narwallets._requiredVersion.toNumber()) {
            //respond back what network we require
            response.err = "The web page requires Narwallets v" + narwallets._requiredVersion.toString();
            window.postMessage(response, "*");
            return;
        }
        if (walletNetwork && (!msg.data || msg.data.network != walletNetwork)) {
            //respond back what network we require
            response.err = "The web page requires a " + walletNetwork + " account";
            window.postMessage(response, "*");
            return;
        }
        //turn on connected flags
        narwallets._isConnected = true;
        narwallets._accountId = msg.data.accountId;
        //respond back so the the chrome-extension knows we're listening
        window.postMessage(response, "*");
    } else if (msg.code == "disconnect") {
        if (narwallets.isConnected()) narwallets.disconnect(); //dispatches event, does it all
        return;
    } else if (msg.code == "request-resolved") //chrome-extension completed a request
    //find & resolve the request by requestId 
    processRequestResolved(msg);
    //Also dispatchEvent to the DApp can react to extension-wallet events
    //like "wallet-connected"|"wallet-disconnected"
    let eventKey = eventFromCode(msg.code);
    const eventInfo = new CustomEvent(eventKey, {
        detail: {
            source: "ext",
            code: msg.code,
            err: msg.err,
            data: msg.data
        }
    });
    //console.log("document.dispatchEvent "+ eventInfo.type) 
    document.dispatchEvent(eventInfo);
}
function eventFromCode(code) {
    switch(code){
        case "connect":
            return "wallet-connected";
        case "disconnect":
            return "wallet-disconnected";
        default:
            return "wallet-event";
    }
}
//called when the resolved msg comes back
function processRequestResolved(msg) {
    let inx = requests.findIndex((req)=>req.requestId == msg.requestId);
    if (inx >= 0) {
        //remove it from the array
        let r = requests.splice(inx, 1)[0];
        //reject or resolve promise
        if (msg.err) return r.reject(Error(msg.err));
        else return r.resolve(msg.data);
    } else console.error("requestId NOT FOUND ", msg);
}
const requests = [];
let requestId = 0; //incremental request-id
function backgroundRequest(requestPayload) {
    return new Promise((resolve, reject)=>{
        const request = {
            requestId: ++requestId,
            payload: requestPayload,
            reject: reject,
            resolve: resolve
        };
        requests.push(request);
        requestPayload.requestId = requestId; //add requestId to payload
        if (!requestPayload.dest) requestPayload.dest = "ext";
        //broadcast (injected content script will process it and forward to the chrome-extension)
        window.postMessage(requestPayload, "*");
    });
}

},{"../batch-transaction":"BOJ2x","../util":"dG3AT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"BOJ2x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//----------------------
//-- BatchTransaction --
//----------------------
// this classes exists to facilitate the creation of BatchTransactions
// a BatchTransaction is a series of actions *to be executed on a fixed receiver*
// by having this classes we can make typescript help with type-checking and code suggestions
//
parcelHelpers.export(exports, "BatchTransaction", ()=>BatchTransaction);
//generic batch-action
parcelHelpers.export(exports, "BatchAction", ()=>BatchAction);
parcelHelpers.export(exports, "FunctionCall", ()=>FunctionCall);
parcelHelpers.export(exports, "Transfer", ()=>Transfer) //TODO
 //add create-account, delete-account, etc
;
var _util = require("./util");
class BatchTransaction {
    constructor(receiver){
        this.receiver = receiver;
        this.items = [];
    }
    addItem(item) {
        this.items.push(item);
    }
}
class BatchAction {
    constructor(action, attached = "0"){
        this.action = action;
        this.attached = attached;
    }
}
class FunctionCall extends BatchAction {
    constructor(method, args, gas, attached){
        super("call", attached);
        this.method = method;
        this.args = args;
        this.gas = gas || (0, _util.DEFAULT_GAS);
    }
}
class Transfer extends BatchAction {
    constructor(attached){
        super("transfer", attached);
    }
}

},{"./util":"dG3AT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ddkdY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//TGas number -> U64String
parcelHelpers.export(exports, "TGas", ()=>TGas);
//NEAR amount (up-to 6 dec points) -> U128String yoctoNEAR
parcelHelpers.export(exports, "ntoy", ()=>ntoy);
//yoctoNEAR amount -> number, rounded
/**
 * returns Near number with 5 decimal digits
 * @param {string} yoctoNEAR amount 
 */ parcelHelpers.export(exports, "yton", ()=>yton);
//yoctoNEAR amount -> number, rounded
/**
 * returns Near number with 5 decimal digits
 * @param {string} yoctoNEAR amount 
 */ parcelHelpers.export(exports, "ytonLong", ()=>ytonLong);
/**
 * returns string with a decimal point and 24 decimal places
 * @param {string} yoctoString amount in yoctos
 */ parcelHelpers.export(exports, "ytonFull", ()=>ytonFull);
//-------------------------------------
//--- conversions User-input <-> Number
//-------------------------------------
/** rebase a number based on decimal. Examples
*   convertToDecimals("1",3) = 0.001
*   convertToDecimals("0",3) = 0.0
*   convertToDecimals("1000",3) = 1.0
*   convertToDecimals("1000",3) = 1.0
*   convertToDecimals("12345678",3) = 123.45678
*   If truncate is provided, then the fractional part of the number is truncated to the
*   `truncate` decimal digits. If `truncate == 0` then the fractional part is ommited.
*   Example:
*   convertToDecimals("12345678", 1, 1) = 123.4
*/ parcelHelpers.export(exports, "convertToDecimals", ()=>convertToDecimals);
/** Takes a decimal number in string and returns
* a number as a string rebased to given decimal base.
* Examples
*   convertToBase("1", 3) = "1000"
*   convertToBase("1234", 3) =   "1234000"
*   convertToBase("1.234", 3) =  "1234"
*   convertToBase("1.2345", 3) = "1234"
* convertToBase("0.12345", 3) = "123"
*/ parcelHelpers.export(exports, "convertToBase", ()=>convertToBase);
/**
 * converts a string with and commas and decimal places into a number
 * @param {string} str
 */ parcelHelpers.export(exports, "toNumber", ()=>toNumber);
/**
 * Formats a number in NEAR to a string with commas and 5 decimal places
 * @param {number} n 
 */ parcelHelpers.export(exports, "toStringDecSimple", ()=>toStringDecSimple);
/**
 * Formats a number in NEAR to a string with commas and 5 decimal places
 * @param {number} n 
 */ parcelHelpers.export(exports, "toStringDecLong", ()=>toStringDecLong);
/**
 * Formats a bigint in NEAR to a string with commas and 5 decimal places
 * @param {number} n 
 */ parcelHelpers.export(exports, "bigintToStringDecLong", ()=>bigintToStringDecLong);
/**
* Formats a number in NEAR to a string with commas and 5 decimal places
* @param {number} n 
*/ parcelHelpers.export(exports, "toStringDec", ()=>toStringDec);
/**
* removes extra zeroes after the decimal point
* it leaves >4,2, or none (never 3 to not confuse the international user)
* @param {number} n 
*/ parcelHelpers.export(exports, "removeDecZeroes", ()=>removeDecZeroes);
/**
* Formats a number in NEAR to a string with commas and 5,2, or 0 decimal places
* @param {number} n 
*/ parcelHelpers.export(exports, "toStringDecMin", ()=>toStringDecMin);
/**
 * adds commas to a string number 
 * @param {string} str 
 */ parcelHelpers.export(exports, "addCommas", ()=>addCommas);
//----------------------------------
//------ conversions YoctoNEAR <-> Near
//----------------------------------
//BigInt scientific notation
const base1e = BigInt(10);
function b1e(n) {
    return base1e ** BigInt(n);
}
const b1e12 = b1e(12);
const b1e24 = b1e(24);
const b1e18 = b1e(18);
function TGas(tgas) {
    return (BigInt(tgas) * b1e12).toString(); // tgas*1e12 // Note: gas is u64
}
function ntoy(near) {
    return (BigInt(Math.round(near * 1e6)) * b1e18).toString(); // near*1e24 // Note: YoctoNear is u128
}
function yton(yoctos) {
    try {
        yoctos = yoctos.toString();
        if (yoctos == undefined) return 0;
        const decimals = 5;
        const bn = BigInt(yoctos) + BigInt(0.5 * 10 ** (24 - decimals)); //round 6th decimal
        const truncated = ytonFull(bn.toString()).slice(0, decimals - 24);
        return Number(truncated);
    } catch (ex) {
        console.log("ERR: yton(", yoctos, ")", ex);
        return NaN;
    }
}
function ytonLong(yoctos) {
    try {
        if (yoctos == undefined) return 0;
        const decimals = 8;
        const bn = BigInt(yoctos) + BigInt(0.5 * 10 ** (24 - decimals)); //round 6th decimal
        const truncated = ytonFull(bn.toString()).slice(0, decimals - 24);
        return Number(truncated);
    } catch (ex) {
        console.log("ERR: yton(", yoctos, ")", ex);
        return NaN;
    }
}
function ytonFull(yoctoString) {
    let result = (yoctoString + "").padStart(25, "0");
    result = result.slice(0, -24) + "." + result.slice(-24);
    return result;
}
function convertToDecimals(str, decimals, truncate) {
    str = str.toString() // convert numbers and bigint
    ;
    // clear leading zeros
    let i = 0;
    for(; i < str.length && str[i] == "0"; ++i);
    if (i != 0) str = str.substring(i);
    if (str == "0") return "0";
    // let decimals_n = Number(decimals);
    if (decimals == 0) return str;
    // Pad zeros at the beginning.
    // We add 1 to make sure the integer digit is included as well)
    str = String(str).padStart(decimals + 1, "0");
    let integer = str.slice(0, -decimals);
    let fractional = str.slice(integer.length);
    if (integer == "") integer = "0";
    if (fractional == "") return integer;
    if (truncate == undefined) return integer + "." + fractional;
    else if (Number(fractional) > 0) return integer + "." + fractional.substring(0, truncate);
    return integer;
}
function convertToBase(n, decimals) {
    let decimals_n = Number(decimals);
    // clear leading zeros
    let i = 0;
    for(; i < n.length && n[i] == "0"; ++i);
    if (i != 0) n = n.substring(i);
    let dotIdx = n.indexOf(".");
    if (dotIdx < 0) return n + "0".padEnd(decimals, "0");
    let integer = n.substring(0, dotIdx);
    if (decimals_n == 0) return integer;
    let fractional = n.substring(dotIdx + 1, dotIdx + 1 + decimals).padEnd(decimals, "0");
    if (integer.length == 0) return fractional;
    return integer + fractional;
}
function toNumber(str) {
    const result = Number(str.replace(/,/g, ""));
    if (isNaN(result)) return 0;
    return result;
}
function toStringDecSimple(n) {
    const decimals = 5;
    const textNoDec = Math.round(n * 10 ** decimals).toString().padStart(decimals + 1, "0");
    return textNoDec.slice(0, -decimals) + "." + textNoDec.slice(-decimals);
}
function toStringDecLong(n) {
    const decimals = 8;
    const textNoDec = Math.round(n * 10 ** decimals).toString().padStart(decimals + 1, "0");
    return addCommas(textNoDec.slice(0, -decimals) + "." + textNoDec.slice(-decimals));
}
function bigintToStringDecLong(n) {
    const nString = n.toString();
    const nyton = ytonLong(nString);
    const output = toStringDecLong(nyton);
    return output;
}
function toStringDec(n) {
    return addCommas(toStringDecSimple(n));
}
function removeDecZeroes(withDecPoint) {
    let decPointPos = withDecPoint.indexOf(".");
    if (decPointPos <= 0) return withDecPoint;
    let decimals = withDecPoint.length - decPointPos - 1;
    while(withDecPoint.endsWith("0") && decimals-- > 4)withDecPoint = withDecPoint.slice(0, -1);
    if (withDecPoint.endsWith("00")) withDecPoint = withDecPoint.slice(0, -2);
    if (withDecPoint.endsWith(".00")) withDecPoint = withDecPoint.slice(0, -3);
    return withDecPoint;
}
function toStringDecMin(n) {
    return addCommas(removeDecZeroes(toStringDecSimple(n)));
}
function addCommas(str) {
    let n = str.indexOf(".");
    if (n == -1) n = str.length;
    n -= 4;
    while(n >= 0){
        str = str.slice(0, n + 1) + "," + str.slice(n + 1);
        n = n - 3;
    }
    return str;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jRQBA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// document.querySelector shortcuts
// qs => document.querySelector ->  HTMLElement
parcelHelpers.export(exports, "qs", ()=>qs);
// qsi => document.querySelector ->  HTMLInputElement
parcelHelpers.export(exports, "qsi", ()=>qsi);
// qsa => document.querySelectorAll ->  NodeListOf<Element>
parcelHelpers.export(exports, "qsa", ()=>qsa);
///set innerText for all matching HTMLElements
parcelHelpers.export(exports, "qsaInnerText", ()=>qsaInnerText);
///set innerText for all matching HTMLElements
parcelHelpers.export(exports, "qsaAttribute", ()=>qsaAttribute);
///set innerText for first matching HTMLElement
parcelHelpers.export(exports, "qsInnerText", ()=>qsInnerText);
parcelHelpers.export(exports, "show", ()=>show);
parcelHelpers.export(exports, "hide", ()=>hide);
parcelHelpers.export(exports, "showPopup", ()=>showPopup);
parcelHelpers.export(exports, "hidePopup", ()=>hidePopup);
parcelHelpers.export(exports, "hideOverlay", ()=>hideOverlay);
parcelHelpers.export(exports, "showWait", ()=>showWait);
parcelHelpers.export(exports, "hideWaitKeepOverlay", ()=>hideWaitKeepOverlay);
parcelHelpers.export(exports, "showMessage", ()=>showMessage);
parcelHelpers.export(exports, "showSuccess", ()=>showSuccess);
parcelHelpers.export(exports, "showError", ()=>showError);
parcelHelpers.export(exports, "showErr", ()=>showErr);
function qs(selector) {
    return document.querySelector(selector);
}
function qsi(selector) {
    return document.querySelector(selector);
}
function qsa(selector) {
    return document.querySelectorAll(selector);
}
function qsaInnerText(selector, innerText) {
    document.querySelectorAll(selector).forEach((e)=>{
        if (e instanceof HTMLElement) e.innerText = innerText;
    });
}
function qsaAttribute(selector, attributeKey, attributeValue) {
    document.querySelectorAll(selector).forEach((e)=>{
        if (e instanceof HTMLElement) e.setAttribute(attributeKey, attributeValue);
    });
}
function qsInnerText(selector, innerText) {
    document.querySelector(selector).innerHTML = innerText;
}
function show(el, onOff = true) {
    el.style.display = onOff ? "" : "none";
}
function hide(el) {
    el.style.display = "none";
}
function showPopup(selector, msg, title) {
    cancelWait = true;
    const el = qs(selector);
    const overlay = qs("#overlay1");
    //hide all
    overlay.querySelectorAll(".box.popup").forEach(hide);
    //show required
    //get children by id
    const titleElem = el.querySelector("#title");
    const msgElem = el.querySelector("#msg");
    if (msgElem && msg) msgElem.innerHTML = msg;
    if (titleElem && title) titleElem.innerText = title;
    show(el);
    //show overlay
    show(overlay);
}
function hidePopup(selector) {
    hide(qs(selector));
}
function hideOverlay() {
    cancelWait = true;
    hide(qs("#overlay1"));
}
let waitStartTimer;
let cancelWait = false;
function showWait(msg, title) {
    cancelWait = false;
    waitStartTimer = setTimeout(()=>{
        if (!cancelWait) showPopup("#wait-box", msg, title);
    }, 500);
}
function hideWaitKeepOverlay() {
    cancelWait = true;
    if (waitStartTimer) {
        clearTimeout(waitStartTimer);
        waitStartTimer = undefined;
    }
    hidePopup("#wait-box");
}
function showMessage(msg, title) {
    showPopup("#message-box", msg, title);
}
function showSuccess(msg, title) {
    console.log(msg + " " + title);
    showPopup("#success-box", msg, title);
}
function showError(msg, title) {
    title = msg == "Error from wallet: userRejected" ? "Transaction Rejected" : title;
    showPopup("#error-box", msg, title);
}
function showErr(ex) {
    console.log(ex);
    showError(ex.message);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"asJSA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkRedirectSearchParams", ()=>checkRedirectSearchParams);
parcelHelpers.export(exports, "checkRedirectSearchParamsMultiple", ()=>checkRedirectSearchParamsMultiple);
// Calling contract methods with attachedDeposit causes a redirect to NEAR Wallet.
// later the wallet redirects the browser back to this app, adding 2 params in URLSearchParams
// ?transactionHashes=xxxxx & errorCode=eeeee
// this fn must be called to check if we're re-spawning from a wallet redirect
// to obtain transaction result information
// check if (`err`) and if not you can get function call result with `data`, and full-tx-result with `finalExecutionOutcome`
var _nearApiJs = require("near-api-js");
var _providers = require("near-api-js/lib/providers");
var _rpcErrors = require("near-api-js/lib/utils/rpc_errors");
function removeQueryString() {
    var uri = window.location.toString();
    if (uri.indexOf("?") > 0) {
        var clean_uri = uri.substring(0, uri.indexOf("?"));
        window.history.replaceState({}, document.title, clean_uri);
    }
}
async function checkRedirectSearchParams(walletConnection, nearExplorerUrl) {
    try {
        const urlParams = new URLSearchParams(window.location.search);
        removeQueryString();
        const txHash = urlParams.get("transactionHashes");
        const errorCode = urlParams.get("errorCode");
        if (errorCode) {
            // If errorCode, then the redirect succeeded but the tx was rejected/failed
            const newError = "Error from wallet: " + errorCode;
            console.error(newError);
            return {
                err: newError
            };
        }
        if (!txHash) return {};
        if (txHash.includes(",")) {
            // NOTE: when a single tx is executed, transactionHashes is equal to that hash
            const newError = "Expected single txHash, got: " + txHash;
            console.error(newError);
            return {
                err: newError
            };
        }
        const decodedTxHash = (0, _nearApiJs.utils).serialize.base_decode(txHash);
        const finalExecOutcome = await walletConnection.account().connection.provider.txStatus(decodedTxHash, walletConnection.getAccountId());
        let method = undefined;
        if (finalExecOutcome.transaction?.actions?.length) {
            const actions = finalExecOutcome.transaction.actions;
            //recover methodName of first FunctionCall action
            for(let n = 0; n < actions.length; n++){
                let item = actions[n];
                if ("FunctionCall" in item) {
                    //@ts-ignore
                    method = item.FunctionCall.method_name;
                    break;
                }
            }
        }
        //@ts-ignore
        let failure = finalExecOutcome.status.Failure;
        if (failure) {
            console.error("finalExecOutcome.status.Failure", failure);
            const errorMessage = typeof failure === "object" ? (0, _rpcErrors.parseRpcError)(failure).toString() : `Transaction <a href="${nearExplorerUrl}/transactions/${finalExecOutcome.transaction.hash}">${finalExecOutcome.transaction.hash}</a> failed`;
            return {
                err: errorMessage,
                method: method
            };
        }
        return {
            data: (0, _providers.getTransactionLastResult)(finalExecOutcome),
            method: method,
            finalExecutionOutcome: finalExecOutcome
        };
    } catch (ex) {
        console.error(ex.message);
        return {
            err: ex.message
        };
    }
}
async function checkRedirectSearchParamsMultiple(walletConnection, nearExplorerUrl) {
    try {
        const urlParams = new URLSearchParams(window.location.search);
        removeQueryString();
        const txHash = urlParams.get("transactionHashes");
        const errorCode = urlParams.get("errorCode");
        if (errorCode) {
            // If errorCode, then the redirect succeeded but the tx was rejected/failed
            const newError = "Error from wallet: " + errorCode;
            console.error(newError);
            return [
                {
                    err: newError
                }
            ];
        }
        if (!txHash) return [];
        let transactionArray;
        if (txHash.includes(",")) // NOTE: when a single tx is executed, transactionHashes is equal to that hash
        transactionArray = txHash.split(",");
        else transactionArray = [
            txHash
        ];
        // [1, 3, 6].map(i => i + 3) --> [4, 6, 9]
        const decodedTxHashArray = transactionArray.map((hash)=>(0, _nearApiJs.utils).serialize.base_decode(hash));
        const finalExecOutcomeArray = await Promise.all(decodedTxHashArray.map(async (decodedTxHash)=>{
            return await walletConnection.account().connection.provider.txStatus(decodedTxHash, walletConnection.getAccountId());
        }));
        let output = [];
        for(let i = 0; i < finalExecOutcomeArray.length; i++){
            let method = undefined;
            const finalExecOutcome = finalExecOutcomeArray[i];
            if (finalExecOutcome.transaction?.actions?.length) {
                const actions = finalExecOutcome.transaction.actions;
                //recover methodName of first FunctionCall action
                for(let n = 0; n < actions.length; n++){
                    let item = actions[n];
                    if ("FunctionCall" in item) {
                        //@ts-ignore
                        method = item.FunctionCall.method_name;
                        break;
                    }
                }
            }
            //@ts-ignore
            let failure = finalExecOutcome.status.Failure;
            if (failure) {
                console.error("finalExecOutcome.status.Failure", failure);
                const errorMessage = typeof failure === "object" ? (0, _rpcErrors.parseRpcError)(failure).toString() : `Transaction <a href="${nearExplorerUrl}/transactions/${finalExecOutcome.transaction.hash}">${finalExecOutcome.transaction.hash}</a> failed`;
                output.push({
                    err: errorMessage,
                    method: method
                });
            } else output.push({
                data: (0, _providers.getTransactionLastResult)(finalExecOutcome),
                method: method,
                finalExecutionOutcome: finalExecOutcome
            });
        }
        return output;
    } catch (ex) {
        console.error(ex.message);
        return [
            {
                err: ex.message
            }
        ];
    }
}

},{"near-api-js":"ohc3m","near-api-js/lib/providers":"gtL2a","near-api-js/lib/utils/rpc_errors":"1TB1L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1tjx0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NEP141Trait", ()=>NEP141Trait);
//JSON compatible struct ft_metadata
var _baseSmartContract = require("../wallet-api/base-smart-contract");
var _nearApiJs = require("near-api-js");
var _conversions = require("../util/conversions");
var _bnJs = require("bn.js");
class NEP141Trait extends (0, _baseSmartContract.SmartContract) {
    async ft_transfer(receiver_id, amount, memo) {
        return this.call("ft_transfer", {
            receiver_id: receiver_id,
            amount: amount,
            memo: memo
        }, (0, _conversions.TGas)(200), "1"); //one-yocto attached
    }
    async ft_transfer_call(receiver_id, amount, msg, memo) {
        return this.call("ft_transfer_call", {
            receiver_id: receiver_id,
            amount: amount,
            memo: memo,
            msg: msg
        }, (0, _conversions.TGas)(200), "1"); //one-yocto attached
    }
    async ft_transfer_call_without_send(receiver_id, amount, msg = "to farm") {
        return _nearApiJs.transactions.functionCall("ft_transfer_call", {
            receiver_id: receiver_id,
            amount: amount,
            msg
        }, new (0, _bnJs.BN)("200000000000000"), // new BN(gas), 
        new (0, _bnJs.BN)(1));
    }
    async unstake_without_send(token, amount) {
        return _nearApiJs.transactions.functionCall("unstake", {
            token,
            amount
        }, new (0, _bnJs.BN)("200000000000000"), // new BN(gas), 
        new (0, _bnJs.BN)(1));
    }
    async ft_total_supply() {
        return this.viewWithoutAccount("ft_total_supply");
    }
    async ft_balance_of(accountId) {
        return this.viewWithoutAccount("ft_balance_of", {
            account_id: accountId
        });
    }
    async ft_metadata() {
        return this.viewWithoutAccount("ft_metadata");
    }
    async new(owner_id, owner_supply) {
        return this.call("new", {
            owner_id: owner_id,
            owner_supply: owner_supply
        });
    }
    /// Checks to see if an account is registered.
    storageBalance(accountId) {
        return this.viewWithoutAccount("storage_balance_of", {
            account_id: accountId || this.wallet.getAccountId()
        });
    }
    /// Registers a user with the farm.
    storageDeposit() {
        return this.call("storage_deposit", {}, (0, _conversions.TGas)(25), "3000000000000000000000");
    }
    async storageDepositWithoutSend() {
        return (0, _nearApiJs.transactions).functionCall("storage_deposit", {}, new (0, _bnJs.BN)("200000000000000"), new (0, _bnJs.BN)("3000000000000000000000"));
    }
}

},{"../wallet-api/base-smart-contract":"8n580","near-api-js":"ohc3m","../util/conversions":"ddkdY","bn.js":"VopIn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8n580":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//-----------------------------
// Base smart-contract proxy class
// provides constructor, view & call methods
// derive your specific contract proxy from this class
//-----------------------------
parcelHelpers.export(exports, "SmartContract", ()=>SmartContract);
var _disconnectedWallet = require("./disconnected-wallet");
var _nearApiJs = require("near-api-js");
var _ = require("..");
var _providers = require("near-api-js/lib/providers");
var Buffer = require("buffer").Buffer;
class SmartContract {
    constructor(contractId){
        this.contractId = contractId;
        this.wallet = (0, _disconnectedWallet.disconnectedWallet); //default wallet is DisconnectedWallet
        this.nearWallet = new _nearApiJs.WalletAccount((0, _.near), null);
        this.account = this.nearWallet.account();
        this.provider = new (0, _providers.JsonRpcProvider)((0, _.nearConfig).nodeUrl);
    }
    async viewWithoutAccount(method, args = {}) {
        try {
            const argsAsString = JSON.stringify(args);
            let argsBase64 = Buffer.from(argsAsString).toString("base64");
            const rawResult = await this.provider.query({
                request_type: "call_function",
                account_id: this.contractId,
                method_name: method,
                args_base64: argsBase64,
                finality: "optimistic"
            });
            // format result
            const res = JSON.parse(Buffer.from(rawResult.result).toString());
            return res;
        } catch (err) {
            console.error(`Error calling function ${method} from contract ${this.contractId} with params ${JSON.stringify(args)}`, err);
        }
    }
    view(method, args) {
        if (!this.wallet) throw Error(`contract-proxy not connected ${this.contractId} trying to view ${method}`);
        return this.wallet.view(this.contractId, method, args);
    }
    call(method, args, gas, attachedYoctos) {
        //console.log(this.contractId, method, args, gas, attachedYoctos)
        if (!this.wallet) throw Error(`contract-proxy not connected ${this.contractId} trying to call ${method}`);
        return this.wallet.call(this.contractId, method, args, gas, attachedYoctos);
    }
    callWithoutSend(method, args, gas, attachedYoctos) {
        //console.log(this.contractId, method, args, gas, attachedYoctos)
        if (!this.nearWallet) throw Error(`contract-proxy not connected ${this.contractId} trying to call ${method}`);
        return this.nearWallet.call(this.contractId, method, args, gas, attachedYoctos);
    }
    disconnect() {
        this.wallet = (0, _disconnectedWallet.disconnectedWallet); //set to DisconnectedWallet
    }
}

},{"./disconnected-wallet":"1aCpf","near-api-js":"ohc3m","..":"h7u1C","near-api-js/lib/providers":"gtL2a","buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eP0iK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//JSON compatible struct returned from get_contract_state
parcelHelpers.export(exports, "HtmlPoolParams", ()=>HtmlPoolParams);
parcelHelpers.export(exports, "UserStatusP2", ()=>UserStatusP2);
parcelHelpers.export(exports, "PoolParams", ()=>PoolParams);
var _nep141 = require("../contracts/NEP141");
var _conversions = require("../util/conversions");
var _poolEntities = require("./PoolEntities");
class HtmlPoolParams {
    constructor(id){
        this.id = id + "-container";
        this.formId = id;
    }
}
class UserStatusP2 {
    // All the numbers that are bigint are expected to be without any decimal points, and are converted when needed
    real_rewards_per_day = 0n;
    skip = 0;
    staked = 0n;
    real = 0n;
    // computed holds an integer number with no decimal places holding the info about the computed cheddar rewars calculated
    computed = 0n;
    previous_real = 0n;
    previousTimestamp = 0;
    tokenDecimals = 0;
    accName = "";
    constructor(userStatus){
        if (userStatus) {
            this.staked = BigInt(userStatus[0]);
            this.real = BigInt(userStatus[1]);
            this.previousTimestamp = Number(userStatus[2]);
        }
    }
    hasStakedTokens() {
        return this.staked > 0n;
    }
    getDisplayableComputed() {
        return (0, _conversions.convertToDecimals)(this.computed.toString(), 24, 7);
    }
    getCurrentCheddarRewards() {
        return (0, _conversions.convertToDecimals)(this.real.toString(), 24, 7);
    }
    getCurrentDisplayableCheddarRewards() {
        return (0, _conversions.convertToDecimals)(this.computed.toString(), 24, 7);
    }
    getDisplayableAccountName() {
        return this.accName.length > 22 ? this.accName.slice(0, 10) + ".." + this.accName.slice(-10) : this.accName;
    }
    addStaked(amount) {
        this.staked = this.staked + BigInt(amount);
    }
}
class PoolParams {
    stakeTokenContractList = [];
    farmTokenContractList = [];
    constructor(wallet, farmData, cheddarContractId){
        this.wallet = wallet;
        this.type = farmData.poolType;
        this.html = new HtmlPoolParams(farmData.poolName);
        this.poolName = farmData.poolName;
        this.config = farmData.config ? farmData.config : [];
        this.poolDescription = farmData.description;
        this.descriptionLink = farmData.descriptionLink;
        this.stakingContractData = new (0, _poolEntities.StakingContractDataP2)(wallet, farmData.contractName, farmData.tokenContractName, farmData.poolName);
        this.stakingContractData.contract;
        this.cheddarContract = new (0, _nep141.NEP141Trait)(cheddarContractId);
        this.stakeTokenContract = new (0, _nep141.NEP141Trait)(farmData.tokenContractName);
        this.stakeTokenMetaData = {};
        this.cheddarContract.wallet = wallet;
        this.stakeTokenContract.wallet = wallet;
    }
    async userHasStakedTokens() {
        const poolUserStatus = await this.stakingContractData.getUserStatus();
        return Number(poolUserStatus.staked) > 0;
    }
    async getTokenContractList(tokenContractName) {
        return [
            new (0, _poolEntities.TokenContractData)(this.wallet, tokenContractName, this.poolName)
        ];
    }
    async getPoolName() {
        /* Normally, pool names come from metadata, but in case it is requested a particular poolname
        you have to set on config.ts the poolName param starting with _ */ if (this.poolName[0] === "_") return this.poolName.substring(1);
        const metadata = await this.stakeTokenContractList[0].getMetadata();
        return metadata.symbol;
    }
    async setStakeTokenContractList() {
        this.stakeTokenContractList = [
            await this.getStakeTokenContractData()
        ];
    }
    async setFarmTokenContractList() {
        this.farmTokenContractList = await this.getTokenContractList(this.cheddarContract.contractId);
    }
    async setAllExtraData() {
        await this.setStakeTokenContractList();
        await this.setFarmTokenContractList();
    }
    async refreshAllExtraData() {}
    async getRewardTokenIconData() {
        const cheddarMetaData = await this.cheddarContract.ft_metadata();
        const src = cheddarMetaData.icon ? cheddarMetaData.icon : cheddarMetaData.name;
        return [
            {
                isSvg: src.includes("<svg"),
                src: src,
                tokenName: cheddarMetaData.name
            }
        ];
    }
    async getStakeTokensDetail() {
        let dataArray = [];
        const stakeTokenContractData = (await this.stakingContractData.getStakeTokenContractList())[0];
        const iconData = await this.getIcon(stakeTokenContractData);
        const contractParams = await this.stakingContractData.getContractParams();
        const metadata = await stakeTokenContractData.getMetadata();
        const totalStaked = (0, _conversions.convertToDecimals)(contractParams.total_staked, metadata.decimals, 5);
        dataArray.push({
            iconData,
            content: totalStaked
        });
        return dataArray;
    }
    async getRewardsTokenDetail() {
        let dataArray = [];
        const contractParams = await this.stakingContractData.getContractParams();
        const poolUserStatus = await this.stakingContractData.getUserStatus();
        const farmTokenContract = this.farmTokenContractList[0];
        const iconData = await this.getIcon(farmTokenContract);
        const farmTokenMetadata = await farmTokenContract.getMetadata();
        const tokenName = farmTokenMetadata.name;
        const rewardsPerDayBN = BigInt(contractParams.farming_rate) * 60n * 24n;
        const rewardsPerDay = (0, _conversions.convertToDecimals)(rewardsPerDayBN, farmTokenMetadata.decimals, 7);
        const totalRewards = (0, _conversions.convertToDecimals)(contractParams.total_farmed, farmTokenMetadata.decimals, 7);
        const userUnclaimedRewards = (0, _conversions.convertToDecimals)(poolUserStatus.real.toString(), farmTokenMetadata.decimals, 7);
        dataArray.push({
            iconData,
            tokenName,
            rewardsPerDay,
            totalRewards,
            userUnclaimedRewards
        });
        return dataArray;
    }
    async getIcon(contractData) {
        const metadata = await contractData.getMetadata();
        const src = metadata.icon ? metadata.icon : metadata.name;
        return {
            isSvg: src.includes("<svg"),
            src: src,
            tokenName: metadata.name ? metadata.name : "NoName"
        };
    }
    async getStakeTokenContractData() {
        return new (0, _poolEntities.TokenContractData)(this.wallet, this.stakeTokenContract.contractId, this.poolName);
    }
    async getFarmTokenContractData() {
        return new (0, _poolEntities.TokenContractData)(this.wallet, this.cheddarContract.contractId);
    }
    async getWalletAvailable() {
        return await this.stakeTokenContract.ft_balance_of(this.wallet.getAccountId());
    }
}

},{"../contracts/NEP141":"1tjx0","../util/conversions":"ddkdY","./PoolEntities":"5pJaw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5pJaw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTokenContractList", ()=>getTokenContractList);
parcelHelpers.export(exports, "StakingContractDataP3", ()=>StakingContractDataP3);
parcelHelpers.export(exports, "StakingContractDataP2", ()=>StakingContractDataP2);
parcelHelpers.export(exports, "TokenContractData", ()=>TokenContractData);
var _config = require("../config");
var _nearHardcodedObjects = require("../contracts/nearHardcodedObjects");
var _nep141 = require("../contracts/NEP141");
var _p2Staking = require("../contracts/p2-staking");
var _p3Staking = require("../contracts/p3-staking");
var _p3Structures = require("../contracts/p3-structures");
var _disconnectedWallet = require("../wallet-api/disconnected-wallet");
var _poolParams = require("./poolParams");
async function getTokenContractList(wallet, contractNameArray) {
    let tokenContractList = [];
    for(let i = 0; i < contractNameArray.length; i++){
        const tokenContractName = contractNameArray[i];
        tokenContractList.push(new TokenContractData(wallet, tokenContractName, ""));
    }
    return tokenContractList;
}
class StakingContractDataP3 {
    stakeTokenContractList = [];
    farmTokenContractList = [];
    constructor(wallet, contractId){
        this.contract = new (0, _p3Staking.StakingPoolP3)(contractId);
        this.contract.wallet = wallet;
        this.refreshData();
        this.stakeTokenContractListPromise = this.getStakeTokenContractListPromise();
    }
    refreshData() {
        this.contractParamsPromise = this.contract.get_contract_params();
        if (this.contract.wallet.isConnected()) this.userStatusPromise = this.contract.status();
        this.contractParams = undefined;
        this.userStatus = undefined;
    }
    async getContractParams() {
        if (this.contractParams === undefined) this.contractParams = await this.contractParamsPromise;
        return this.contractParams;
    }
    getContractParamsNotAsync() {
        return this.contractParams;
    }
    async getUserStatus() {
        if (this.userStatus === undefined) {
            this.userStatus = await this.userStatusPromise;
            if (this.userStatus == null) {
                const contractParams = await this.getContractParams();
                this.userStatus = new (0, _p3Structures.PoolUserStatusP3)(contractParams.stake_tokens.length, contractParams.farm_tokens.length);
            }
        }
        return this.userStatus;
    }
    async getStakeTokenContractListPromise() {
        const contractParams = await this.getContractParams();
        return getTokenContractList(this.contract.wallet, contractParams.stake_tokens);
    }
    async getStakeTokenContractList() {
        if (this.stakeTokenContractList.length == 0) this.stakeTokenContractList = await this.stakeTokenContractListPromise;
        return this.stakeTokenContractList;
    }
    async getFarmTokenContractList() {
        if (this.farmTokenContractList.length == 0) {
            const contractParams = await this.getContractParams();
            this.farmTokenContractList = await getTokenContractList(this.contract.wallet, contractParams.farm_tokens);
        }
        return this.farmTokenContractList;
    }
}
class StakingContractDataP2 {
    constructor(wallet, contractId, stakeTokenContractId, poolName){
        this.contract = new (0, _p2Staking.StakingPoolP1)(contractId);
        this.contract.wallet = wallet;
        this.refreshData();
        this.stakeTokenContractList = [
            new TokenContractData(wallet, stakeTokenContractId, poolName)
        ];
    }
    refreshData() {
        this.contractParamsPromise = this.contract.get_contract_params();
        this.userStatusPromise = this.contract.status();
        this.contractParams = undefined;
        this.userStatus = undefined;
    }
    async getContractParams() {
        if (this.contractParams === undefined) this.contractParams = await this.contractParamsPromise;
        if (this.contractParams.total_staked === undefined) {
            // p1 contracts have the parameter total_stake, while p2 contracts have total_staked. So this is a patch for avoiding changing code
            this.contractParams.total_staked = this.contractParams.total_stake;
            this.contractParams.farming_rate = this.contractParams.rewards_per_day;
            this.contractParams.total_farmed = this.contractParams.total_rewards;
        }
        return this.contractParams;
    }
    getContractParamsNotAsync() {
        return this.contractParams;
    }
    async getUserStatus() {
        if (this.contract.wallet == (0, _disconnectedWallet.disconnectedWallet)) this.userStatus = new (0, _poolParams.UserStatusP2)();
        else if (this.userStatus === undefined) {
            const userStatus = await this.userStatusPromise;
            this.userStatus = new (0, _poolParams.UserStatusP2)(userStatus);
        }
        return this.userStatus;
    }
    // This method is async so it matches with P3, since in that case, the stake tokens come from contract
    async getStakeTokenContractList() {
        return this.stakeTokenContractList;
    }
}
class TokenContractData {
    constructor(wallet, contractId, poolName = ""){
        this.wallet = wallet;
        if (contractId !== (0, _config.NO_CONTRACT_DEPOSIT_NEAR)) {
            this.contract = new (0, _nep141.NEP141Trait)(contractId);
            this.contract.wallet = wallet;
            this.metaDataPromise = this.contract.ft_metadata();
            // TODO Dani check if user is logged
            if (wallet.isConnected()) this.balancePromise = this.contract.ft_balance_of(wallet.getAccountId());
        } else {
            this.metaData = (0, _nearHardcodedObjects.getNearMetadata)(poolName);
            this.balancePromise = wallet.getAccountBalance();
        }
    }
    async getMetadata() {
        if (!this.metaData) {
            this.metaData = await this.metaDataPromise;
            if (this.metaData.symbol.includes("$")) this.metaData.symbolForHtml = this.metaData.symbol.replace("$", "");
            else this.metaData.symbolForHtml = this.metaData.symbol;
        }
        return this.metaData;
    }
    getMetadataSync() {
        return this.metaData;
    }
    async getBalance() {
        if (this.contract?.wallet == (0, _disconnectedWallet.disconnectedWallet)) this.balance = "0";
        else if (!this.balance) this.balance = await this.balancePromise;
        return this.balance;
    }
    getBalanceSync() {
        // If you get an undefined error, then you either need to use await getBalance() or await Promise.all(list.map(elem => elem.getBalance()))
        return this.balance;
    }
    refreshData() {
        this.balance = undefined;
        if (this.contract) this.balancePromise = this.contract.ft_balance_of(this.wallet.getAccountId());
        else this.balancePromise = this.wallet.getAccountBalance();
    }
}

},{"../config":"gTux2","../contracts/nearHardcodedObjects":"7VxLN","../contracts/NEP141":"1tjx0","../contracts/p2-staking":"ldB9O","../contracts/p3-staking":"aiwXf","../contracts/p3-structures":"dUHnz","../wallet-api/disconnected-wallet":"1aCpf","./poolParams":"eP0iK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7VxLN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getNearMetadata", ()=>getNearMetadata);
function getNearMetadata(symbol) {
    return {
        spec: "",
        name: "Near",
        symbol,
        symbolForHtml: symbol,
        icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 288 288"><g id="Layer_1" data-name="Layer 1"><path d="M187.58,79.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,103a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L102.18,77.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,87.84V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.35,15.35,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,186a1.2,1.2,0,0,1-2-.91V104.61a1.2,1.2,0,0,1,2.12-.77l89.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,216,201.16V87.84A15.34,15.34,0,0,0,200.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z"/></g></svg>`,
        reference: "",
        reference_hash: "",
        decimals: 24
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ldB9O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//singleton class
parcelHelpers.export(exports, "StakingPoolP1", ()=>StakingPoolP1);
//----------------------------------
// stnear Token smart-contract proxy for
// https://github.com/Narwallets/meta-pool
//----------------------------------
var _conversions = require("../util/conversions");
var _baseSmartContract = require("../wallet-api/base-smart-contract");
var _nearApiJs = require("near-api-js");
var _bnJs = require("bn.js");
var _disconnectedWallet = require("../wallet-api/disconnected-wallet");
class StakingPoolP1 extends (0, _baseSmartContract.SmartContract) {
    /// Returns contract params
    get_contract_params() {
        return this.viewWithoutAccount("get_contract_params", {});
    }
    /// Returns amount of staked NEAR and farmed CHEDDAR of given account.
    status(accountId) {
        if (this.wallet === (0, _disconnectedWallet.disconnectedWallet)) return Promise.resolve([
            "-",
            "-",
            "-"
        ]);
        return this.viewWithoutAccount("status", {
            account_id: accountId || this.wallet.getAccountId()
        });
    }
    /// Checks to see if an account is registered.
    storageBalance(accountId) {
        return this.viewWithoutAccount("storage_balance_of", {
            account_id: accountId || this.wallet.getAccountId()
        });
    }
    /// Registers a user with the farm.
    storageDeposit() {
        return this.call("storage_deposit", {}, (0, _conversions.TGas)(25), "60000000000000000000000");
    }
    /// Registers a user with the farm.
    async storageDepositWithoutSend() {
        return (0, _nearApiJs.transactions).functionCall("storage_deposit", {}, new (0, _bnJs.BN)("200000000000000"), new (0, _bnJs.BN)("60000000000000000000000"));
    }
    /// Stake attached &NEAR and returns total amount of stake.
    stake(amount) {
        return this.call("stake", {}, (0, _conversions.TGas)(25), amount.toString());
    }
    /// Unstakes given amount of $NEAR and transfers it back to the user.
    /// Returns amount of staked tokens left after the call.
    /// Panics if the caller doesn't stake anything or if he doesn't have enough staked tokens.
    /// Requires 1 yNEAR payment for wallet validation.
    unstake(amount) {
        return this.call("unstake", {
            amount: amount
        }, (0, _conversions.TGas)(125), "1");
    }
    // unstake(token: string, amount: string): Promise<void> {
    //     return this.call("unstake", { token: token, amount: amount }, TGas(125), "1")
    // }
    /// Unstakes everything and close the account. Sends all farmed CHEDDAR using a ft_transfer
    /// and all NEAR to the caller.
    /// Returns amount of farmed CHEDDAR.
    /// Panics if the caller doesn't stake anything.
    /// Requires 1 yNEAR payment for wallet validation.
    close() {
        return this.call("close", {}, (0, _conversions.TGas)(75), "1");
    }
    withdraw_crop() {
        return this.call("withdraw_crop", {}, (0, _conversions.TGas)(125));
    }
}

},{"../util/conversions":"ddkdY","../wallet-api/base-smart-contract":"8n580","near-api-js":"ohc3m","bn.js":"VopIn","../wallet-api/disconnected-wallet":"1aCpf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aiwXf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//singleton class
parcelHelpers.export(exports, "StakingPoolP3", ()=>StakingPoolP3);
//----------------------------------
// stnear Token smart-contract proxy for
// https://github.com/Narwallets/meta-pool
//----------------------------------
var _conversions = require("../util/conversions");
var _baseSmartContract = require("../wallet-api/base-smart-contract");
var _bnJs = require("bn.js");
var _nearApiJs = require("near-api-js");
class StakingPoolP3 extends (0, _baseSmartContract.SmartContract) {
    /// Returns contract params
    get_contract_params() {
        return this.viewWithoutAccount("get_contract_params");
    }
    /// Returns amount of staked NEAR and farmed CHEDDAR of given account.
    status(accountId) {
        return this.viewWithoutAccount("status", {
            account_id: accountId || this.wallet.getAccountId()
        });
    }
    /// Checks to see if an account is registered.
    storageBalance(accountId) {
        return this.viewWithoutAccount("storage_balance_of", {
            account_id: accountId || this.wallet.getAccountId()
        });
    }
    /// Registers a user with the farm.
    storageDeposit() {
        return this.call("storage_deposit", {}, (0, _conversions.TGas)(25), "60000000000000000000000");
    }
    /// Registers a user with the farm.
    async storageDepositWithoutSend() {
        return (0, _nearApiJs.transactions).functionCall("storage_deposit", {}, new (0, _bnJs.BN)("200000000000000"), new (0, _bnJs.BN)("60000000000000000000000"));
    }
    /// Stake attached &NEAR and returns total amount of stake.
    ft_transfer_call(amount) {
        return this.call("ft_transfer_call", {}, (0, _conversions.TGas)(25), amount);
    }
    withdraw_nft(receiver_id) {
        return this.call("withdraw_nft", {
            receiver_id: receiver_id
        }, (0, _conversions.TGas)(200), "1"); //one-yocto attached
    }
    /// Unstakes given amount of $NEAR and transfers it back to the user.
    /// Returns amount of staked tokens left after the call.
    /// Panics if the caller doesn't stake anything or if he doesn't have enough staked tokens.
    /// Requires 1 yNEAR payment for wallet validation.
    unstake(token, amount) {
        return this.call("unstake", {
            token: token,
            amount: amount
        }, (0, _conversions.TGas)(125), "1");
    }
    /// Unstakes everything and close the account. Sends all farmed CHEDDAR using a ft_transfer
    /// and all NEAR to the caller.
    /// Returns amount of farmed CHEDDAR.
    /// Panics if the caller doesn't stake anything.
    /// Requires 1 yNEAR payment for wallet validation.
    close() {
        return this.call("close", {}, (0, _conversions.TGas)(75), "1");
    }
    withdraw_crop() {
        return this.call("withdraw_crop", {}, (0, _conversions.TGas)(125));
    }
}

},{"../util/conversions":"ddkdY","../wallet-api/base-smart-contract":"8n580","bn.js":"VopIn","near-api-js":"ohc3m","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dUHnz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//JSON compatible struct returned from get_contract_state
parcelHelpers.export(exports, "P3ContractParams", ()=>P3ContractParams);
parcelHelpers.export(exports, "PoolUserStatusP3", ()=>PoolUserStatusP3);
parcelHelpers.export(exports, "PoolUserStatusP3NFT", ()=>PoolUserStatusP3NFT);
parcelHelpers.export(exports, "TokenParams", ()=>TokenParams);
parcelHelpers.export(exports, "TransferTokenData", ()=>TransferTokenData);
class P3ContractParams {
    constructor(){
    // this.rewards_per_day = this.farming_rate * 60n * 24n
    }
    owner_id = "";
    stake_tokens = [];
    stake_rates = [];
    farm_unit_emission = "";
    farm_tokens = [];
    farm_token_rates = [];
    is_active = false;
    farming_start = 0;
    farming_end = 0;
    total_staked = [];
    total_farmed = [];
    fee_rate = 0;
    accounts_registered = 0;
}
class PoolUserStatusP3 {
    // Amount of each token staked by user
    stake_tokens = [];
    stake = "";
    farmed_units = "";
    // Amount of each token in farm, waiting to be harvested
    farmed_tokens = [];
    cheddy_nft = "";
    timestamp = 0;
    // This constructor should only be used when user is not registered, hence userStatus is null
    constructor(stakeTokensLength = 0, farmTokensLength = 0){
        this.stake_tokens = new Array(stakeTokensLength).fill("0");
        this.farmed_tokens = new Array(farmTokensLength).fill("0");
    }
}
class PoolUserStatusP3NFT {
    // Amount of each token staked by user
    stake_tokens = [];
    stake = "";
    farmed_units = "";
    // Amount of each token in farm, waiting to be harvested
    farmed_tokens = [];
    boost_nfts = "";
    timestamp = 0;
    // This constructor should only be used when user is not registered, hence userStatus is null
    constructor(stakeTokensLength = 0, farmTokensLength = 0){
        this.stake_tokens = new Array(stakeTokensLength).fill([]);
        this.farmed_tokens = new Array(farmTokensLength).fill("0");
    }
}
class TokenParams {
    decimals = "24";
    icon = "";
    name = "";
    reference = "";
    reference_hash = "";
    spec = "";
    symbol = "";
}
class TransferTokenData {
    constructor(contractName, amount){
        this.contractName = contractName;
        this.amount = amount;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lU394":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPoolList", ()=>getPoolList);
var _ = require("..");
var _nep141 = require("../contracts/NEP141");
var _p2Staking = require("../contracts/p2-staking");
var _poolParams = require("../entities/poolParams");
var _poolParamsNFT = require("./poolParamsNFT");
var _poolParamsP3 = require("./poolParamsP3");
let poolList;
async function generatePoolList(wallet) {
    poolList = [];
    let size = (0, _.nearConfig).farms.length;
    for(let i = 0; i < size; i++){
        const index = (0, _.nearConfig).farms[i].index;
        const type = (0, _.nearConfig).farms[i].poolType;
        const poolHtml = new (0, _poolParams.HtmlPoolParams)((0, _.nearConfig).farms[i].poolName);
        const cheddarContractName = new (0, _nep141.NEP141Trait)((0, _.nearConfig).cheddarContractName);
        const tokenContractName = new (0, _nep141.NEP141Trait)((0, _.nearConfig).farms[i].tokenContractName);
        let contract;
        let poolParams;
        if ((0, _.nearConfig).farms[i].poolType == "multiple") // contract = new StakingPoolP3(nearConfig.farms[i].contractName);
        // poolParams = new PoolParamsP3(index, type, poolHtml, contract, cheddarContractName, nearConfig.nftContractAddress, wallet);
        poolParams = new (0, _poolParamsP3.PoolParamsP3)(wallet, (0, _.nearConfig).farms[i], (0, _.nearConfig).nftContractAddress, (0, _.nearConfig).cheddarNFTBaseUrl);
        else if ((0, _.nearConfig).farms[i].poolType == "single") {
            contract = new (0, _p2Staking.StakingPoolP1)((0, _.nearConfig).farms[i].contractName);
            poolParams = new (0, _poolParams.PoolParams)(wallet, (0, _.nearConfig).farms[i], (0, _.nearConfig).cheddarContractName);
        // poolParams = new PoolParams(index, type, poolHtml, contract, cheddarContractName, tokenContractName, new PoolResultParams(), wallet, nearConfig.farms[i].poolName);
        } else if ((0, _.nearConfig).farms[i].poolType == "nft") {
            contract = new (0, _p2Staking.StakingPoolP1)((0, _.nearConfig).farms[i].contractName);
            poolParams = new (0, _poolParamsNFT.PoolParamsNFT)(wallet, (0, _.nearConfig).farms[i], (0, _.nearConfig).cheddarNFTContractName, (0, _.nearConfig).cheddarNFTBaseUrl);
        } else continue;
        await poolParams.setAllExtraData();
        poolList.push(poolParams);
    }
}
async function getPoolList(wallet) {
    if (!poolList || poolList.length == 0) {
        await generatePoolList(wallet);
        await Promise.all(poolList.map(async function(pool) {
            return await pool.stakingContractData.getContractParams();
        }));
        poolList = poolList.sort((a, b)=>b.stakingContractData.getContractParamsNotAsync().farming_end - a.stakingContractData.getContractParamsNotAsync().farming_end);
    }
    return poolList;
}

},{"..":"h7u1C","../contracts/NEP141":"1tjx0","../contracts/p2-staking":"ldB9O","../entities/poolParams":"eP0iK","./poolParamsNFT":"5iRbw","./poolParamsP3":"3DkGx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5iRbw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PoolParamsNFT", ()=>PoolParamsNFT);
var _multipleCall = require("../contracts/multipleCall");
var _nftcontract = require("../contracts/NFTContract");
var _conversions = require("../util/conversions");
var _poolEntitiesNFT = require("./PoolEntitiesNFT");
var _poolParams = require("./poolParams");
class PoolParamsNFT {
    // stakeTokenContractList: TokenContractData[] = [];
    // stakeNFTContractList: NFTContractData[] = [];
    farmTokenContractList = [];
    constructor(wallet, farmData, nftContract, nftBaseUrlForBoosting){
        this.wallet = wallet;
        this.type = farmData.poolType;
        this.poolDescription = farmData.description;
        this.descriptionLink = farmData.descriptionLink;
        this.config = farmData.config ? farmData.config : [];
        this.html = new (0, _poolParams.HtmlPoolParams)(farmData.poolName);
        this.stakingContractData = new (0, _poolEntitiesNFT.StakingContractDataNFT)(wallet, farmData.contractName, farmData.nftBaseUrl);
        // console.log("DContract", nftContract)
        this.nftContractForBoosting = new (0, _nftcontract.NFTContract)(nftContract, nftBaseUrlForBoosting);
        this.nftContractForBoosting.wallet = this.wallet;
    }
    async userHasStakedTokens() {
        const poolUserStatus = await this.stakingContractData.getUserStatus();
        let hasStakedTokens = false;
        for(let i = 0; i < poolUserStatus.stake_tokens.length; i++)hasStakedTokens ||= poolUserStatus.stake_tokens[i].some((token)=>token.length > 0);
        return hasStakedTokens;
    }
    async getPoolName() {
        return this.html.formId;
    }
    async setAllExtraData() {}
    async refreshAllExtraData() {}
    async withdrawBoost() {
        const poolUserStatus = await this.stakingContractData.getUserStatus();
        const tokenId = poolUserStatus.boost_nfts.split("@")[1];
        return this.stakingContractData.contract.unstake(this.nftContractForBoosting.contractId, tokenId);
    }
    async transferCheddar() {
        const contractParams = await this.stakingContractData.getContractParams();
        const cheddarContract = (await this.stakingContractData.getStakeTokenContractList())[0].contract;
        const amount = contractParams.cheddar_rate;
        const promise = cheddarContract.ft_transfer_call_without_send(this.stakingContractData.contract.contractId, amount, "cheddar stake" // required like this from staking contract
        );
        const promiseWithContract = {
            promise,
            contractName: cheddarContract.contractId
        };
        return promiseWithContract;
    }
    transferNFT(stakeNFTContract, contractId, tokenId) {
        const promise = stakeNFTContract.contract.nft_transfer_call_without_send(this.stakingContractData.contract.contractId, tokenId);
        const promiseWithContract = {
            promise,
            contractName: contractId
        };
        return promiseWithContract;
    }
    async stakeUnstakeNFTs(stakeUnstakeNFTsMap) {
        let TXs = [];
        for (let [contractId, stakeUnstakeNFTs] of stakeUnstakeNFTsMap){
            const stakeNFTContractList = await this.stakingContractData.getStakeNFTContractList();
            // FIX This implementation is taking into consideration only one stake NFT by pool, but it should be done to consider many
            const stakeNFTContract = stakeNFTContractList.find((a)=>a.contract.contractId == contractId);
            for(let i = 0; i < stakeUnstakeNFTs.nftsToStake.length; i++){
                TXs.push(await this.transferCheddar());
                const tokenId = stakeUnstakeNFTs.nftsToStake[i];
                TXs.push(this.transferNFT(stakeNFTContract, contractId, tokenId));
            }
            for(let i1 = 0; i1 < stakeUnstakeNFTs.nftsToUnstake.length; i1++){
                const tokenId = stakeUnstakeNFTs.nftsToUnstake[i1];
                const promise = this.stakingContractData.contract.unstake_without_send(contractId, tokenId);
                const promiseWithContract = {
                    promise,
                    contractName: this.stakingContractData.contract.contractId
                };
                TXs.push(promiseWithContract);
            }
        }
        if (TXs.length > 0) await (0, _multipleCall.callMulipleTransactions)(TXs, this.stakingContractData.contract);
    }
    async getStakeTokensDetail() {
        let dataArray = [];
        const contractParams = await this.stakingContractData.getContractParams();
        const stakeTokenContractList = await this.stakingContractData.getStakeTokenContractList();
        for(let i = 0; i < stakeTokenContractList.length; i++){
            const stakeTokenContract = stakeTokenContractList[i];
            const iconData = await this.getIcon(stakeTokenContract);
            const stakeTokenMetadata = await stakeTokenContract.getMetadata();
            const totalStaked = (0, _conversions.convertToDecimals)(contractParams.total_staked[i], stakeTokenMetadata.decimals, 5);
            dataArray.push({
                iconData,
                content: totalStaked
            });
        }
        return dataArray;
    }
    async getRewardsTokenDetail() {
        let dataArray = [];
        const contractParams = await this.stakingContractData.getContractParams();
        const poolUserStatus = await this.stakingContractData.getUserStatus();
        const farmTokenContractList = await this.stakingContractData.getFarmTokenContractList();
        for(let i = 0; i < farmTokenContractList.length; i++){
            const farmTokenContract = farmTokenContractList[i];
            const iconData = await this.getIcon(farmTokenContract);
            const farmTokenMetadata = await farmTokenContract.getMetadata();
            const tokenName = farmTokenMetadata.name;
            // const rewardsPerDayBN = BigInt(contractParams.farm_token_rates[i]) * 60n * 24n
            const rewardsPerDayBN = BigInt(contractParams.farm_unit_emission) * BigInt(contractParams.farm_token_rates[i]) * 60n * 24n / BigInt(10) ** BigInt(24);
            const rewardsPerDay = (0, _conversions.convertToDecimals)(rewardsPerDayBN, farmTokenMetadata.decimals, 5);
            const totalRewards = (0, _conversions.convertToDecimals)(contractParams.total_farmed[i], farmTokenMetadata.decimals, 5);
            const userUnclaimedRewards = (0, _conversions.convertToDecimals)(poolUserStatus.farmed_tokens[i], farmTokenMetadata.decimals, 5);
            dataArray.push({
                iconData,
                tokenName,
                rewardsPerDayBN,
                rewardsPerDay,
                totalRewards,
                userUnclaimedRewards
            });
        }
        return dataArray;
    }
    async getIcon(contractData) {
        const metadata = await contractData.getMetadata();
        const src = metadata.icon ? metadata.icon : metadata.name;
        return {
            isSvg: src.includes("<svg"),
            src: src,
            tokenName: metadata.name ? metadata.name : "NoName"
        };
    }
    async getRewardTokenIconData() {
        let dataArray = [];
        const farmTokenContractList = await this.stakingContractData.getFarmTokenContractList();
        for(let i = 0; i < farmTokenContractList.length; i++){
            const farmTokenContract = farmTokenContractList[i];
            const farmTokenMetadata = await farmTokenContract.getMetadata();
            const src = farmTokenMetadata.icon ? farmTokenMetadata.icon : farmTokenMetadata.name;
            const data = {
                isSvg: src.includes("<svg"),
                src: src,
                tokenName: farmTokenMetadata.name ? farmTokenMetadata.name : "NoName"
            };
            dataArray.push(data);
        }
        return dataArray;
    }
    async getWalletAvailable() {
        let walletAvailable = [];
        const stakeTokenContractList = await this.stakingContractData.getStakeTokenContractList();
        for(let i = 0; i < stakeTokenContractList.length; i++){
            const contractData = stakeTokenContractList[i];
            const balance = await contractData.getBalance();
            walletAvailable.push(balance);
        }
        return walletAvailable;
    }
}

},{"../contracts/multipleCall":"khWvf","../contracts/NFTContract":"joRxf","../util/conversions":"ddkdY","./PoolEntitiesNFT":"hfRpQ","./poolParams":"eP0iK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"khWvf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "callMulipleTransactions", ()=>callMulipleTransactions);
var _nearApiJs = require("near-api-js");
var _borsh = require("borsh");
var _ = require("..");
async function callMulipleTransactions(txPromiseArray, contract) {
    let promises = [];
    for(let i = 0; i < txPromiseArray.length; i++)promises.push(txPromiseArray[i].promise);
    const resultPromises = await Promise.all(promises);
    let transactions = [];
    for(let i1 = 0; i1 < resultPromises.length; i1++)transactions.push(await makeTransaction(txPromiseArray[i1].contractName, [
        resultPromises[i1]
    ], contract));
    await contract.nearWallet.requestSignTransactions(transactions, window.location.href);
}
async function makeTransaction(receiverId, actions, contract, nonceOffset = 1) {
    const [accessKey, block] = await Promise.all([
        contract.account.accessKeyForTransaction(receiverId, actions),
        (0, _.near).connection.provider.block({
            finality: "final"
        })
    ]);
    if (!accessKey) throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);
    const blockHash = (0, _borsh.baseDecode)(block.header.hash);
    const publicKey = (0, _nearApiJs.utils).PublicKey.from(accessKey.public_key);
    const nonce = accessKey.access_key.nonce + nonceOffset;
    return (0, _nearApiJs.transactions).createTransaction(contract.wallet.getAccountId(), publicKey, receiverId, nonce, actions, blockHash);
}

},{"near-api-js":"ohc3m","borsh":"4JCmN","..":"h7u1C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"joRxf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// export const nftBaseUrl = "https://nftstorage.link/ipfs/bafybeicoln5rvccttgypzo26irjlskslnfynkzig6bowpsj6ay45geeice/"
parcelHelpers.export(exports, "NFTContract", ()=>NFTContract);
//JSON compatible struct ft_metadata
var _baseSmartContract = require("../wallet-api/base-smart-contract");
var _nearApiJs = require("near-api-js");
var _conversions = require("../util/conversions");
var _bnJs = require("bn.js");
class NFTContract extends (0, _baseSmartContract.SmartContract) {
    constructor(contractId, baseUrl){
        super(contractId);
        this.contractId = contractId;
        this.baseUrl = baseUrl;
    }
    async nft_transfer_call(receiver_id, token_id) {
        return this.call("nft_transfer_call", {
            receiver_id: receiver_id,
            token_id: token_id,
            msg: "to boost"
        }, (0, _conversions.TGas)(200), "1"); //one-yocto attached
    }
    async nft_transfer_call_without_send(receiver_id, token_id) {
        return _nearApiJs.transactions.functionCall("nft_transfer_call", {
            receiver_id,
            token_id,
            msg: "to farm"
        }, new (0, _bnJs.BN)((0, _conversions.TGas)(80)), new (0, _bnJs.BN)(1));
    }
    async nft_tokens_for_owner(accountId) {
        return this.view("nft_tokens_for_owner", {
            account_id: accountId,
            from_index: "0",
            "limit": 9999
        });
    }
    async nft_metadata() {
        return this.viewWithoutAccount("nft_metadata");
    }
    async nft_token(tokenId) {
        return this.viewWithoutAccount("nft_token", {
            token_id: tokenId
        });
    }
}

},{"../wallet-api/base-smart-contract":"8n580","near-api-js":"ohc3m","../util/conversions":"ddkdY","bn.js":"VopIn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hfRpQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StakingContractDataNFT", ()=>StakingContractDataNFT);
parcelHelpers.export(exports, "NFTContractData", ()=>NFTContractData);
var _nftcontract = require("../contracts/NFTContract");
var _poolEntities = require("./PoolEntities");
var _nftStaking = require("../contracts/nft-staking");
var _p3Structures = require("../contracts/p3-structures");
async function getNFTContractList(wallet, contractNameArray, nftBaseUrl) {
    let NFTContractList = [];
    for(let i = 0; i < contractNameArray.length; i++){
        const NFTContractName = contractNameArray[i];
        NFTContractList.push(new NFTContractData(wallet, NFTContractName, nftBaseUrl[i], ""));
    }
    return NFTContractList;
}
class StakingContractDataNFT {
    stakeTokenContractList = [];
    stakeNFTContractList = [];
    farmTokenContractList = [];
    constructor(wallet, contractId, nftBaseUrl){
        this.contract = new (0, _nftStaking.StakingPoolNFT)(contractId);
        this.contract.wallet = wallet;
        this.nftBaseUrl = nftBaseUrl;
        this.refreshData();
        this.stakeTokenContractListPromise = this.getStakeTokenContractListPromise();
        this.stakeNFTContractListPromise = this.getStakeNFTContractListPromise(nftBaseUrl);
    }
    refreshData() {
        this.contractParamsPromise = this.contract.get_contract_params();
        if (this.contract.wallet.isConnected()) this.userStatusPromise = this.contract.status();
        this.contractParams = undefined;
        this.userStatus = undefined;
    }
    async getContractParams() {
        if (this.contractParams === undefined) this.contractParams = await this.contractParamsPromise;
        return this.contractParams;
    }
    getContractParamsNotAsync() {
        return this.contractParams;
    }
    async getUserStatus() {
        if (this.userStatus === undefined) {
            this.userStatus = await this.userStatusPromise;
            if (this.userStatus == null) {
                const contractParams = await this.getContractParams();
                this.userStatus = new (0, _p3Structures.PoolUserStatusP3NFT)(contractParams.stake_tokens.length, contractParams.farm_tokens.length);
            }
        }
        return this.userStatus;
    }
    async getStakeTokenContractListPromise() {
        const contractParams = await this.getContractParams();
        // On NFT staking contract, cheddar is always the staked token, besides the NFT's
        return (0, _poolEntities.getTokenContractList)(this.contract.wallet, [
            contractParams.cheddar
        ]);
    }
    async getStakeNFTContractListPromise(nftBaseUrl) {
        const contractParams = await this.getContractParams();
        // On NFT staking contract, cheddar is always the staked token, besides the NFT's
        return getNFTContractList(this.contract.wallet, contractParams.stake_tokens, nftBaseUrl);
    }
    async getStakeTokenContractList() {
        if (this.stakeTokenContractList.length == 0) this.stakeTokenContractList = await this.stakeTokenContractListPromise;
        return this.stakeTokenContractList;
    }
    async getFarmTokenContractList() {
        if (this.farmTokenContractList.length == 0) {
            const contractParams = await this.getContractParams();
            this.farmTokenContractList = await (0, _poolEntities.getTokenContractList)(this.contract.wallet, contractParams.farm_tokens);
        }
        return this.farmTokenContractList;
    }
    async getStakeNFTContractList() {
        if (this.stakeNFTContractList.length == 0) this.stakeNFTContractList = await this.stakeNFTContractListPromise;
        return this.stakeNFTContractList;
    }
}
class NFTContractData {
    constructor(wallet, contractId, nftBaseUrl, poolName = ""){
        this.wallet = wallet;
        this.contract = new (0, _nftcontract.NFTContract)(contractId, nftBaseUrl);
        this.contract.wallet = wallet;
        if (this.wallet.isConnected()) {
            this.tokensForOwnerPromise = this.contract.nft_tokens_for_owner(wallet.getAccountId());
            this.metadata = this.contract.nft_metadata();
        }
    // this.balancePromise = this.contract.ft_balance_of(wallet.getAccountId())
    }
    async getTokensForOwner() {
        if (!this.tokensForOwner) this.tokensForOwner = await this.tokensForOwnerPromise;
        return this.tokensForOwner;
    }
    getTokensForOwnerSync() {
        return this.tokensForOwner;
    }
    refreshData() {
        this.tokensForOwner = undefined;
        this.tokensForOwnerPromise = this.contract.nft_tokens_for_owner(this.wallet.getAccountId());
    }
    async getMetadata() {
        if (!this.metadata) this.metadata = this.contract.nft_metadata();
        return this.metadata;
    }
}

},{"../contracts/NFTContract":"joRxf","./PoolEntities":"5pJaw","../contracts/nft-staking":"hlgoD","../contracts/p3-structures":"dUHnz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hlgoD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//singleton class
parcelHelpers.export(exports, "StakingPoolNFT", ()=>StakingPoolNFT);
//----------------------------------
// stnear Token smart-contract proxy for
// https://github.com/Narwallets/meta-pool
//----------------------------------
var _conversions = require("../util/conversions");
var _baseSmartContract = require("../wallet-api/base-smart-contract");
var _nearApiJs = require("near-api-js");
var _bnJs = require("bn.js");
class StakingPoolNFT extends (0, _baseSmartContract.SmartContract) {
    /// Returns contract params
    get_contract_params() {
        return this.viewWithoutAccount("get_contract_params");
    }
    /// Returns amount of staked NEAR and farmed CHEDDAR of given account.
    status(accountId) {
        return this.viewWithoutAccount("status", {
            account_id: accountId || this.wallet.getAccountId()
        });
    }
    /// Checks to see if an account is registered.
    storageBalance(accountId) {
        return this.viewWithoutAccount("storage_balance_of", {
            account_id: accountId || this.wallet.getAccountId()
        });
    }
    /// Registers a user with the farm.
    storageDeposit() {
        return this.call("storage_deposit", {}, (0, _conversions.TGas)(25), "60000000000000000000000");
    }
    /// Registers a user with the farm.
    async storageDepositWithoutSend() {
        return (0, _nearApiJs.transactions).functionCall("storage_deposit", {}, new (0, _bnJs.BN)("200000000000000"), new (0, _bnJs.BN)("60000000000000000000000"));
    }
    /// Stake attached &NEAR and returns total amount of stake.
    ft_transfer_call(amount) {
        return this.call("ft_transfer_call", {}, (0, _conversions.TGas)(25), amount);
    }
    withdraw_nft(receiver_id) {
        return this.call("withdraw_nft", {
            receiver_id: receiver_id
        }, (0, _conversions.TGas)(200), "1"); //one-yocto attached
    }
    async unstake_without_send(nft_contract_id, token_id) {
        return _nearApiJs.transactions.functionCall("unstake", {
            nft_contract_id,
            token_id
        }, new (0, _bnJs.BN)((0, _conversions.TGas)(200)), new (0, _bnJs.BN)(1));
    }
    /// Unstakes given amount of $NEAR and transfers it back to the user.
    /// Returns amount of staked tokens left after the call.
    /// Panics if the caller doesn't stake anything or if he doesn't have enough staked tokens.
    /// Requires 1 yNEAR payment for wallet validation.
    unstake(nft_contract_id, token_id) {
        return this.call("withdraw_boost_nft", {}, (0, _conversions.TGas)(125), "1");
    }
    /// Unstakes everything and close the account. Sends all farmed CHEDDAR using a ft_transfer
    /// and all NEAR to the caller.
    /// Returns amount of farmed CHEDDAR.
    /// Panics if the caller doesn't stake anything.
    /// Requires 1 yNEAR payment for wallet validation.
    close() {
        return this.call("close", {}, (0, _conversions.TGas)(75), "1");
    }
    withdraw_crop() {
        return this.call("withdraw_crop", {}, (0, _conversions.TGas)(125));
    }
}

},{"../util/conversions":"ddkdY","../wallet-api/base-smart-contract":"8n580","near-api-js":"ohc3m","bn.js":"VopIn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3DkGx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//JSON compatible struct returned from get_contract_state
parcelHelpers.export(exports, "HtmlPoolParams", ()=>HtmlPoolParams);
parcelHelpers.export(exports, "PoolUserStatus", ()=>PoolUserStatus);
parcelHelpers.export(exports, "PoolParamsP3", ()=>PoolParamsP3);
var _multipleCall = require("../contracts/multipleCall");
var _nftcontract = require("../contracts/NFTContract");
var _conversions = require("../util/conversions");
var _poolEntities = require("./PoolEntities");
class HtmlPoolParams {
    constructor(id){
        this.id = id + "-container";
        this.formId = id;
    }
}
class PoolUserStatus {
    // All the numbers that are bigint are expected to be without any decimal points, and are converted when needed
    staked = [];
    farmedUnits = "0";
    farmed = [];
    // computed holds an integer number with no decimal places holding the info about the computed cheddar rewars calculated
    previous_timestamp = 0;
    tokenDecimals = 0;
    accName = "";
    cheddy_nft = "";
    constructor(stakedTokensLength, farmedTokensLength){
        this.staked = new Array(stakedTokensLength).fill("0");
        this.farmed = new Array(farmedTokensLength).fill("0");
    }
    getDisplayableAccountName() {
        return this.accName.length > 22 ? this.accName.slice(0, 10) + ".." + this.accName.slice(-10) : this.accName;
    }
    addStaked(amountArray) {
        for(let i = 0; i < amountArray.length; i++)this.staked[i] = (BigInt(this.staked[i]) + amountArray[i]).toString();
    }
}
class PoolParamsP3 {
    stakeTokenContractList = [];
    farmTokenContractList = [];
    constructor(wallet, farmData, nftContract, nftBaseUrl){
        this.wallet = wallet;
        this.type = farmData.poolType;
        this.config = farmData.config ? farmData.config : [];
        this.poolDescription = farmData.description;
        this.descriptionLink = farmData.descriptionLink;
        this.html = new HtmlPoolParams(farmData.poolName);
        this.stakingContractData = new (0, _poolEntities.StakingContractDataP3)(wallet, farmData.contractName);
        this.nftContractForBoosting = new (0, _nftcontract.NFTContract)(nftContract, nftBaseUrl);
        this.nftContractForBoosting.wallet = this.wallet;
    }
    async userHasStakedTokens() {
        const poolUserStatus = await this.stakingContractData.getUserStatus();
        let hasStakedTokens = false;
        for(let i = 0; i < poolUserStatus.stake_tokens.length; i++)hasStakedTokens ||= BigInt(poolUserStatus.stake_tokens[i]) > 0n;
        return hasStakedTokens;
    }
    async getPoolName() {
        let tokenNames = [];
        const stakeTokenContractList = await this.stakingContractData.getStakeTokenContractList();
        // It was requested that cheddar goes last
        let hasCheddar = false;
        let cheddarSymbol;
        for(let i = 0; i < stakeTokenContractList.length; i++){
            const tokenContractData = stakeTokenContractList[i];
            const tokenMetadata = await tokenContractData.getMetadata();
            const isCheddar = tokenMetadata.symbol.toUpperCase() == "CHEDDAR";
            hasCheddar = hasCheddar || isCheddar;
            if (!isCheddar) tokenNames.push(tokenMetadata.symbol);
            else cheddarSymbol = tokenMetadata.symbol;
        }
        if (hasCheddar) tokenNames.push(cheddarSymbol);
        const names = tokenNames.join(" + ");
        if (names.length > 20) return names.substring(0, 7) + "..." + names.substring(names.length - 7);
        else return names;
    }
    async setAllExtraData() {}
    async refreshAllExtraData() {}
    async stake(amounts) {
        let TXs = [];
        const stakeTokenContractList = await this.stakingContractData.getStakeTokenContractList();
        for(let i = 0; i < stakeTokenContractList.length; i++){
            const stakeTokenContract = stakeTokenContractList[i].contract;
            if (amounts[i] != 0n) {
                const promise = stakeTokenContract.ft_transfer_call_without_send(this.stakingContractData.contract.contractId, amounts[i].toString());
                const promiseWithContract = {
                    promise,
                    contractName: stakeTokenContract.contractId
                };
                TXs.push(promiseWithContract);
            }
        }
        await (0, _multipleCall.callMulipleTransactions)(TXs, this.stakingContractData.contract);
    }
    async unstake(amounts) {
        let TXs = [];
        const stakeTokenContractList = await this.stakingContractData.getStakeTokenContractList();
        for(let i = 0; i < stakeTokenContractList.length; i++)if (amounts[i] != 0n) {
            const stakeContract = stakeTokenContractList[i].contract;
            const promise = stakeContract.unstake_without_send(stakeContract.contractId, amounts[i].toString());
            const promiseWithContract = {
                promise,
                contractName: this.stakingContractData.contract.contractId
            };
            TXs.push(promiseWithContract);
        }
        await (0, _multipleCall.callMulipleTransactions)(TXs, this.stakingContractData.contract);
    }
    async getStakeTokensDetail() {
        let dataArray = [];
        const contractParams = await this.stakingContractData.getContractParams();
        const stakeTokenContractList = await this.stakingContractData.getStakeTokenContractList();
        for(let i = 0; i < stakeTokenContractList.length; i++){
            const stakeTokenContract = stakeTokenContractList[i];
            const iconData = await this.getIcon(stakeTokenContract);
            const stakeTokenMetadata = await stakeTokenContract.getMetadata();
            const totalStaked = (0, _conversions.convertToDecimals)(contractParams.total_staked[i], stakeTokenMetadata.decimals, 5);
            dataArray.push({
                iconData,
                content: totalStaked
            });
        }
        return dataArray;
    }
    async getRewardsTokenDetail() {
        let dataArray = [];
        const contractParams = await this.stakingContractData.getContractParams();
        const poolUserStatus = await this.stakingContractData.getUserStatus();
        const farmTokenContractList = await this.stakingContractData.getFarmTokenContractList();
        for(let i = 0; i < farmTokenContractList.length; i++){
            const farmTokenContract = farmTokenContractList[i];
            const iconData = await this.getIcon(farmTokenContract);
            const farmTokenMetadata = await farmTokenContract.getMetadata();
            const tokenName = farmTokenMetadata.name;
            // const rewardsPerDayBN = BigInt(contractParams.farm_token_rates[i]) * 60n * 24n
            const rewardsPerDayBN = BigInt(contractParams.farm_unit_emission) * BigInt(contractParams.farm_token_rates[i]) * 60n * 24n / BigInt(10) ** BigInt(24);
            const rewardsPerDay = (0, _conversions.convertToDecimals)(rewardsPerDayBN, farmTokenMetadata.decimals, 5);
            const totalRewards = (0, _conversions.convertToDecimals)(contractParams.total_farmed[i], farmTokenMetadata.decimals, 5);
            const userUnclaimedRewards = (0, _conversions.convertToDecimals)(poolUserStatus.farmed_tokens[i], farmTokenMetadata.decimals, 5);
            dataArray.push({
                iconData,
                tokenName,
                rewardsPerDayBN,
                rewardsPerDay,
                totalRewards,
                userUnclaimedRewards
            });
        }
        return dataArray;
    }
    async getIcon(contractData) {
        const metadata = await contractData.getMetadata();
        const src = metadata.icon ? metadata.icon : metadata.name;
        return {
            isSvg: src.includes("<svg"),
            src: src,
            tokenName: metadata.name ? metadata.name : "NoName"
        };
    }
    async getRewardTokenIconData() {
        let dataArray = [];
        const farmTokenContractList = await this.stakingContractData.getFarmTokenContractList();
        for(let i = 0; i < farmTokenContractList.length; i++){
            const farmTokenContract = farmTokenContractList[i];
            const farmTokenMetadata = await farmTokenContract.getMetadata();
            const src = farmTokenMetadata.icon ? farmTokenMetadata.icon : farmTokenMetadata.name;
            const data = {
                isSvg: src.includes("<svg"),
                src: src,
                tokenName: farmTokenMetadata.name ? farmTokenMetadata.name : "NoName"
            };
            dataArray.push(data);
        }
        return dataArray;
    }
    async getWalletAvailable() {
        let walletAvailable = [];
        const stakeTokenContractList = await this.stakingContractData.getStakeTokenContractList();
        for(let i = 0; i < stakeTokenContractList.length; i++){
            const contractData = stakeTokenContractList[i];
            const balance = await contractData.getBalance();
            walletAvailable.push(balance);
        }
        return walletAvailable;
    }
}

},{"../contracts/multipleCall":"khWvf","../contracts/NFTContract":"joRxf","../util/conversions":"ddkdY","./PoolEntities":"5pJaw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8iDnh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTokenData", ()=>getTokenData);
parcelHelpers.export(exports, "getTokenDataArray", ()=>getTokenDataArray);
var _config = require("../config");
let tokenDataArray;
let testTokensSymbols = [
    "afi-tt",
    "gua"
];
async function setAllTokensData() {
    const url = "https://api.stats.ref.finance/api/top-tokens";
    const response = await fetch(url);
    const errorMessage = "We are experiencing issues with the Ref Price Oracle, please try again in a bit.";
    const json = await response.json();
    tokenDataArray = json;
}
async function getTokenData(token, reloadData = false) {
    if (!tokenDataArray || reloadData) await setAllTokensData();
    return getPriceWithData(token);
}
function getPriceWithData(tokenSymbol) {
    tokenSymbol = tokenSymbol.toLowerCase();
    //@ts-ignore
    if ((0, _config.ENV) == "testnet" && testTokensSymbols.includes(tokenSymbol)) // AFI-TT doesn't exists in mainnet so this is a patch for testing purposes, selecting the token
    // PEM arbitrarily
    tokenSymbol = "pem".toLowerCase();
    if (tokenSymbol == "near" || tokenSymbol == "nearcon") tokenSymbol = "wnear";
    let output = undefined;
    tokenDataArray.forEach((tokenData)=>{
        if (tokenData.symbol.toLowerCase() === tokenSymbol) output = tokenData;
    });
    if (output !== undefined) return output;
    throw Error(`Token with symbol ${tokenSymbol} not found`);
}
async function getTokenDataArray(tokenArray, reloadData = false) {
    if (!tokenDataArray || reloadData) await setAllTokensData();
    // const allTokenData = await setAllTokensData()
    let output = new Map();
    tokenArray.forEach((tokenSymbol)=>{
        tokenSymbol = tokenSymbol.toLowerCase();
        output.set(tokenSymbol, getPriceWithData(tokenSymbol));
    });
    return output;
}

},{"../config":"gTux2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d7k99":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "newNFT", ()=>newNFT);
function newNFT(tokenId, baseUrl, contractId) {
    return {
        contract_id: contractId,
        base_url: baseUrl,
        token_id: tokenId,
        owner_id: "",
        metadata: {
            title: "",
            description: "",
            media: tokenId + ".png",
            media_hash: "",
            copies: null,
            issued_at: "",
            expires_at: "",
            starts_at: "",
            updated_at: "",
            extra: "",
            reference: "",
            reference_hash: ""
        },
        approved_account_ids: {}
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aY54o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initButton", ()=>initButton);
var _document = require("../document");
var pointsA = [], pointsB = [], $canvas = null, canvas = null, context = null, vars = null, points = 8, viscosity = 20, mouseDist = 70, damping = 0.05, showIndicators = false, mouseX = 0, mouseY = 0, relMouseX = 0, relMouseY = 0, mouseLastX = 0, mouseLastY = 0, mouseDirectionX = 0, mouseDirectionY = 0, mouseSpeedX = 0, mouseSpeedY = 0;
function mouseDirection(e) {
    if (mouseX < e.pageX) mouseDirectionX = 1;
    else if (mouseX > e.pageX) mouseDirectionX = -1;
    else mouseDirectionX = 0;
    if (mouseY < e.pageY) mouseDirectionY = 1;
    else if (mouseY > e.pageY) mouseDirectionY = -1;
    else mouseDirectionY = 0;
    mouseX = e.pageX;
    mouseY = e.pageY;
    relMouseX = mouseX - $canvas?.getBoundingClientRect().left;
    relMouseY = mouseY - $canvas?.getBoundingClientRect().top;
}
document.addEventListener("mousemove", mouseDirection);
function mouseSpeed() {
    mouseSpeedX = mouseX - mouseLastX;
    mouseSpeedY = mouseY - mouseLastY;
    mouseLastX = mouseX;
    mouseLastY = mouseY;
    setTimeout(mouseSpeed, 50);
}
function initButton() {
    // Get button
    mouseSpeed();
    var button = (0, _document.qs)(".btn-liquid");
    //I use this number after getting the button with to make the canva content visually bigger and work properly. In CSS use transform: translateX(-number/2) to center the content
    var buttonWidth = button.getBoundingClientRect().width + 22;
    var buttonHeight = button.getBoundingClientRect().height;
    // Create canvas
    $canvas = document.createElement("canvas");
    button.append($canvas);
    // canvas = $canvas.get(0);
    $canvas.width = buttonWidth + 30;
    $canvas.height = buttonHeight + 50;
    context = $canvas.getContext("2d");
    // Add points
    var x = buttonHeight / 2;
    for(var j = 1; j < points; j++)addPoints(x + (buttonWidth - buttonHeight) / points * j, 0);
    addPoints(buttonWidth - buttonHeight / 5, 0);
    addPoints(buttonWidth + buttonHeight / 10, buttonHeight / 2);
    addPoints(buttonWidth - buttonHeight / 5, buttonHeight);
    for(var j = points - 1; j > 0; j--)addPoints(x + (buttonWidth - buttonHeight) / points * j, buttonHeight);
    addPoints(buttonHeight / 5, buttonHeight);
    addPoints(-buttonHeight / 10, buttonHeight / 2);
    addPoints(buttonHeight / 5, 0);
    // addPoints(x, 0);
    // addPoints(0, buttonHeight/2);
    // addPoints(0, buttonHeight/2);
    // addPoints(buttonHeight/4, 0);
    // Start render
    renderCanvas();
}
/**
	 * Add points
	 */ function addPoints(x, y) {
    pointsA.push(new Point(x, y, 1));
    pointsB.push(new Point(x, y, 2));
}
class Point {
    constructor(x, y, level){
        this.x = this.ix = 25 + x;
        this.y = this.iy = 25 + y;
        this.vx = 0;
        this.vy = 0;
        this.cx1 = 0;
        this.cy1 = 0;
        this.cx2 = 0;
        this.cy2 = 0;
        this.level = level;
    }
    move() {
        this.vx += (this.ix - this.x) / (viscosity * this.level);
        this.vy += (this.iy - this.y) / (viscosity * this.level);
        var dx = this.ix - relMouseX, dy = this.iy - relMouseY;
        var relDist = 1 - Math.sqrt(dx * dx + dy * dy) / mouseDist;
        // Move x
        if (mouseDirectionX > 0 && relMouseX > this.x || mouseDirectionX < 0 && relMouseX < this.x) {
            if (relDist > 0 && relDist < 1) this.vx = mouseSpeedX / 4 * relDist;
        }
        this.vx *= 1 - damping;
        this.x += this.vx;
        // Move y
        if (mouseDirectionY > 0 && relMouseY > this.y || mouseDirectionY < 0 && relMouseY < this.y) {
            if (relDist > 0 && relDist < 1) this.vy = mouseSpeedY / 4 * relDist;
        }
        this.vy *= 1 - damping;
        this.y += this.vy;
    }
}
// function Point(x: number, y: number, level: number) {
//     this.x = this.ix = 50+x;
//     this.y = this.iy = 50+y;
//     this.vx = 0;
//     this.vy = 0;
//     this.cx1 = 0;
//     this.cy1 = 0;
//     this.cx2 = 0;
//     this.cy2 = 0;
//     this.level = level;
//   }
// Point.prototype.move = function() {
//     this.vx += (this.ix - this.x) / (viscosity*this.level);
//     this.vy += (this.iy - this.y) / (viscosity*this.level);
//     var dx = this.ix - relMouseX,
//         dy = this.iy - relMouseY;
//     var relDist = (1-Math.sqrt((dx * dx) + (dy * dy))/mouseDist);
//     // Move x
//     if ((mouseDirectionX > 0 && relMouseX > this.x) || (mouseDirectionX < 0 && relMouseX < this.x)) {
//         if (relDist > 0 && relDist < 1) {
//             this.vx = (mouseSpeedX / 4) * relDist;
//         }
//     }
//     this.vx *= (1 - damping);
//     this.x += this.vx;
//     // Move y
//     if ((mouseDirectionY > 0 && relMouseY > this.y) || (mouseDirectionY < 0 && relMouseY < this.y)) {
//         if (relDist > 0 && relDist < 1) {
//             this.vy = (mouseSpeedY / 4) * relDist;
//         }
//     }
//     this.vy *= (1 - damping);
//     this.y += this.vy;
// };
/**
	 * Render canvas
	 */ function renderCanvas() {
    // rAF
    var rafID = requestAnimationFrame(renderCanvas);
    // Clear scene
    context.clearRect(0, 0, $canvas.getBoundingClientRect().width, $canvas.getBoundingClientRect().height);
    context.fillStyle = "transparent";
    context.fillRect(0, 0, $canvas.getBoundingClientRect().width, $canvas.getBoundingClientRect().height);
    // Move points
    for(var i = 0; i <= pointsA.length - 1; i++){
        pointsA[i].move();
        pointsB[i].move();
    }
    var canvasRect = $canvas.getBoundingClientRect();
    var canvasOffset = {
        top: canvasRect.top + window.scrollY,
        left: canvasRect.left + window.scrollX
    };
    // Create dynamic gradient
    var gradientX = Math.min(Math.max(mouseX - canvasOffset.left, 0), $canvas.getBoundingClientRect().width);
    var gradientY = Math.min(Math.max(mouseY - canvasOffset.top, 0), $canvas.getBoundingClientRect().height);
    var distance = Math.sqrt(Math.pow(gradientX - $canvas.getBoundingClientRect().width / 2, 2) + Math.pow(gradientY - $canvas.getBoundingClientRect().height / 2, 2)) / Math.sqrt(Math.pow($canvas.getBoundingClientRect().width / 2, 2) + Math.pow($canvas.getBoundingClientRect().height / 2, 2));
    var gradient = context.createRadialGradient(gradientX, gradientY, 300 + 300 * distance, gradientX, gradientY, 0);
    gradient.addColorStop(0, "#F9BA37");
    gradient.addColorStop(1, "#FFD262");
    // Draw shapes
    var groups = [
        pointsA,
        pointsB
    ];
    for(var j = 0; j <= 1; j++){
        var points1 = groups[j];
        if (j == 0) // Background style
        context.fillStyle = "#8542EB";
        else // Foreground style
        context.fillStyle = gradient;
        context.beginPath();
        context.moveTo(points1[0].x, points1[0].y);
        for(var i = 0; i < points1.length; i++){
            var p = points1[i];
            var nextP = points1[i + 1];
            var val = 16.56854249493;
            if (nextP != undefined) {
                p.cx1 = (p.x + nextP.x) / 2;
                p.cy1 = (p.y + nextP.y) / 2;
                p.cx2 = (p.x + nextP.x) / 2;
                p.cy2 = (p.y + nextP.y) / 2;
                context.bezierCurveTo(p.x, p.y, p.cx1, p.cy1, p.cx1, p.cy1);
            } else {
                nextP = points1[0];
                p.cx1 = (p.x + nextP.x) / 2;
                p.cy1 = (p.y + nextP.y) / 2;
                context.bezierCurveTo(p.x, p.y, p.cx1, p.cy1, p.cx1, p.cy1);
            }
        }
        context.fill();
    }
    if (showIndicators) {
        // Draw points
        context.fillStyle = "#000";
        context.beginPath();
        for(var i = 0; i < pointsA.length; i++){
            var p = pointsA[i];
            context.rect(p.x - 1, p.y - 1, 2, 2);
        }
        context.fill();
        // Draw controls
        context.fillStyle = "#f00";
        context.beginPath();
        for(var i = 0; i < pointsA.length; i++){
            var p = pointsA[i];
            context.rect(p.cx1 - 1, p.cy1 - 1, 2, 2);
            context.rect(p.cx2 - 1, p.cy2 - 1, 2, 2);
        }
        context.fill();
    }
} // Init
 // initButton();

},{"../document":"jRQBA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"afsAb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConfettiButton", ()=>ConfettiButton);
// ammount to add on each button press
const confettiCount = 20;
const sequinCount = 10;
// "physics" variables
const gravityConfetti = 0.3;
const gravitySequins = 0.55;
const dragConfetti = 0.075;
const dragSequins = 0.02;
const terminalVelocity = 3;
// init other global elements
// export function init() {
//   const harvestSection: Element[] = Array.from(qsa(".harvest-section"))
//   for(let elem of harvestSection) {
//     const confettiButton: Element = elem.querySelector(".confetti-button")!
//     const canvas: Element = elem.querySelector("#new-confetti-button_canvas")!
//   }
//   button = document.querySelector('#tt-container .confetti-button') as HTMLButtonElement
//   disabled = false as boolean
//   canvas = document.querySelector('#tt-container #new-confetti-button_canvas') as HTMLCanvasElement
//   ctx = canvas.getContext('2d')
//   canvas.width = window.innerWidth
//   canvas.height = window.innerHeight
//   // Set up button text transition timings on page load
//   let textElements = button.querySelectorAll('.button-text') as NodeListOf<HTMLElement>
//   textElements.forEach((element) => {
//     let characters = element.innerText.split('')
//     let characterHTML = ''
//     characters.forEach((letter: string, index: number) => {
//       characterHTML += `<span class="char${index}" style="--d:${index * 30}ms; --dr:${(characters.length - index - 1) * 30}ms;">${letter}</span>`
//     })
//     element.innerHTML = characterHTML
//   })
//   // kick off the render loop
//   // initBurst()
//   render()
// }
let button = document.querySelector(".confetti-button");
var disabled = false;
let canvas;
let ctx;
// colors, back side is darker for confetti flipping
const colors = [
    {
        front: "#7b5cff",
        back: "#6245e0"
    },
    {
        front: "#b3c7ff",
        back: "#8fa5e5"
    },
    {
        front: "#5c86ff",
        back: "#345dd1"
    } // Darker Blue
];
// helper function to pick a random number within a range
const randomRange = (min, max)=>Math.random() * (max - min) + min;
// helper function to get initial velocities for confetti
// this weighted spread helps the confetti look more realistic
const initConfettoVelocity = (xRange, yRange)=>{
    const x = randomRange(xRange[0], xRange[1]);
    const range = yRange[1] - yRange[0] + 1;
    let y = yRange[1] - Math.abs(randomRange(0, range) + randomRange(0, range) - range);
    if (y >= yRange[1] - 1) // Occasional confetto goes higher than the max
    y += Math.random() < .25 ? randomRange(1, 3) : 0;
    return {
        x: x,
        y: -y
    };
};
class ConfettiButton {
    // add Confetto/Sequin objects to arrays to draw them
    confetti = [];
    sequins = [];
    constructor(pool){
        this.confettiButton = pool.querySelector(".confetti-button");
        this.canvas = pool.querySelector("#new-confetti-button_canvas");
        // resize listenter
        window.addEventListener("resize", ()=>{
            this.resizeCanvas();
        });
    }
    // add elements to arrays to be drawn
    initBurst() {
        for(let i = 0; i < confettiCount; i++)this.confetti.push(new Confetto(this.confettiButton, this.canvas));
        for(let i1 = 0; i1 < sequinCount; i1++)this.sequins.push(new Sequin(this.confettiButton, this.canvas));
    }
    // draws the elements on the canvas
    render(confettiButton, canvas1, confetti, sequins, render) {
        const ctx1 = canvas1.getContext("2d");
        ctx1.clearRect(0, 0, canvas1.width, canvas1.height);
        confetti.forEach((confetto, index)=>{
            let width = confetto.dimensions.x * confetto.scale.x;
            let height = confetto.dimensions.y * confetto.scale.y;
            // move canvas to position and rotate
            ctx1.translate(confetto.position.x, confetto.position.y);
            ctx1.rotate(confetto.rotation);
            // update confetto "physics" values
            confetto.update();
            // get front or back fill color
            ctx1.fillStyle = confetto.scale.y > 0 ? confetto.color.front : confetto.color.back;
            // draw confetto
            ctx1.fillRect(-width / 2, -height / 2, width, height);
            // reset transform matrix
            ctx1.setTransform(1, 0, 0, 1, 0, 0);
            // clear rectangle where button cuts off
            if (confetto.velocity.y < 0) ctx1.clearRect(canvas1.width / 2 - confettiButton.offsetWidth / 2, canvas1.height / 2 + confettiButton.offsetHeight / 2, confettiButton.offsetWidth, confettiButton.offsetHeight);
        });
        sequins.forEach((sequin, index)=>{
            // move canvas to position
            ctx1.translate(sequin.position.x, sequin.position.y);
            // update sequin "physics" values
            sequin.update();
            // set the color
            ctx1.fillStyle = sequin.color;
            // draw sequin
            ctx1.beginPath();
            ctx1.arc(0, 0, sequin.radius, 0, 2 * Math.PI);
            ctx1.fill();
            // reset transform matrix
            ctx1.setTransform(1, 0, 0, 1, 0, 0);
            // clear rectangle where button cuts off
            if (sequin.velocity.y < 0) ctx1.clearRect(canvas1.width / 2 - confettiButton.offsetWidth / 2, canvas1.height / 2 + confettiButton.offsetHeight / 2, confettiButton.offsetWidth, confettiButton.offsetHeight);
        });
        // remove confetti and sequins that fall off the screen
        // must be done in seperate loops to avoid noticeable flickering
        confetti.forEach((confetto, index)=>{
            if (confetto.position.y >= canvas1.height) confetti.splice(index, 1);
        });
        sequins.forEach((sequin, index)=>{
            if (sequin.position.y >= canvas1.height) sequins.splice(index, 1);
        });
        let r = render ? render : this.render;
        window.requestAnimationFrame(r.bind(null, confettiButton, canvas1, confetti, sequins, r));
    }
    // cycle through button states when clicked
    clickButtonWithRedirection(poolID) {
        if (!disabled) {
            sessionStorage.setItem("cheddarFarmJustHarvested", poolID);
            // disabled = true
            // Loading stage
            this.confettiButton.classList.add("loading");
            this.confettiButton.classList.remove("ready");
        // setTimeout(() => {
        //   // Completed stage
        //   this.confettiButton.classList.add('complete')
        //   this.confettiButton.classList.remove('loading')
        //   // setTimeout(() => {
        //   //   this.initBurst()
        //   //   setTimeout(() => {
        //   //     // Reset button so user can select it again
        //   //     disabled = false
        //   //     this.confettiButton.classList.add('ready')
        //   //     this.confettiButton.classList.remove('complete')
        //   //   }, 4000)
        //   // }, 320)
        // }, 1800)
        }
    }
    successAnimation() {
        disabled = true;
        // Loading stage
        this.confettiButton.classList.add("loading");
        this.confettiButton.classList.remove("ready");
        setTimeout(()=>{
            // Completed stage
            this.confettiButton.classList.add("complete");
            this.confettiButton.classList.remove("loading");
            setTimeout(()=>{
                this.initBurst();
                setTimeout(()=>{
                    // Reset button so user can select it again
                    disabled = false;
                    this.confettiButton.classList.add("ready");
                    this.confettiButton.classList.remove("complete");
                }, 4000);
            }, 320);
        }, 1800);
    }
    clickButtonWithoutRedirection() {
        if (!disabled) {
            disabled = true;
            // Loading stage
            this.confettiButton.classList.add("loading");
            this.confettiButton.classList.remove("ready");
            setTimeout(()=>{
                // Completed stage
                this.confettiButton.classList.add("complete");
                this.confettiButton.classList.remove("loading");
                setTimeout(()=>{
                    this.initBurst();
                    setTimeout(()=>{
                        // Reset button so user can select it again
                        disabled = false;
                        this.confettiButton.classList.add("ready");
                        this.confettiButton.classList.remove("complete");
                    }, 4000);
                }, 320);
            }, 1800);
        }
    }
    // re-init canvas if the window size changes
    resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    // cx = ctx!.canvas.width / 2
    // cy = ctx!.canvas.height / 2
    }
}
// Confetto Class
class Confetto {
    constructor(button1, canvas2){
        this.randomModifier = randomRange(0, 99);
        this.color = colors[Math.floor(randomRange(0, colors.length))];
        this.dimensions = {
            x: randomRange(5, 9),
            y: randomRange(8, 15)
        };
        this.position = {
            x: randomRange(canvas2.width / 2 - button1.offsetWidth / 4, canvas2.width / 2 + button1.offsetWidth / 4),
            y: randomRange(canvas2.height / 2 + button1.offsetHeight / 2 + 8, canvas2.height / 2 + 1.5 * button1.offsetHeight - 8)
        };
        this.rotation = randomRange(0, 2 * Math.PI);
        this.scale = {
            x: 1,
            y: 1
        };
        this.velocity = initConfettoVelocity([
            -9,
            9
        ], [
            6,
            11
        ]);
    }
    update() {
        // apply forces to velocity
        this.velocity.x -= this.velocity.x * dragConfetti;
        this.velocity.y = Math.min(this.velocity.y + gravityConfetti, terminalVelocity);
        this.velocity.x += Math.random() > 0.5 ? Math.random() : -Math.random();
        // set position
        this.position.x += this.velocity.x;
        this.position.y += this.velocity.y;
        // spin confetto by scaling y and set the color, .09 just slows cosine frequency
        this.scale.y = Math.cos((this.position.y + this.randomModifier) * 0.09);
    }
}
// Sequin Class
class Sequin {
    constructor(button2, canvas3){
        this.color = colors[Math.floor(randomRange(0, colors.length))].back, this.radius = randomRange(1, 2), this.position = {
            x: randomRange(canvas3.width / 2 - button2.offsetWidth / 3, canvas3.width / 2 + button2.offsetWidth / 3),
            y: randomRange(canvas3.height / 2 + button2.offsetHeight / 2 + 8, canvas3.height / 2 + 1.5 * button2.offsetHeight - 8)
        }, this.velocity = {
            x: randomRange(-6, 6),
            y: randomRange(-8, -12)
        };
    }
    update() {
        // apply forces to velocity
        this.velocity.x -= this.velocity.x * dragSequins;
        this.velocity.y = this.velocity.y + gravitySequins;
        // set position
        this.position.x += this.velocity.x;
        this.position.y += this.velocity.y;
    }
} // click button on spacebar or return keypress
 // document.body.onkeyup = (e) => {
 //   if (e.keyCode == 13 || e.keyCode == 32) {
 //     clickButton()
 //   }
 // }

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["iJYvl","h7u1C"], "h7u1C", "parcelRequired7b7")

//# sourceMappingURL=index.b71e74eb.js.map
